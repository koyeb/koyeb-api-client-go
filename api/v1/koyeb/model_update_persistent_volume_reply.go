/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// UpdatePersistentVolumeReply struct for UpdatePersistentVolumeReply
type UpdatePersistentVolumeReply struct {
	Volume *PersistentVolume `json:"volume,omitempty"`
}

// NewUpdatePersistentVolumeReply instantiates a new UpdatePersistentVolumeReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePersistentVolumeReply() *UpdatePersistentVolumeReply {
	this := UpdatePersistentVolumeReply{}
	return &this
}

// NewUpdatePersistentVolumeReplyWithDefaults instantiates a new UpdatePersistentVolumeReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePersistentVolumeReplyWithDefaults() *UpdatePersistentVolumeReply {
	this := UpdatePersistentVolumeReply{}
	return &this
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *UpdatePersistentVolumeReply) GetVolume() PersistentVolume {
	if o == nil || isNil(o.Volume) {
		var ret PersistentVolume
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePersistentVolumeReply) GetVolumeOk() (*PersistentVolume, bool) {
	if o == nil || isNil(o.Volume) {
    return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *UpdatePersistentVolumeReply) HasVolume() bool {
	if o != nil && !isNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given PersistentVolume and assigns it to the Volume field.
func (o *UpdatePersistentVolumeReply) SetVolume(v PersistentVolume) {
	o.Volume = &v
}

func (o UpdatePersistentVolumeReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return json.Marshal(toSerialize)
}

type NullableUpdatePersistentVolumeReply struct {
	value *UpdatePersistentVolumeReply
	isSet bool
}

func (v NullableUpdatePersistentVolumeReply) Get() *UpdatePersistentVolumeReply {
	return v.value
}

func (v *NullableUpdatePersistentVolumeReply) Set(val *UpdatePersistentVolumeReply) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePersistentVolumeReply) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePersistentVolumeReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePersistentVolumeReply(val *UpdatePersistentVolumeReply) *NullableUpdatePersistentVolumeReply {
	return &NullableUpdatePersistentVolumeReply{value: val, isSet: true}
}

func (v NullableUpdatePersistentVolumeReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePersistentVolumeReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


