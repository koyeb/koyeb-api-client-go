/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// ActivityList struct for ActivityList
type ActivityList struct {
	Activities []Activity `json:"activities,omitempty"`
	Limit *int64 `json:"limit,omitempty"`
	Offset *int64 `json:"offset,omitempty"`
}

// NewActivityList instantiates a new ActivityList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityList() *ActivityList {
	this := ActivityList{}
	return &this
}

// NewActivityListWithDefaults instantiates a new ActivityList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityListWithDefaults() *ActivityList {
	this := ActivityList{}
	return &this
}

// GetActivities returns the Activities field value if set, zero value otherwise.
func (o *ActivityList) GetActivities() []Activity {
	if o == nil || isNil(o.Activities) {
		var ret []Activity
		return ret
	}
	return o.Activities
}

// GetActivitiesOk returns a tuple with the Activities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityList) GetActivitiesOk() ([]Activity, bool) {
	if o == nil || isNil(o.Activities) {
    return nil, false
	}
	return o.Activities, true
}

// HasActivities returns a boolean if a field has been set.
func (o *ActivityList) HasActivities() bool {
	if o != nil && !isNil(o.Activities) {
		return true
	}

	return false
}

// SetActivities gets a reference to the given []Activity and assigns it to the Activities field.
func (o *ActivityList) SetActivities(v []Activity) {
	o.Activities = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ActivityList) GetLimit() int64 {
	if o == nil || isNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityList) GetLimitOk() (*int64, bool) {
	if o == nil || isNil(o.Limit) {
    return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ActivityList) HasLimit() bool {
	if o != nil && !isNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *ActivityList) SetLimit(v int64) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ActivityList) GetOffset() int64 {
	if o == nil || isNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityList) GetOffsetOk() (*int64, bool) {
	if o == nil || isNil(o.Offset) {
    return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ActivityList) HasOffset() bool {
	if o != nil && !isNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *ActivityList) SetOffset(v int64) {
	o.Offset = &v
}

func (o ActivityList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Activities) {
		toSerialize["activities"] = o.Activities
	}
	if !isNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !isNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return json.Marshal(toSerialize)
}

type NullableActivityList struct {
	value *ActivityList
	isSet bool
}

func (v NullableActivityList) Get() *ActivityList {
	return v.value
}

func (v *NullableActivityList) Set(val *ActivityList) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityList) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityList(val *ActivityList) *NullableActivityList {
	return &NullableActivityList{value: val, isSet: true}
}

func (v NullableActivityList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


