/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the GetRegionReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRegionReply{}

// GetRegionReply struct for GetRegionReply
type GetRegionReply struct {
	Region *Region `json:"region,omitempty"`
}

// NewGetRegionReply instantiates a new GetRegionReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRegionReply() *GetRegionReply {
	this := GetRegionReply{}
	return &this
}

// NewGetRegionReplyWithDefaults instantiates a new GetRegionReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRegionReplyWithDefaults() *GetRegionReply {
	this := GetRegionReply{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *GetRegionReply) GetRegion() Region {
	if o == nil || IsNil(o.Region) {
		var ret Region
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRegionReply) GetRegionOk() (*Region, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *GetRegionReply) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given Region and assigns it to the Region field.
func (o *GetRegionReply) SetRegion(v Region) {
	o.Region = &v
}

func (o GetRegionReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRegionReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	return toSerialize, nil
}

type NullableGetRegionReply struct {
	value *GetRegionReply
	isSet bool
}

func (v NullableGetRegionReply) Get() *GetRegionReply {
	return v.value
}

func (v *NullableGetRegionReply) Set(val *GetRegionReply) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRegionReply) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRegionReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRegionReply(val *GetRegionReply) *NullableGetRegionReply {
	return &NullableGetRegionReply{value: val, isSet: true}
}

func (v NullableGetRegionReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRegionReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


