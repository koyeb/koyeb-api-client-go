/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
)


type UsagesApi interface {

	/*
	GetOrganizationUsage Get organization usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetOrganizationUsageRequest
	*/
	GetOrganizationUsage(ctx context.Context) ApiGetOrganizationUsageRequest

	// GetOrganizationUsageExecute executes the request
	//  @return GetOrganizationUsageReply
	GetOrganizationUsageExecute(r ApiGetOrganizationUsageRequest) (*GetOrganizationUsageReply, *http.Response, error)

	/*
	GetOrganizationUsageDetails Get organization usage details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetOrganizationUsageDetailsRequest
	*/
	GetOrganizationUsageDetails(ctx context.Context) ApiGetOrganizationUsageDetailsRequest

	// GetOrganizationUsageDetailsExecute executes the request
	//  @return GetOrganizationUsageDetailsReply
	GetOrganizationUsageDetailsExecute(r ApiGetOrganizationUsageDetailsRequest) (*GetOrganizationUsageDetailsReply, *http.Response, error)
}

// UsagesApiService UsagesApi service
type UsagesApiService service

type ApiGetOrganizationUsageRequest struct {
	ctx context.Context
	ApiService UsagesApi
	startingTime *time.Time
	endingTime *time.Time
}

// The starting time of the period to get data from
func (r ApiGetOrganizationUsageRequest) StartingTime(startingTime time.Time) ApiGetOrganizationUsageRequest {
	r.startingTime = &startingTime
	return r
}

// The ending time of the period to get date from
func (r ApiGetOrganizationUsageRequest) EndingTime(endingTime time.Time) ApiGetOrganizationUsageRequest {
	r.endingTime = &endingTime
	return r
}

func (r ApiGetOrganizationUsageRequest) Execute() (*GetOrganizationUsageReply, *http.Response, error) {
	return r.ApiService.GetOrganizationUsageExecute(r)
}

/*
GetOrganizationUsage Get organization usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOrganizationUsageRequest
*/
func (a *UsagesApiService) GetOrganizationUsage(ctx context.Context) ApiGetOrganizationUsageRequest {
	return ApiGetOrganizationUsageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetOrganizationUsageReply
func (a *UsagesApiService) GetOrganizationUsageExecute(r ApiGetOrganizationUsageRequest) (*GetOrganizationUsageReply, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetOrganizationUsageReply
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsagesApiService.GetOrganizationUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/usages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startingTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starting_time", r.startingTime, "")
	}
	if r.endingTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ending_time", r.endingTime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GoogleRpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOrganizationUsageDetailsRequest struct {
	ctx context.Context
	ApiService UsagesApi
	startingTime *time.Time
	endingTime *time.Time
	limit *string
	offset *string
	order *string
}

// The starting time of the period to get data from
func (r ApiGetOrganizationUsageDetailsRequest) StartingTime(startingTime time.Time) ApiGetOrganizationUsageDetailsRequest {
	r.startingTime = &startingTime
	return r
}

// The ending time of the period to get date from
func (r ApiGetOrganizationUsageDetailsRequest) EndingTime(endingTime time.Time) ApiGetOrganizationUsageDetailsRequest {
	r.endingTime = &endingTime
	return r
}

// (Optional) The number of items to return
func (r ApiGetOrganizationUsageDetailsRequest) Limit(limit string) ApiGetOrganizationUsageDetailsRequest {
	r.limit = &limit
	return r
}

// (Optional) The offset in the list of item to return
func (r ApiGetOrganizationUsageDetailsRequest) Offset(offset string) ApiGetOrganizationUsageDetailsRequest {
	r.offset = &offset
	return r
}

// (Optional) Sorts the list in the ascending or the descending order
func (r ApiGetOrganizationUsageDetailsRequest) Order(order string) ApiGetOrganizationUsageDetailsRequest {
	r.order = &order
	return r
}

func (r ApiGetOrganizationUsageDetailsRequest) Execute() (*GetOrganizationUsageDetailsReply, *http.Response, error) {
	return r.ApiService.GetOrganizationUsageDetailsExecute(r)
}

/*
GetOrganizationUsageDetails Get organization usage details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOrganizationUsageDetailsRequest
*/
func (a *UsagesApiService) GetOrganizationUsageDetails(ctx context.Context) ApiGetOrganizationUsageDetailsRequest {
	return ApiGetOrganizationUsageDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetOrganizationUsageDetailsReply
func (a *UsagesApiService) GetOrganizationUsageDetailsExecute(r ApiGetOrganizationUsageDetailsRequest) (*GetOrganizationUsageDetailsReply, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetOrganizationUsageDetailsReply
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsagesApiService.GetOrganizationUsageDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/usages/details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startingTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starting_time", r.startingTime, "")
	}
	if r.endingTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ending_time", r.endingTime, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GoogleRpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
