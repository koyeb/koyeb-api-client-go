/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the CreateDomainReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDomainReply{}

// CreateDomainReply struct for CreateDomainReply
type CreateDomainReply struct {
	Domain *Domain `json:"domain,omitempty"`
}

// NewCreateDomainReply instantiates a new CreateDomainReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDomainReply() *CreateDomainReply {
	this := CreateDomainReply{}
	return &this
}

// NewCreateDomainReplyWithDefaults instantiates a new CreateDomainReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDomainReplyWithDefaults() *CreateDomainReply {
	this := CreateDomainReply{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *CreateDomainReply) GetDomain() Domain {
	if o == nil || IsNil(o.Domain) {
		var ret Domain
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDomainReply) GetDomainOk() (*Domain, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *CreateDomainReply) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given Domain and assigns it to the Domain field.
func (o *CreateDomainReply) SetDomain(v Domain) {
	o.Domain = &v
}

func (o CreateDomainReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDomainReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	return toSerialize, nil
}

type NullableCreateDomainReply struct {
	value *CreateDomainReply
	isSet bool
}

func (v NullableCreateDomainReply) Get() *CreateDomainReply {
	return v.value
}

func (v *NullableCreateDomainReply) Set(val *CreateDomainReply) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDomainReply) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDomainReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDomainReply(val *CreateDomainReply) *NullableCreateDomainReply {
	return &NullableCreateDomainReply{value: val, isSet: true}
}

func (v NullableCreateDomainReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDomainReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


