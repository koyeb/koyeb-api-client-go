/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the DeploymentEnv type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentEnv{}

// DeploymentEnv struct for DeploymentEnv
type DeploymentEnv struct {
	Scopes []string `json:"scopes,omitempty"`
	Key *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// NewDeploymentEnv instantiates a new DeploymentEnv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentEnv() *DeploymentEnv {
	this := DeploymentEnv{}
	return &this
}

// NewDeploymentEnvWithDefaults instantiates a new DeploymentEnv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentEnvWithDefaults() *DeploymentEnv {
	this := DeploymentEnv{}
	return &this
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *DeploymentEnv) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentEnv) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *DeploymentEnv) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *DeploymentEnv) SetScopes(v []string) {
	o.Scopes = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *DeploymentEnv) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentEnv) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *DeploymentEnv) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *DeploymentEnv) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DeploymentEnv) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentEnv) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DeploymentEnv) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DeploymentEnv) SetValue(v string) {
	o.Value = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *DeploymentEnv) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentEnv) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *DeploymentEnv) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *DeploymentEnv) SetSecret(v string) {
	o.Secret = &v
}

func (o DeploymentEnv) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentEnv) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableDeploymentEnv struct {
	value *DeploymentEnv
	isSet bool
}

func (v NullableDeploymentEnv) Get() *DeploymentEnv {
	return v.value
}

func (v *NullableDeploymentEnv) Set(val *DeploymentEnv) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentEnv) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentEnv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentEnv(val *DeploymentEnv) *NullableDeploymentEnv {
	return &NullableDeploymentEnv{value: val, isSet: true}
}

func (v NullableDeploymentEnv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentEnv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


