/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// ListUsageReply struct for ListUsageReply
type ListUsageReply struct {
	Usage *CatalogUsage `json:"usage,omitempty"`
}

// NewListUsageReply instantiates a new ListUsageReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListUsageReply() *ListUsageReply {
	this := ListUsageReply{}
	return &this
}

// NewListUsageReplyWithDefaults instantiates a new ListUsageReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListUsageReplyWithDefaults() *ListUsageReply {
	this := ListUsageReply{}
	return &this
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *ListUsageReply) GetUsage() CatalogUsage {
	if o == nil || isNil(o.Usage) {
		var ret CatalogUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUsageReply) GetUsageOk() (*CatalogUsage, bool) {
	if o == nil || isNil(o.Usage) {
    return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *ListUsageReply) HasUsage() bool {
	if o != nil && !isNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given CatalogUsage and assigns it to the Usage field.
func (o *ListUsageReply) SetUsage(v CatalogUsage) {
	o.Usage = &v
}

func (o ListUsageReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableListUsageReply struct {
	value *ListUsageReply
	isSet bool
}

func (v NullableListUsageReply) Get() *ListUsageReply {
	return v.value
}

func (v *NullableListUsageReply) Set(val *ListUsageReply) {
	v.value = val
	v.isSet = true
}

func (v NullableListUsageReply) IsSet() bool {
	return v.isSet
}

func (v *NullableListUsageReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUsageReply(val *ListUsageReply) *NullableListUsageReply {
	return &NullableListUsageReply{value: val, isSet: true}
}

func (v NullableListUsageReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUsageReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


