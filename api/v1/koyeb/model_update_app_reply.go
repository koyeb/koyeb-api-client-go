/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the UpdateAppReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAppReply{}

// UpdateAppReply struct for UpdateAppReply
type UpdateAppReply struct {
	App *App `json:"app,omitempty"`
}

// NewUpdateAppReply instantiates a new UpdateAppReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAppReply() *UpdateAppReply {
	this := UpdateAppReply{}
	return &this
}

// NewUpdateAppReplyWithDefaults instantiates a new UpdateAppReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAppReplyWithDefaults() *UpdateAppReply {
	this := UpdateAppReply{}
	return &this
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *UpdateAppReply) GetApp() App {
	if o == nil || IsNil(o.App) {
		var ret App
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAppReply) GetAppOk() (*App, bool) {
	if o == nil || IsNil(o.App) {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *UpdateAppReply) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}

// SetApp gets a reference to the given App and assigns it to the App field.
func (o *UpdateAppReply) SetApp(v App) {
	o.App = &v
}

func (o UpdateAppReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAppReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	return toSerialize, nil
}

type NullableUpdateAppReply struct {
	value *UpdateAppReply
	isSet bool
}

func (v NullableUpdateAppReply) Get() *UpdateAppReply {
	return v.value
}

func (v *NullableUpdateAppReply) Set(val *UpdateAppReply) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAppReply) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAppReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAppReply(val *UpdateAppReply) *NullableUpdateAppReply {
	return &NullableUpdateAppReply{value: val, isSet: true}
}

func (v NullableUpdateAppReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAppReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


