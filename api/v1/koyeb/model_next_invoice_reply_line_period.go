/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"time"
)

// NextInvoiceReplyLinePeriod struct for NextInvoiceReplyLinePeriod
type NextInvoiceReplyLinePeriod struct {
	Start *time.Time `json:"start,omitempty"`
	End *time.Time `json:"end,omitempty"`
}

// NewNextInvoiceReplyLinePeriod instantiates a new NextInvoiceReplyLinePeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNextInvoiceReplyLinePeriod() *NextInvoiceReplyLinePeriod {
	this := NextInvoiceReplyLinePeriod{}
	return &this
}

// NewNextInvoiceReplyLinePeriodWithDefaults instantiates a new NextInvoiceReplyLinePeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextInvoiceReplyLinePeriodWithDefaults() *NextInvoiceReplyLinePeriod {
	this := NextInvoiceReplyLinePeriod{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *NextInvoiceReplyLinePeriod) GetStart() time.Time {
	if o == nil || isNil(o.Start) {
		var ret time.Time
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextInvoiceReplyLinePeriod) GetStartOk() (*time.Time, bool) {
	if o == nil || isNil(o.Start) {
    return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *NextInvoiceReplyLinePeriod) HasStart() bool {
	if o != nil && !isNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given time.Time and assigns it to the Start field.
func (o *NextInvoiceReplyLinePeriod) SetStart(v time.Time) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *NextInvoiceReplyLinePeriod) GetEnd() time.Time {
	if o == nil || isNil(o.End) {
		var ret time.Time
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextInvoiceReplyLinePeriod) GetEndOk() (*time.Time, bool) {
	if o == nil || isNil(o.End) {
    return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *NextInvoiceReplyLinePeriod) HasEnd() bool {
	if o != nil && !isNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given time.Time and assigns it to the End field.
func (o *NextInvoiceReplyLinePeriod) SetEnd(v time.Time) {
	o.End = &v
}

func (o NextInvoiceReplyLinePeriod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !isNil(o.End) {
		toSerialize["end"] = o.End
	}
	return json.Marshal(toSerialize)
}

type NullableNextInvoiceReplyLinePeriod struct {
	value *NextInvoiceReplyLinePeriod
	isSet bool
}

func (v NullableNextInvoiceReplyLinePeriod) Get() *NextInvoiceReplyLinePeriod {
	return v.value
}

func (v *NullableNextInvoiceReplyLinePeriod) Set(val *NextInvoiceReplyLinePeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableNextInvoiceReplyLinePeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableNextInvoiceReplyLinePeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextInvoiceReplyLinePeriod(val *NextInvoiceReplyLinePeriod) *NullableNextInvoiceReplyLinePeriod {
	return &NullableNextInvoiceReplyLinePeriod{value: val, isSet: true}
}

func (v NullableNextInvoiceReplyLinePeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextInvoiceReplyLinePeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


