/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// CreateSnapshotReply struct for CreateSnapshotReply
type CreateSnapshotReply struct {
	Snapshot *Snapshot `json:"snapshot,omitempty"`
}

// NewCreateSnapshotReply instantiates a new CreateSnapshotReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSnapshotReply() *CreateSnapshotReply {
	this := CreateSnapshotReply{}
	return &this
}

// NewCreateSnapshotReplyWithDefaults instantiates a new CreateSnapshotReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSnapshotReplyWithDefaults() *CreateSnapshotReply {
	this := CreateSnapshotReply{}
	return &this
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *CreateSnapshotReply) GetSnapshot() Snapshot {
	if o == nil || isNil(o.Snapshot) {
		var ret Snapshot
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSnapshotReply) GetSnapshotOk() (*Snapshot, bool) {
	if o == nil || isNil(o.Snapshot) {
    return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *CreateSnapshotReply) HasSnapshot() bool {
	if o != nil && !isNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given Snapshot and assigns it to the Snapshot field.
func (o *CreateSnapshotReply) SetSnapshot(v Snapshot) {
	o.Snapshot = &v
}

func (o CreateSnapshotReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	return json.Marshal(toSerialize)
}

type NullableCreateSnapshotReply struct {
	value *CreateSnapshotReply
	isSet bool
}

func (v NullableCreateSnapshotReply) Get() *CreateSnapshotReply {
	return v.value
}

func (v *NullableCreateSnapshotReply) Set(val *CreateSnapshotReply) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSnapshotReply) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSnapshotReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSnapshotReply(val *CreateSnapshotReply) *NullableCreateSnapshotReply {
	return &NullableCreateSnapshotReply{value: val, isSet: true}
}

func (v NullableCreateSnapshotReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSnapshotReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


