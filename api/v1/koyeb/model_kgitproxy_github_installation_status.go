/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// KgitproxyGithubInstallationStatus the model 'KgitproxyGithubInstallationStatus'
type KgitproxyGithubInstallationStatus string

// List of kgitproxy.GithubInstallation.Status
const (
	KGITPROXYGITHUBINSTALLATIONSTATUS_INVALID KgitproxyGithubInstallationStatus = "INVALID"
	KGITPROXYGITHUBINSTALLATIONSTATUS_INSTALLED KgitproxyGithubInstallationStatus = "INSTALLED"
	KGITPROXYGITHUBINSTALLATIONSTATUS_SUSPENDED KgitproxyGithubInstallationStatus = "SUSPENDED"
	KGITPROXYGITHUBINSTALLATIONSTATUS_DELETED KgitproxyGithubInstallationStatus = "DELETED"
)

var allowedKgitproxyGithubInstallationStatusEnumValues = []KgitproxyGithubInstallationStatus{
	"INVALID",
	"INSTALLED",
	"SUSPENDED",
	"DELETED",
}

func (v *KgitproxyGithubInstallationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KgitproxyGithubInstallationStatus(value)
	for _, existing := range allowedKgitproxyGithubInstallationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KgitproxyGithubInstallationStatus", value)
}

// NewKgitproxyGithubInstallationStatusFromValue returns a pointer to a valid KgitproxyGithubInstallationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKgitproxyGithubInstallationStatusFromValue(v string) (*KgitproxyGithubInstallationStatus, error) {
	ev := KgitproxyGithubInstallationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KgitproxyGithubInstallationStatus: valid values are %v", v, allowedKgitproxyGithubInstallationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KgitproxyGithubInstallationStatus) IsValid() bool {
	for _, existing := range allowedKgitproxyGithubInstallationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to kgitproxy.GithubInstallation.Status value
func (v KgitproxyGithubInstallationStatus) Ptr() *KgitproxyGithubInstallationStatus {
	return &v
}

type NullableKgitproxyGithubInstallationStatus struct {
	value *KgitproxyGithubInstallationStatus
	isSet bool
}

func (v NullableKgitproxyGithubInstallationStatus) Get() *KgitproxyGithubInstallationStatus {
	return v.value
}

func (v *NullableKgitproxyGithubInstallationStatus) Set(val *KgitproxyGithubInstallationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableKgitproxyGithubInstallationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableKgitproxyGithubInstallationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKgitproxyGithubInstallationStatus(val *KgitproxyGithubInstallationStatus) *NullableKgitproxyGithubInstallationStatus {
	return &NullableKgitproxyGithubInstallationStatus{value: val, isSet: true}
}

func (v NullableKgitproxyGithubInstallationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKgitproxyGithubInstallationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

