/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// ConfigFile struct for ConfigFile
type ConfigFile struct {
	Path *string `json:"path,omitempty"`
	Permissions *string `json:"permissions,omitempty"`
	Content *string `json:"content,omitempty"`
}

// NewConfigFile instantiates a new ConfigFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigFile() *ConfigFile {
	this := ConfigFile{}
	return &this
}

// NewConfigFileWithDefaults instantiates a new ConfigFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigFileWithDefaults() *ConfigFile {
	this := ConfigFile{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ConfigFile) GetPath() string {
	if o == nil || isNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigFile) GetPathOk() (*string, bool) {
	if o == nil || isNil(o.Path) {
    return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ConfigFile) HasPath() bool {
	if o != nil && !isNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ConfigFile) SetPath(v string) {
	o.Path = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ConfigFile) GetPermissions() string {
	if o == nil || isNil(o.Permissions) {
		var ret string
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigFile) GetPermissionsOk() (*string, bool) {
	if o == nil || isNil(o.Permissions) {
    return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ConfigFile) HasPermissions() bool {
	if o != nil && !isNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given string and assigns it to the Permissions field.
func (o *ConfigFile) SetPermissions(v string) {
	o.Permissions = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ConfigFile) GetContent() string {
	if o == nil || isNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigFile) GetContentOk() (*string, bool) {
	if o == nil || isNil(o.Content) {
    return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ConfigFile) HasContent() bool {
	if o != nil && !isNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ConfigFile) SetContent(v string) {
	o.Content = &v
}

func (o ConfigFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !isNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !isNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableConfigFile struct {
	value *ConfigFile
	isSet bool
}

func (v NullableConfigFile) Get() *ConfigFile {
	return v.value
}

func (v *NullableConfigFile) Set(val *ConfigFile) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigFile) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigFile(val *ConfigFile) *NullableConfigFile {
	return &NullableConfigFile{value: val, isSet: true}
}

func (v NullableConfigFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


