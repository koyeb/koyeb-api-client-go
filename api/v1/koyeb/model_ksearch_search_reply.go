/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the KsearchSearchReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KsearchSearchReply{}

// KsearchSearchReply struct for KsearchSearchReply
type KsearchSearchReply struct {
	Organizations []KsearchOrganization `json:"organizations,omitempty"`
	Users []KsearchUser `json:"users,omitempty"`
	Apps []KsearchApp `json:"apps,omitempty"`
	Services []KsearchService `json:"services,omitempty"`
	GlobalDeployments []KsearchGlobalDeployment `json:"global_deployments,omitempty"`
	RegionalDeployments []KsearchRegionalDeployment `json:"regional_deployments,omitempty"`
	Instances []KsearchInstance `json:"instances,omitempty"`
}

// NewKsearchSearchReply instantiates a new KsearchSearchReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKsearchSearchReply() *KsearchSearchReply {
	this := KsearchSearchReply{}
	return &this
}

// NewKsearchSearchReplyWithDefaults instantiates a new KsearchSearchReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKsearchSearchReplyWithDefaults() *KsearchSearchReply {
	this := KsearchSearchReply{}
	return &this
}

// GetOrganizations returns the Organizations field value if set, zero value otherwise.
func (o *KsearchSearchReply) GetOrganizations() []KsearchOrganization {
	if o == nil || IsNil(o.Organizations) {
		var ret []KsearchOrganization
		return ret
	}
	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsearchSearchReply) GetOrganizationsOk() ([]KsearchOrganization, bool) {
	if o == nil || IsNil(o.Organizations) {
		return nil, false
	}
	return o.Organizations, true
}

// HasOrganizations returns a boolean if a field has been set.
func (o *KsearchSearchReply) HasOrganizations() bool {
	if o != nil && !IsNil(o.Organizations) {
		return true
	}

	return false
}

// SetOrganizations gets a reference to the given []KsearchOrganization and assigns it to the Organizations field.
func (o *KsearchSearchReply) SetOrganizations(v []KsearchOrganization) {
	o.Organizations = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *KsearchSearchReply) GetUsers() []KsearchUser {
	if o == nil || IsNil(o.Users) {
		var ret []KsearchUser
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsearchSearchReply) GetUsersOk() ([]KsearchUser, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *KsearchSearchReply) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []KsearchUser and assigns it to the Users field.
func (o *KsearchSearchReply) SetUsers(v []KsearchUser) {
	o.Users = v
}

// GetApps returns the Apps field value if set, zero value otherwise.
func (o *KsearchSearchReply) GetApps() []KsearchApp {
	if o == nil || IsNil(o.Apps) {
		var ret []KsearchApp
		return ret
	}
	return o.Apps
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsearchSearchReply) GetAppsOk() ([]KsearchApp, bool) {
	if o == nil || IsNil(o.Apps) {
		return nil, false
	}
	return o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *KsearchSearchReply) HasApps() bool {
	if o != nil && !IsNil(o.Apps) {
		return true
	}

	return false
}

// SetApps gets a reference to the given []KsearchApp and assigns it to the Apps field.
func (o *KsearchSearchReply) SetApps(v []KsearchApp) {
	o.Apps = v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *KsearchSearchReply) GetServices() []KsearchService {
	if o == nil || IsNil(o.Services) {
		var ret []KsearchService
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsearchSearchReply) GetServicesOk() ([]KsearchService, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *KsearchSearchReply) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []KsearchService and assigns it to the Services field.
func (o *KsearchSearchReply) SetServices(v []KsearchService) {
	o.Services = v
}

// GetGlobalDeployments returns the GlobalDeployments field value if set, zero value otherwise.
func (o *KsearchSearchReply) GetGlobalDeployments() []KsearchGlobalDeployment {
	if o == nil || IsNil(o.GlobalDeployments) {
		var ret []KsearchGlobalDeployment
		return ret
	}
	return o.GlobalDeployments
}

// GetGlobalDeploymentsOk returns a tuple with the GlobalDeployments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsearchSearchReply) GetGlobalDeploymentsOk() ([]KsearchGlobalDeployment, bool) {
	if o == nil || IsNil(o.GlobalDeployments) {
		return nil, false
	}
	return o.GlobalDeployments, true
}

// HasGlobalDeployments returns a boolean if a field has been set.
func (o *KsearchSearchReply) HasGlobalDeployments() bool {
	if o != nil && !IsNil(o.GlobalDeployments) {
		return true
	}

	return false
}

// SetGlobalDeployments gets a reference to the given []KsearchGlobalDeployment and assigns it to the GlobalDeployments field.
func (o *KsearchSearchReply) SetGlobalDeployments(v []KsearchGlobalDeployment) {
	o.GlobalDeployments = v
}

// GetRegionalDeployments returns the RegionalDeployments field value if set, zero value otherwise.
func (o *KsearchSearchReply) GetRegionalDeployments() []KsearchRegionalDeployment {
	if o == nil || IsNil(o.RegionalDeployments) {
		var ret []KsearchRegionalDeployment
		return ret
	}
	return o.RegionalDeployments
}

// GetRegionalDeploymentsOk returns a tuple with the RegionalDeployments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsearchSearchReply) GetRegionalDeploymentsOk() ([]KsearchRegionalDeployment, bool) {
	if o == nil || IsNil(o.RegionalDeployments) {
		return nil, false
	}
	return o.RegionalDeployments, true
}

// HasRegionalDeployments returns a boolean if a field has been set.
func (o *KsearchSearchReply) HasRegionalDeployments() bool {
	if o != nil && !IsNil(o.RegionalDeployments) {
		return true
	}

	return false
}

// SetRegionalDeployments gets a reference to the given []KsearchRegionalDeployment and assigns it to the RegionalDeployments field.
func (o *KsearchSearchReply) SetRegionalDeployments(v []KsearchRegionalDeployment) {
	o.RegionalDeployments = v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *KsearchSearchReply) GetInstances() []KsearchInstance {
	if o == nil || IsNil(o.Instances) {
		var ret []KsearchInstance
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsearchSearchReply) GetInstancesOk() ([]KsearchInstance, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *KsearchSearchReply) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []KsearchInstance and assigns it to the Instances field.
func (o *KsearchSearchReply) SetInstances(v []KsearchInstance) {
	o.Instances = v
}

func (o KsearchSearchReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KsearchSearchReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Organizations) {
		toSerialize["organizations"] = o.Organizations
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Apps) {
		toSerialize["apps"] = o.Apps
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.GlobalDeployments) {
		toSerialize["global_deployments"] = o.GlobalDeployments
	}
	if !IsNil(o.RegionalDeployments) {
		toSerialize["regional_deployments"] = o.RegionalDeployments
	}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	return toSerialize, nil
}

type NullableKsearchSearchReply struct {
	value *KsearchSearchReply
	isSet bool
}

func (v NullableKsearchSearchReply) Get() *KsearchSearchReply {
	return v.value
}

func (v *NullableKsearchSearchReply) Set(val *KsearchSearchReply) {
	v.value = val
	v.isSet = true
}

func (v NullableKsearchSearchReply) IsSet() bool {
	return v.isSet
}

func (v *NullableKsearchSearchReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKsearchSearchReply(val *KsearchSearchReply) *NullableKsearchSearchReply {
	return &NullableKsearchSearchReply{value: val, isSet: true}
}

func (v NullableKsearchSearchReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKsearchSearchReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


