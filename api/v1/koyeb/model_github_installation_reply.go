/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the GithubInstallationReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubInstallationReply{}

// GithubInstallationReply struct for GithubInstallationReply
type GithubInstallationReply struct {
	AppName *string `json:"app_name,omitempty"`
	AppId *string `json:"app_id,omitempty"`
	Url *string `json:"url,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewGithubInstallationReply instantiates a new GithubInstallationReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubInstallationReply() *GithubInstallationReply {
	this := GithubInstallationReply{}
	return &this
}

// NewGithubInstallationReplyWithDefaults instantiates a new GithubInstallationReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubInstallationReplyWithDefaults() *GithubInstallationReply {
	this := GithubInstallationReply{}
	return &this
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *GithubInstallationReply) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubInstallationReply) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *GithubInstallationReply) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *GithubInstallationReply) SetAppName(v string) {
	o.AppName = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *GithubInstallationReply) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubInstallationReply) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *GithubInstallationReply) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *GithubInstallationReply) SetAppId(v string) {
	o.AppId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GithubInstallationReply) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubInstallationReply) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GithubInstallationReply) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GithubInstallationReply) SetUrl(v string) {
	o.Url = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *GithubInstallationReply) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubInstallationReply) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *GithubInstallationReply) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *GithubInstallationReply) SetState(v string) {
	o.State = &v
}

func (o GithubInstallationReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubInstallationReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppName) {
		toSerialize["app_name"] = o.AppName
	}
	if !IsNil(o.AppId) {
		toSerialize["app_id"] = o.AppId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableGithubInstallationReply struct {
	value *GithubInstallationReply
	isSet bool
}

func (v NullableGithubInstallationReply) Get() *GithubInstallationReply {
	return v.value
}

func (v *NullableGithubInstallationReply) Set(val *GithubInstallationReply) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubInstallationReply) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubInstallationReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubInstallationReply(val *GithubInstallationReply) *NullableGithubInstallationReply {
	return &NullableGithubInstallationReply{value: val, isSet: true}
}

func (v NullableGithubInstallationReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubInstallationReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


