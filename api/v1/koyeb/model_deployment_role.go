/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// DeploymentRole the model 'DeploymentRole'
type DeploymentRole string

// List of Deployment.Role
const (
	DEPLOYMENTROLE_INVALID DeploymentRole = "INVALID"
	DEPLOYMENTROLE_ACTIVE DeploymentRole = "ACTIVE"
	DEPLOYMENTROLE_UPCOMING DeploymentRole = "UPCOMING"
	DEPLOYMENTROLE_CURRENT DeploymentRole = "CURRENT"
)

// All allowed values of DeploymentRole enum
var AllowedDeploymentRoleEnumValues = []DeploymentRole{
	"INVALID",
	"ACTIVE",
	"UPCOMING",
	"CURRENT",
}

func (v *DeploymentRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentRole(value)
	for _, existing := range AllowedDeploymentRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentRole", value)
}

// NewDeploymentRoleFromValue returns a pointer to a valid DeploymentRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentRoleFromValue(v string) (*DeploymentRole, error) {
	ev := DeploymentRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentRole: valid values are %v", v, AllowedDeploymentRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentRole) IsValid() bool {
	for _, existing := range AllowedDeploymentRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Deployment.Role value
func (v DeploymentRole) Ptr() *DeploymentRole {
	return &v
}

type NullableDeploymentRole struct {
	value *DeploymentRole
	isSet bool
}

func (v NullableDeploymentRole) Get() *DeploymentRole {
	return v.value
}

func (v *NullableDeploymentRole) Set(val *DeploymentRole) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentRole) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentRole(val *DeploymentRole) *NullableDeploymentRole {
	return &NullableDeploymentRole{value: val, isSet: true}
}

func (v NullableDeploymentRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

