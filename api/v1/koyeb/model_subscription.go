/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"time"
)

// Subscription struct for Subscription
type Subscription struct {
	Id *string `json:"id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Version *string `json:"version,omitempty"`
	OrganizationId *string `json:"organization_id,omitempty"`
	StripeSubscriptionId *string `json:"stripe_subscription_id,omitempty"`
	Status *SubscriptionStatus `json:"status,omitempty"`
	Messages []string `json:"messages,omitempty"`
	HasPendingUpdate *bool `json:"has_pending_update,omitempty"`
	StripePendingInvoiceId *string `json:"stripe_pending_invoice_id,omitempty"`
	TerminateAt *time.Time `json:"terminate_at,omitempty"`
	CanceledAt *time.Time `json:"canceled_at,omitempty"`
	TerminatedAt *time.Time `json:"terminated_at,omitempty"`
	CurrentPeriodStart *time.Time `json:"current_period_start,omitempty"`
	CurrentPeriodEnd *time.Time `json:"current_period_end,omitempty"`
	Currency *string `json:"currency,omitempty"`
	AmountPayable *string `json:"amount_payable,omitempty"`
	AmountPaid *string `json:"amount_paid,omitempty"`
	AmountRemaining *string `json:"amount_remaining,omitempty"`
	PaymentFailure *SubscriptionPaymentFailure `json:"payment_failure,omitempty"`
	Trialing *bool `json:"trialing,omitempty"`
	TrialEndsAt *time.Time `json:"trial_ends_at,omitempty"`
	TrialMaxSpend *string `json:"trial_max_spend,omitempty"`
	CurrentSpend *string `json:"current_spend,omitempty"`
}

// NewSubscription instantiates a new Subscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscription() *Subscription {
	this := Subscription{}
	var status SubscriptionStatus = SUBSCRIPTIONSTATUS_INVALID
	this.Status = &status
	return &this
}

// NewSubscriptionWithDefaults instantiates a new Subscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionWithDefaults() *Subscription {
	this := Subscription{}
	var status SubscriptionStatus = SUBSCRIPTIONSTATUS_INVALID
	this.Status = &status
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Subscription) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Subscription) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Subscription) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Subscription) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Subscription) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Subscription) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Subscription) GetUpdatedAt() time.Time {
	if o == nil || isNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.UpdatedAt) {
    return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Subscription) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Subscription) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Subscription) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Subscription) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Subscription) SetVersion(v string) {
	o.Version = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *Subscription) GetOrganizationId() string {
	if o == nil || isNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetOrganizationIdOk() (*string, bool) {
	if o == nil || isNil(o.OrganizationId) {
    return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *Subscription) HasOrganizationId() bool {
	if o != nil && !isNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *Subscription) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetStripeSubscriptionId returns the StripeSubscriptionId field value if set, zero value otherwise.
func (o *Subscription) GetStripeSubscriptionId() string {
	if o == nil || isNil(o.StripeSubscriptionId) {
		var ret string
		return ret
	}
	return *o.StripeSubscriptionId
}

// GetStripeSubscriptionIdOk returns a tuple with the StripeSubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetStripeSubscriptionIdOk() (*string, bool) {
	if o == nil || isNil(o.StripeSubscriptionId) {
    return nil, false
	}
	return o.StripeSubscriptionId, true
}

// HasStripeSubscriptionId returns a boolean if a field has been set.
func (o *Subscription) HasStripeSubscriptionId() bool {
	if o != nil && !isNil(o.StripeSubscriptionId) {
		return true
	}

	return false
}

// SetStripeSubscriptionId gets a reference to the given string and assigns it to the StripeSubscriptionId field.
func (o *Subscription) SetStripeSubscriptionId(v string) {
	o.StripeSubscriptionId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Subscription) GetStatus() SubscriptionStatus {
	if o == nil || isNil(o.Status) {
		var ret SubscriptionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetStatusOk() (*SubscriptionStatus, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Subscription) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SubscriptionStatus and assigns it to the Status field.
func (o *Subscription) SetStatus(v SubscriptionStatus) {
	o.Status = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *Subscription) GetMessages() []string {
	if o == nil || isNil(o.Messages) {
		var ret []string
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetMessagesOk() ([]string, bool) {
	if o == nil || isNil(o.Messages) {
    return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *Subscription) HasMessages() bool {
	if o != nil && !isNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []string and assigns it to the Messages field.
func (o *Subscription) SetMessages(v []string) {
	o.Messages = v
}

// GetHasPendingUpdate returns the HasPendingUpdate field value if set, zero value otherwise.
func (o *Subscription) GetHasPendingUpdate() bool {
	if o == nil || isNil(o.HasPendingUpdate) {
		var ret bool
		return ret
	}
	return *o.HasPendingUpdate
}

// GetHasPendingUpdateOk returns a tuple with the HasPendingUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetHasPendingUpdateOk() (*bool, bool) {
	if o == nil || isNil(o.HasPendingUpdate) {
    return nil, false
	}
	return o.HasPendingUpdate, true
}

// HasHasPendingUpdate returns a boolean if a field has been set.
func (o *Subscription) HasHasPendingUpdate() bool {
	if o != nil && !isNil(o.HasPendingUpdate) {
		return true
	}

	return false
}

// SetHasPendingUpdate gets a reference to the given bool and assigns it to the HasPendingUpdate field.
func (o *Subscription) SetHasPendingUpdate(v bool) {
	o.HasPendingUpdate = &v
}

// GetStripePendingInvoiceId returns the StripePendingInvoiceId field value if set, zero value otherwise.
func (o *Subscription) GetStripePendingInvoiceId() string {
	if o == nil || isNil(o.StripePendingInvoiceId) {
		var ret string
		return ret
	}
	return *o.StripePendingInvoiceId
}

// GetStripePendingInvoiceIdOk returns a tuple with the StripePendingInvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetStripePendingInvoiceIdOk() (*string, bool) {
	if o == nil || isNil(o.StripePendingInvoiceId) {
    return nil, false
	}
	return o.StripePendingInvoiceId, true
}

// HasStripePendingInvoiceId returns a boolean if a field has been set.
func (o *Subscription) HasStripePendingInvoiceId() bool {
	if o != nil && !isNil(o.StripePendingInvoiceId) {
		return true
	}

	return false
}

// SetStripePendingInvoiceId gets a reference to the given string and assigns it to the StripePendingInvoiceId field.
func (o *Subscription) SetStripePendingInvoiceId(v string) {
	o.StripePendingInvoiceId = &v
}

// GetTerminateAt returns the TerminateAt field value if set, zero value otherwise.
func (o *Subscription) GetTerminateAt() time.Time {
	if o == nil || isNil(o.TerminateAt) {
		var ret time.Time
		return ret
	}
	return *o.TerminateAt
}

// GetTerminateAtOk returns a tuple with the TerminateAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetTerminateAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.TerminateAt) {
    return nil, false
	}
	return o.TerminateAt, true
}

// HasTerminateAt returns a boolean if a field has been set.
func (o *Subscription) HasTerminateAt() bool {
	if o != nil && !isNil(o.TerminateAt) {
		return true
	}

	return false
}

// SetTerminateAt gets a reference to the given time.Time and assigns it to the TerminateAt field.
func (o *Subscription) SetTerminateAt(v time.Time) {
	o.TerminateAt = &v
}

// GetCanceledAt returns the CanceledAt field value if set, zero value otherwise.
func (o *Subscription) GetCanceledAt() time.Time {
	if o == nil || isNil(o.CanceledAt) {
		var ret time.Time
		return ret
	}
	return *o.CanceledAt
}

// GetCanceledAtOk returns a tuple with the CanceledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetCanceledAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CanceledAt) {
    return nil, false
	}
	return o.CanceledAt, true
}

// HasCanceledAt returns a boolean if a field has been set.
func (o *Subscription) HasCanceledAt() bool {
	if o != nil && !isNil(o.CanceledAt) {
		return true
	}

	return false
}

// SetCanceledAt gets a reference to the given time.Time and assigns it to the CanceledAt field.
func (o *Subscription) SetCanceledAt(v time.Time) {
	o.CanceledAt = &v
}

// GetTerminatedAt returns the TerminatedAt field value if set, zero value otherwise.
func (o *Subscription) GetTerminatedAt() time.Time {
	if o == nil || isNil(o.TerminatedAt) {
		var ret time.Time
		return ret
	}
	return *o.TerminatedAt
}

// GetTerminatedAtOk returns a tuple with the TerminatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetTerminatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.TerminatedAt) {
    return nil, false
	}
	return o.TerminatedAt, true
}

// HasTerminatedAt returns a boolean if a field has been set.
func (o *Subscription) HasTerminatedAt() bool {
	if o != nil && !isNil(o.TerminatedAt) {
		return true
	}

	return false
}

// SetTerminatedAt gets a reference to the given time.Time and assigns it to the TerminatedAt field.
func (o *Subscription) SetTerminatedAt(v time.Time) {
	o.TerminatedAt = &v
}

// GetCurrentPeriodStart returns the CurrentPeriodStart field value if set, zero value otherwise.
func (o *Subscription) GetCurrentPeriodStart() time.Time {
	if o == nil || isNil(o.CurrentPeriodStart) {
		var ret time.Time
		return ret
	}
	return *o.CurrentPeriodStart
}

// GetCurrentPeriodStartOk returns a tuple with the CurrentPeriodStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetCurrentPeriodStartOk() (*time.Time, bool) {
	if o == nil || isNil(o.CurrentPeriodStart) {
    return nil, false
	}
	return o.CurrentPeriodStart, true
}

// HasCurrentPeriodStart returns a boolean if a field has been set.
func (o *Subscription) HasCurrentPeriodStart() bool {
	if o != nil && !isNil(o.CurrentPeriodStart) {
		return true
	}

	return false
}

// SetCurrentPeriodStart gets a reference to the given time.Time and assigns it to the CurrentPeriodStart field.
func (o *Subscription) SetCurrentPeriodStart(v time.Time) {
	o.CurrentPeriodStart = &v
}

// GetCurrentPeriodEnd returns the CurrentPeriodEnd field value if set, zero value otherwise.
func (o *Subscription) GetCurrentPeriodEnd() time.Time {
	if o == nil || isNil(o.CurrentPeriodEnd) {
		var ret time.Time
		return ret
	}
	return *o.CurrentPeriodEnd
}

// GetCurrentPeriodEndOk returns a tuple with the CurrentPeriodEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetCurrentPeriodEndOk() (*time.Time, bool) {
	if o == nil || isNil(o.CurrentPeriodEnd) {
    return nil, false
	}
	return o.CurrentPeriodEnd, true
}

// HasCurrentPeriodEnd returns a boolean if a field has been set.
func (o *Subscription) HasCurrentPeriodEnd() bool {
	if o != nil && !isNil(o.CurrentPeriodEnd) {
		return true
	}

	return false
}

// SetCurrentPeriodEnd gets a reference to the given time.Time and assigns it to the CurrentPeriodEnd field.
func (o *Subscription) SetCurrentPeriodEnd(v time.Time) {
	o.CurrentPeriodEnd = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Subscription) GetCurrency() string {
	if o == nil || isNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Subscription) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Subscription) SetCurrency(v string) {
	o.Currency = &v
}

// GetAmountPayable returns the AmountPayable field value if set, zero value otherwise.
func (o *Subscription) GetAmountPayable() string {
	if o == nil || isNil(o.AmountPayable) {
		var ret string
		return ret
	}
	return *o.AmountPayable
}

// GetAmountPayableOk returns a tuple with the AmountPayable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetAmountPayableOk() (*string, bool) {
	if o == nil || isNil(o.AmountPayable) {
    return nil, false
	}
	return o.AmountPayable, true
}

// HasAmountPayable returns a boolean if a field has been set.
func (o *Subscription) HasAmountPayable() bool {
	if o != nil && !isNil(o.AmountPayable) {
		return true
	}

	return false
}

// SetAmountPayable gets a reference to the given string and assigns it to the AmountPayable field.
func (o *Subscription) SetAmountPayable(v string) {
	o.AmountPayable = &v
}

// GetAmountPaid returns the AmountPaid field value if set, zero value otherwise.
func (o *Subscription) GetAmountPaid() string {
	if o == nil || isNil(o.AmountPaid) {
		var ret string
		return ret
	}
	return *o.AmountPaid
}

// GetAmountPaidOk returns a tuple with the AmountPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetAmountPaidOk() (*string, bool) {
	if o == nil || isNil(o.AmountPaid) {
    return nil, false
	}
	return o.AmountPaid, true
}

// HasAmountPaid returns a boolean if a field has been set.
func (o *Subscription) HasAmountPaid() bool {
	if o != nil && !isNil(o.AmountPaid) {
		return true
	}

	return false
}

// SetAmountPaid gets a reference to the given string and assigns it to the AmountPaid field.
func (o *Subscription) SetAmountPaid(v string) {
	o.AmountPaid = &v
}

// GetAmountRemaining returns the AmountRemaining field value if set, zero value otherwise.
func (o *Subscription) GetAmountRemaining() string {
	if o == nil || isNil(o.AmountRemaining) {
		var ret string
		return ret
	}
	return *o.AmountRemaining
}

// GetAmountRemainingOk returns a tuple with the AmountRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetAmountRemainingOk() (*string, bool) {
	if o == nil || isNil(o.AmountRemaining) {
    return nil, false
	}
	return o.AmountRemaining, true
}

// HasAmountRemaining returns a boolean if a field has been set.
func (o *Subscription) HasAmountRemaining() bool {
	if o != nil && !isNil(o.AmountRemaining) {
		return true
	}

	return false
}

// SetAmountRemaining gets a reference to the given string and assigns it to the AmountRemaining field.
func (o *Subscription) SetAmountRemaining(v string) {
	o.AmountRemaining = &v
}

// GetPaymentFailure returns the PaymentFailure field value if set, zero value otherwise.
func (o *Subscription) GetPaymentFailure() SubscriptionPaymentFailure {
	if o == nil || isNil(o.PaymentFailure) {
		var ret SubscriptionPaymentFailure
		return ret
	}
	return *o.PaymentFailure
}

// GetPaymentFailureOk returns a tuple with the PaymentFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetPaymentFailureOk() (*SubscriptionPaymentFailure, bool) {
	if o == nil || isNil(o.PaymentFailure) {
    return nil, false
	}
	return o.PaymentFailure, true
}

// HasPaymentFailure returns a boolean if a field has been set.
func (o *Subscription) HasPaymentFailure() bool {
	if o != nil && !isNil(o.PaymentFailure) {
		return true
	}

	return false
}

// SetPaymentFailure gets a reference to the given SubscriptionPaymentFailure and assigns it to the PaymentFailure field.
func (o *Subscription) SetPaymentFailure(v SubscriptionPaymentFailure) {
	o.PaymentFailure = &v
}

// GetTrialing returns the Trialing field value if set, zero value otherwise.
func (o *Subscription) GetTrialing() bool {
	if o == nil || isNil(o.Trialing) {
		var ret bool
		return ret
	}
	return *o.Trialing
}

// GetTrialingOk returns a tuple with the Trialing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetTrialingOk() (*bool, bool) {
	if o == nil || isNil(o.Trialing) {
    return nil, false
	}
	return o.Trialing, true
}

// HasTrialing returns a boolean if a field has been set.
func (o *Subscription) HasTrialing() bool {
	if o != nil && !isNil(o.Trialing) {
		return true
	}

	return false
}

// SetTrialing gets a reference to the given bool and assigns it to the Trialing field.
func (o *Subscription) SetTrialing(v bool) {
	o.Trialing = &v
}

// GetTrialEndsAt returns the TrialEndsAt field value if set, zero value otherwise.
func (o *Subscription) GetTrialEndsAt() time.Time {
	if o == nil || isNil(o.TrialEndsAt) {
		var ret time.Time
		return ret
	}
	return *o.TrialEndsAt
}

// GetTrialEndsAtOk returns a tuple with the TrialEndsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetTrialEndsAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.TrialEndsAt) {
    return nil, false
	}
	return o.TrialEndsAt, true
}

// HasTrialEndsAt returns a boolean if a field has been set.
func (o *Subscription) HasTrialEndsAt() bool {
	if o != nil && !isNil(o.TrialEndsAt) {
		return true
	}

	return false
}

// SetTrialEndsAt gets a reference to the given time.Time and assigns it to the TrialEndsAt field.
func (o *Subscription) SetTrialEndsAt(v time.Time) {
	o.TrialEndsAt = &v
}

// GetTrialMaxSpend returns the TrialMaxSpend field value if set, zero value otherwise.
func (o *Subscription) GetTrialMaxSpend() string {
	if o == nil || isNil(o.TrialMaxSpend) {
		var ret string
		return ret
	}
	return *o.TrialMaxSpend
}

// GetTrialMaxSpendOk returns a tuple with the TrialMaxSpend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetTrialMaxSpendOk() (*string, bool) {
	if o == nil || isNil(o.TrialMaxSpend) {
    return nil, false
	}
	return o.TrialMaxSpend, true
}

// HasTrialMaxSpend returns a boolean if a field has been set.
func (o *Subscription) HasTrialMaxSpend() bool {
	if o != nil && !isNil(o.TrialMaxSpend) {
		return true
	}

	return false
}

// SetTrialMaxSpend gets a reference to the given string and assigns it to the TrialMaxSpend field.
func (o *Subscription) SetTrialMaxSpend(v string) {
	o.TrialMaxSpend = &v
}

// GetCurrentSpend returns the CurrentSpend field value if set, zero value otherwise.
func (o *Subscription) GetCurrentSpend() string {
	if o == nil || isNil(o.CurrentSpend) {
		var ret string
		return ret
	}
	return *o.CurrentSpend
}

// GetCurrentSpendOk returns a tuple with the CurrentSpend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetCurrentSpendOk() (*string, bool) {
	if o == nil || isNil(o.CurrentSpend) {
    return nil, false
	}
	return o.CurrentSpend, true
}

// HasCurrentSpend returns a boolean if a field has been set.
func (o *Subscription) HasCurrentSpend() bool {
	if o != nil && !isNil(o.CurrentSpend) {
		return true
	}

	return false
}

// SetCurrentSpend gets a reference to the given string and assigns it to the CurrentSpend field.
func (o *Subscription) SetCurrentSpend(v string) {
	o.CurrentSpend = &v
}

func (o Subscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !isNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !isNil(o.StripeSubscriptionId) {
		toSerialize["stripe_subscription_id"] = o.StripeSubscriptionId
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	if !isNil(o.HasPendingUpdate) {
		toSerialize["has_pending_update"] = o.HasPendingUpdate
	}
	if !isNil(o.StripePendingInvoiceId) {
		toSerialize["stripe_pending_invoice_id"] = o.StripePendingInvoiceId
	}
	if !isNil(o.TerminateAt) {
		toSerialize["terminate_at"] = o.TerminateAt
	}
	if !isNil(o.CanceledAt) {
		toSerialize["canceled_at"] = o.CanceledAt
	}
	if !isNil(o.TerminatedAt) {
		toSerialize["terminated_at"] = o.TerminatedAt
	}
	if !isNil(o.CurrentPeriodStart) {
		toSerialize["current_period_start"] = o.CurrentPeriodStart
	}
	if !isNil(o.CurrentPeriodEnd) {
		toSerialize["current_period_end"] = o.CurrentPeriodEnd
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !isNil(o.AmountPayable) {
		toSerialize["amount_payable"] = o.AmountPayable
	}
	if !isNil(o.AmountPaid) {
		toSerialize["amount_paid"] = o.AmountPaid
	}
	if !isNil(o.AmountRemaining) {
		toSerialize["amount_remaining"] = o.AmountRemaining
	}
	if !isNil(o.PaymentFailure) {
		toSerialize["payment_failure"] = o.PaymentFailure
	}
	if !isNil(o.Trialing) {
		toSerialize["trialing"] = o.Trialing
	}
	if !isNil(o.TrialEndsAt) {
		toSerialize["trial_ends_at"] = o.TrialEndsAt
	}
	if !isNil(o.TrialMaxSpend) {
		toSerialize["trial_max_spend"] = o.TrialMaxSpend
	}
	if !isNil(o.CurrentSpend) {
		toSerialize["current_spend"] = o.CurrentSpend
	}
	return json.Marshal(toSerialize)
}

type NullableSubscription struct {
	value *Subscription
	isSet bool
}

func (v NullableSubscription) Get() *Subscription {
	return v.value
}

func (v *NullableSubscription) Set(val *Subscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscription(val *Subscription) *NullableSubscription {
	return &NullableSubscription{value: val, isSet: true}
}

func (v NullableSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


