/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// GitDeploymentMetadata struct for GitDeploymentMetadata
type GitDeploymentMetadata struct {
	LastProvisionedDeploymentId *string `json:"last_provisioned_deployment_id,omitempty"`
	GitEnv *GitEnvDeploymentMetadata `json:"git_env,omitempty"`
}

// NewGitDeploymentMetadata instantiates a new GitDeploymentMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitDeploymentMetadata() *GitDeploymentMetadata {
	this := GitDeploymentMetadata{}
	return &this
}

// NewGitDeploymentMetadataWithDefaults instantiates a new GitDeploymentMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitDeploymentMetadataWithDefaults() *GitDeploymentMetadata {
	this := GitDeploymentMetadata{}
	return &this
}

// GetLastProvisionedDeploymentId returns the LastProvisionedDeploymentId field value if set, zero value otherwise.
func (o *GitDeploymentMetadata) GetLastProvisionedDeploymentId() string {
	if o == nil || isNil(o.LastProvisionedDeploymentId) {
		var ret string
		return ret
	}
	return *o.LastProvisionedDeploymentId
}

// GetLastProvisionedDeploymentIdOk returns a tuple with the LastProvisionedDeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitDeploymentMetadata) GetLastProvisionedDeploymentIdOk() (*string, bool) {
	if o == nil || isNil(o.LastProvisionedDeploymentId) {
    return nil, false
	}
	return o.LastProvisionedDeploymentId, true
}

// HasLastProvisionedDeploymentId returns a boolean if a field has been set.
func (o *GitDeploymentMetadata) HasLastProvisionedDeploymentId() bool {
	if o != nil && !isNil(o.LastProvisionedDeploymentId) {
		return true
	}

	return false
}

// SetLastProvisionedDeploymentId gets a reference to the given string and assigns it to the LastProvisionedDeploymentId field.
func (o *GitDeploymentMetadata) SetLastProvisionedDeploymentId(v string) {
	o.LastProvisionedDeploymentId = &v
}

// GetGitEnv returns the GitEnv field value if set, zero value otherwise.
func (o *GitDeploymentMetadata) GetGitEnv() GitEnvDeploymentMetadata {
	if o == nil || isNil(o.GitEnv) {
		var ret GitEnvDeploymentMetadata
		return ret
	}
	return *o.GitEnv
}

// GetGitEnvOk returns a tuple with the GitEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitDeploymentMetadata) GetGitEnvOk() (*GitEnvDeploymentMetadata, bool) {
	if o == nil || isNil(o.GitEnv) {
    return nil, false
	}
	return o.GitEnv, true
}

// HasGitEnv returns a boolean if a field has been set.
func (o *GitDeploymentMetadata) HasGitEnv() bool {
	if o != nil && !isNil(o.GitEnv) {
		return true
	}

	return false
}

// SetGitEnv gets a reference to the given GitEnvDeploymentMetadata and assigns it to the GitEnv field.
func (o *GitDeploymentMetadata) SetGitEnv(v GitEnvDeploymentMetadata) {
	o.GitEnv = &v
}

func (o GitDeploymentMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.LastProvisionedDeploymentId) {
		toSerialize["last_provisioned_deployment_id"] = o.LastProvisionedDeploymentId
	}
	if !isNil(o.GitEnv) {
		toSerialize["git_env"] = o.GitEnv
	}
	return json.Marshal(toSerialize)
}

type NullableGitDeploymentMetadata struct {
	value *GitDeploymentMetadata
	isSet bool
}

func (v NullableGitDeploymentMetadata) Get() *GitDeploymentMetadata {
	return v.value
}

func (v *NullableGitDeploymentMetadata) Set(val *GitDeploymentMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableGitDeploymentMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableGitDeploymentMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitDeploymentMetadata(val *GitDeploymentMetadata) *NullableGitDeploymentMetadata {
	return &NullableGitDeploymentMetadata{value: val, isSet: true}
}

func (v NullableGitDeploymentMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitDeploymentMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


