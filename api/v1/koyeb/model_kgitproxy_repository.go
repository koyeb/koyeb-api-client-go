/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"time"
)

// checks if the KgitproxyRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KgitproxyRepository{}

// KgitproxyRepository struct for KgitproxyRepository
type KgitproxyRepository struct {
	Id *string `json:"id,omitempty"`
	OrganizationId *string `json:"organization_id,omitempty"`
	Name *string `json:"name,omitempty"`
	Url *string `json:"url,omitempty"`
	Description *string `json:"description,omitempty"`
	IsPrivate *bool `json:"is_private,omitempty"`
	IsDisabled *bool `json:"is_disabled,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	Provider *KgitproxyRepositoryProvider `json:"provider,omitempty"`
	LastPushDate *time.Time `json:"last_push_date,omitempty"`
	Github *KgitproxyGitHubRepository `json:"github,omitempty"`
}

// NewKgitproxyRepository instantiates a new KgitproxyRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKgitproxyRepository() *KgitproxyRepository {
	this := KgitproxyRepository{}
	var provider KgitproxyRepositoryProvider = KGITPROXYREPOSITORYPROVIDER_INVALID_PROVIDER
	this.Provider = &provider
	return &this
}

// NewKgitproxyRepositoryWithDefaults instantiates a new KgitproxyRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKgitproxyRepositoryWithDefaults() *KgitproxyRepository {
	this := KgitproxyRepository{}
	var provider KgitproxyRepositoryProvider = KGITPROXYREPOSITORYPROVIDER_INVALID_PROVIDER
	this.Provider = &provider
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KgitproxyRepository) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyRepository) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KgitproxyRepository) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KgitproxyRepository) SetId(v string) {
	o.Id = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *KgitproxyRepository) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyRepository) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *KgitproxyRepository) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *KgitproxyRepository) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KgitproxyRepository) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyRepository) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KgitproxyRepository) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KgitproxyRepository) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *KgitproxyRepository) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyRepository) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *KgitproxyRepository) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *KgitproxyRepository) SetUrl(v string) {
	o.Url = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *KgitproxyRepository) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyRepository) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *KgitproxyRepository) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *KgitproxyRepository) SetDescription(v string) {
	o.Description = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *KgitproxyRepository) GetIsPrivate() bool {
	if o == nil || IsNil(o.IsPrivate) {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyRepository) GetIsPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrivate) {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *KgitproxyRepository) HasIsPrivate() bool {
	if o != nil && !IsNil(o.IsPrivate) {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *KgitproxyRepository) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *KgitproxyRepository) GetIsDisabled() bool {
	if o == nil || IsNil(o.IsDisabled) {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyRepository) GetIsDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisabled) {
		return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *KgitproxyRepository) HasIsDisabled() bool {
	if o != nil && !IsNil(o.IsDisabled) {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *KgitproxyRepository) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

// GetDefaultBranch returns the DefaultBranch field value if set, zero value otherwise.
func (o *KgitproxyRepository) GetDefaultBranch() string {
	if o == nil || IsNil(o.DefaultBranch) {
		var ret string
		return ret
	}
	return *o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyRepository) GetDefaultBranchOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBranch) {
		return nil, false
	}
	return o.DefaultBranch, true
}

// HasDefaultBranch returns a boolean if a field has been set.
func (o *KgitproxyRepository) HasDefaultBranch() bool {
	if o != nil && !IsNil(o.DefaultBranch) {
		return true
	}

	return false
}

// SetDefaultBranch gets a reference to the given string and assigns it to the DefaultBranch field.
func (o *KgitproxyRepository) SetDefaultBranch(v string) {
	o.DefaultBranch = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *KgitproxyRepository) GetProvider() KgitproxyRepositoryProvider {
	if o == nil || IsNil(o.Provider) {
		var ret KgitproxyRepositoryProvider
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyRepository) GetProviderOk() (*KgitproxyRepositoryProvider, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *KgitproxyRepository) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given KgitproxyRepositoryProvider and assigns it to the Provider field.
func (o *KgitproxyRepository) SetProvider(v KgitproxyRepositoryProvider) {
	o.Provider = &v
}

// GetLastPushDate returns the LastPushDate field value if set, zero value otherwise.
func (o *KgitproxyRepository) GetLastPushDate() time.Time {
	if o == nil || IsNil(o.LastPushDate) {
		var ret time.Time
		return ret
	}
	return *o.LastPushDate
}

// GetLastPushDateOk returns a tuple with the LastPushDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyRepository) GetLastPushDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPushDate) {
		return nil, false
	}
	return o.LastPushDate, true
}

// HasLastPushDate returns a boolean if a field has been set.
func (o *KgitproxyRepository) HasLastPushDate() bool {
	if o != nil && !IsNil(o.LastPushDate) {
		return true
	}

	return false
}

// SetLastPushDate gets a reference to the given time.Time and assigns it to the LastPushDate field.
func (o *KgitproxyRepository) SetLastPushDate(v time.Time) {
	o.LastPushDate = &v
}

// GetGithub returns the Github field value if set, zero value otherwise.
func (o *KgitproxyRepository) GetGithub() KgitproxyGitHubRepository {
	if o == nil || IsNil(o.Github) {
		var ret KgitproxyGitHubRepository
		return ret
	}
	return *o.Github
}

// GetGithubOk returns a tuple with the Github field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyRepository) GetGithubOk() (*KgitproxyGitHubRepository, bool) {
	if o == nil || IsNil(o.Github) {
		return nil, false
	}
	return o.Github, true
}

// HasGithub returns a boolean if a field has been set.
func (o *KgitproxyRepository) HasGithub() bool {
	if o != nil && !IsNil(o.Github) {
		return true
	}

	return false
}

// SetGithub gets a reference to the given KgitproxyGitHubRepository and assigns it to the Github field.
func (o *KgitproxyRepository) SetGithub(v KgitproxyGitHubRepository) {
	o.Github = &v
}

func (o KgitproxyRepository) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KgitproxyRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsPrivate) {
		toSerialize["is_private"] = o.IsPrivate
	}
	if !IsNil(o.IsDisabled) {
		toSerialize["is_disabled"] = o.IsDisabled
	}
	if !IsNil(o.DefaultBranch) {
		toSerialize["default_branch"] = o.DefaultBranch
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.LastPushDate) {
		toSerialize["last_push_date"] = o.LastPushDate
	}
	if !IsNil(o.Github) {
		toSerialize["github"] = o.Github
	}
	return toSerialize, nil
}

type NullableKgitproxyRepository struct {
	value *KgitproxyRepository
	isSet bool
}

func (v NullableKgitproxyRepository) Get() *KgitproxyRepository {
	return v.value
}

func (v *NullableKgitproxyRepository) Set(val *KgitproxyRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableKgitproxyRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableKgitproxyRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKgitproxyRepository(val *KgitproxyRepository) *NullableKgitproxyRepository {
	return &NullableKgitproxyRepository{value: val, isSet: true}
}

func (v NullableKgitproxyRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKgitproxyRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


