/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// ComposeReply struct for ComposeReply
type ComposeReply struct {
	App *App `json:"app,omitempty"`
	Services []Service `json:"services,omitempty"`
}

// NewComposeReply instantiates a new ComposeReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComposeReply() *ComposeReply {
	this := ComposeReply{}
	return &this
}

// NewComposeReplyWithDefaults instantiates a new ComposeReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComposeReplyWithDefaults() *ComposeReply {
	this := ComposeReply{}
	return &this
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *ComposeReply) GetApp() App {
	if o == nil || isNil(o.App) {
		var ret App
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComposeReply) GetAppOk() (*App, bool) {
	if o == nil || isNil(o.App) {
    return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *ComposeReply) HasApp() bool {
	if o != nil && !isNil(o.App) {
		return true
	}

	return false
}

// SetApp gets a reference to the given App and assigns it to the App field.
func (o *ComposeReply) SetApp(v App) {
	o.App = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *ComposeReply) GetServices() []Service {
	if o == nil || isNil(o.Services) {
		var ret []Service
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComposeReply) GetServicesOk() ([]Service, bool) {
	if o == nil || isNil(o.Services) {
    return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *ComposeReply) HasServices() bool {
	if o != nil && !isNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []Service and assigns it to the Services field.
func (o *ComposeReply) SetServices(v []Service) {
	o.Services = v
}

func (o ComposeReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.App) {
		toSerialize["app"] = o.App
	}
	if !isNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	return json.Marshal(toSerialize)
}

type NullableComposeReply struct {
	value *ComposeReply
	isSet bool
}

func (v NullableComposeReply) Get() *ComposeReply {
	return v.value
}

func (v *NullableComposeReply) Set(val *ComposeReply) {
	v.value = val
	v.isSet = true
}

func (v NullableComposeReply) IsSet() bool {
	return v.isSet
}

func (v *NullableComposeReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComposeReply(val *ComposeReply) *NullableComposeReply {
	return &NullableComposeReply{value: val, isSet: true}
}

func (v NullableComposeReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComposeReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


