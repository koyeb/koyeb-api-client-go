/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the GetOrganizationUsageReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetOrganizationUsageReply{}

// GetOrganizationUsageReply struct for GetOrganizationUsageReply
type GetOrganizationUsageReply struct {
	Usage *Usage `json:"usage,omitempty"`
}

// NewGetOrganizationUsageReply instantiates a new GetOrganizationUsageReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetOrganizationUsageReply() *GetOrganizationUsageReply {
	this := GetOrganizationUsageReply{}
	return &this
}

// NewGetOrganizationUsageReplyWithDefaults instantiates a new GetOrganizationUsageReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetOrganizationUsageReplyWithDefaults() *GetOrganizationUsageReply {
	this := GetOrganizationUsageReply{}
	return &this
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *GetOrganizationUsageReply) GetUsage() Usage {
	if o == nil || IsNil(o.Usage) {
		var ret Usage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationUsageReply) GetUsageOk() (*Usage, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *GetOrganizationUsageReply) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given Usage and assigns it to the Usage field.
func (o *GetOrganizationUsageReply) SetUsage(v Usage) {
	o.Usage = &v
}

func (o GetOrganizationUsageReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetOrganizationUsageReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableGetOrganizationUsageReply struct {
	value *GetOrganizationUsageReply
	isSet bool
}

func (v NullableGetOrganizationUsageReply) Get() *GetOrganizationUsageReply {
	return v.value
}

func (v *NullableGetOrganizationUsageReply) Set(val *GetOrganizationUsageReply) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOrganizationUsageReply) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOrganizationUsageReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOrganizationUsageReply(val *GetOrganizationUsageReply) *NullableGetOrganizationUsageReply {
	return &NullableGetOrganizationUsageReply{value: val, isSet: true}
}

func (v NullableGetOrganizationUsageReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOrganizationUsageReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


