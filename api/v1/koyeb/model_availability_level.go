/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// AvailabilityLevel the model 'AvailabilityLevel'
type AvailabilityLevel string

// List of AvailabilityLevel
const (
	AVAILABILITYLEVEL_UNKNOWN AvailabilityLevel = "UNKNOWN"
	AVAILABILITYLEVEL_LOW AvailabilityLevel = "LOW"
	AVAILABILITYLEVEL_MEDIUM AvailabilityLevel = "MEDIUM"
	AVAILABILITYLEVEL_HIGH AvailabilityLevel = "HIGH"
)

// All allowed values of AvailabilityLevel enum
var AllowedAvailabilityLevelEnumValues = []AvailabilityLevel{
	"UNKNOWN",
	"LOW",
	"MEDIUM",
	"HIGH",
}

func (v *AvailabilityLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailabilityLevel(value)
	for _, existing := range AllowedAvailabilityLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailabilityLevel", value)
}

// NewAvailabilityLevelFromValue returns a pointer to a valid AvailabilityLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvailabilityLevelFromValue(v string) (*AvailabilityLevel, error) {
	ev := AvailabilityLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvailabilityLevel: valid values are %v", v, AllowedAvailabilityLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvailabilityLevel) IsValid() bool {
	for _, existing := range AllowedAvailabilityLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvailabilityLevel value
func (v AvailabilityLevel) Ptr() *AvailabilityLevel {
	return &v
}

type NullableAvailabilityLevel struct {
	value *AvailabilityLevel
	isSet bool
}

func (v NullableAvailabilityLevel) Get() *AvailabilityLevel {
	return v.value
}

func (v *NullableAvailabilityLevel) Set(val *AvailabilityLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityLevel(val *AvailabilityLevel) *NullableAvailabilityLevel {
	return &NullableAvailabilityLevel{value: val, isSet: true}
}

func (v NullableAvailabilityLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

