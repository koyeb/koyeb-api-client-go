/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// KgitproxyIndexingStatus the model 'KgitproxyIndexingStatus'
type KgitproxyIndexingStatus string

// List of kgitproxy.IndexingStatus
const (
	KGITPROXYINDEXINGSTATUS_INVALID_INDEXING_STATUS KgitproxyIndexingStatus = "INVALID_INDEXING_STATUS"
	KGITPROXYINDEXINGSTATUS_NOT_STARTED KgitproxyIndexingStatus = "NOT_STARTED"
	KGITPROXYINDEXINGSTATUS_IN_PROGRESS KgitproxyIndexingStatus = "IN_PROGRESS"
	KGITPROXYINDEXINGSTATUS_COMPLETED KgitproxyIndexingStatus = "COMPLETED"
)

var allowedKgitproxyIndexingStatusEnumValues = []KgitproxyIndexingStatus{
	"INVALID_INDEXING_STATUS",
	"NOT_STARTED",
	"IN_PROGRESS",
	"COMPLETED",
}

func (v *KgitproxyIndexingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KgitproxyIndexingStatus(value)
	for _, existing := range allowedKgitproxyIndexingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KgitproxyIndexingStatus", value)
}

// NewKgitproxyIndexingStatusFromValue returns a pointer to a valid KgitproxyIndexingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKgitproxyIndexingStatusFromValue(v string) (*KgitproxyIndexingStatus, error) {
	ev := KgitproxyIndexingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KgitproxyIndexingStatus: valid values are %v", v, allowedKgitproxyIndexingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KgitproxyIndexingStatus) IsValid() bool {
	for _, existing := range allowedKgitproxyIndexingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to kgitproxy.IndexingStatus value
func (v KgitproxyIndexingStatus) Ptr() *KgitproxyIndexingStatus {
	return &v
}

type NullableKgitproxyIndexingStatus struct {
	value *KgitproxyIndexingStatus
	isSet bool
}

func (v NullableKgitproxyIndexingStatus) Get() *KgitproxyIndexingStatus {
	return v.value
}

func (v *NullableKgitproxyIndexingStatus) Set(val *KgitproxyIndexingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableKgitproxyIndexingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableKgitproxyIndexingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKgitproxyIndexingStatus(val *KgitproxyIndexingStatus) *NullableKgitproxyIndexingStatus {
	return &NullableKgitproxyIndexingStatus{value: val, isSet: true}
}

func (v NullableKgitproxyIndexingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKgitproxyIndexingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

