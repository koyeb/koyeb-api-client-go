/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"time"
)

// checks if the PeriodUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeriodUsage{}

// PeriodUsage struct for PeriodUsage
type PeriodUsage struct {
	StartingTime *time.Time `json:"starting_time,omitempty"`
	EndingTime *time.Time `json:"ending_time,omitempty"`
	Apps []AppUsage `json:"apps,omitempty"`
}

// NewPeriodUsage instantiates a new PeriodUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeriodUsage() *PeriodUsage {
	this := PeriodUsage{}
	return &this
}

// NewPeriodUsageWithDefaults instantiates a new PeriodUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeriodUsageWithDefaults() *PeriodUsage {
	this := PeriodUsage{}
	return &this
}

// GetStartingTime returns the StartingTime field value if set, zero value otherwise.
func (o *PeriodUsage) GetStartingTime() time.Time {
	if o == nil || IsNil(o.StartingTime) {
		var ret time.Time
		return ret
	}
	return *o.StartingTime
}

// GetStartingTimeOk returns a tuple with the StartingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodUsage) GetStartingTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartingTime) {
		return nil, false
	}
	return o.StartingTime, true
}

// HasStartingTime returns a boolean if a field has been set.
func (o *PeriodUsage) HasStartingTime() bool {
	if o != nil && !IsNil(o.StartingTime) {
		return true
	}

	return false
}

// SetStartingTime gets a reference to the given time.Time and assigns it to the StartingTime field.
func (o *PeriodUsage) SetStartingTime(v time.Time) {
	o.StartingTime = &v
}

// GetEndingTime returns the EndingTime field value if set, zero value otherwise.
func (o *PeriodUsage) GetEndingTime() time.Time {
	if o == nil || IsNil(o.EndingTime) {
		var ret time.Time
		return ret
	}
	return *o.EndingTime
}

// GetEndingTimeOk returns a tuple with the EndingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodUsage) GetEndingTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndingTime) {
		return nil, false
	}
	return o.EndingTime, true
}

// HasEndingTime returns a boolean if a field has been set.
func (o *PeriodUsage) HasEndingTime() bool {
	if o != nil && !IsNil(o.EndingTime) {
		return true
	}

	return false
}

// SetEndingTime gets a reference to the given time.Time and assigns it to the EndingTime field.
func (o *PeriodUsage) SetEndingTime(v time.Time) {
	o.EndingTime = &v
}

// GetApps returns the Apps field value if set, zero value otherwise.
func (o *PeriodUsage) GetApps() []AppUsage {
	if o == nil || IsNil(o.Apps) {
		var ret []AppUsage
		return ret
	}
	return o.Apps
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodUsage) GetAppsOk() ([]AppUsage, bool) {
	if o == nil || IsNil(o.Apps) {
		return nil, false
	}
	return o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *PeriodUsage) HasApps() bool {
	if o != nil && !IsNil(o.Apps) {
		return true
	}

	return false
}

// SetApps gets a reference to the given []AppUsage and assigns it to the Apps field.
func (o *PeriodUsage) SetApps(v []AppUsage) {
	o.Apps = v
}

func (o PeriodUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeriodUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartingTime) {
		toSerialize["starting_time"] = o.StartingTime
	}
	if !IsNil(o.EndingTime) {
		toSerialize["ending_time"] = o.EndingTime
	}
	if !IsNil(o.Apps) {
		toSerialize["apps"] = o.Apps
	}
	return toSerialize, nil
}

type NullablePeriodUsage struct {
	value *PeriodUsage
	isSet bool
}

func (v NullablePeriodUsage) Get() *PeriodUsage {
	return v.value
}

func (v *NullablePeriodUsage) Set(val *PeriodUsage) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriodUsage) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriodUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriodUsage(val *PeriodUsage) *NullablePeriodUsage {
	return &NullablePeriodUsage{value: val, isSet: true}
}

func (v NullablePeriodUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriodUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


