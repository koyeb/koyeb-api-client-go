/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// InstanceAvailability struct for InstanceAvailability
type InstanceAvailability struct {
	Regions *map[string]RegionAvailability `json:"regions,omitempty"`
	Availability *AvailabilityLevel `json:"availability,omitempty"`
}

// NewInstanceAvailability instantiates a new InstanceAvailability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceAvailability() *InstanceAvailability {
	this := InstanceAvailability{}
	var availability AvailabilityLevel = AVAILABILITYLEVEL_UNKNOWN
	this.Availability = &availability
	return &this
}

// NewInstanceAvailabilityWithDefaults instantiates a new InstanceAvailability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceAvailabilityWithDefaults() *InstanceAvailability {
	this := InstanceAvailability{}
	var availability AvailabilityLevel = AVAILABILITYLEVEL_UNKNOWN
	this.Availability = &availability
	return &this
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *InstanceAvailability) GetRegions() map[string]RegionAvailability {
	if o == nil || isNil(o.Regions) {
		var ret map[string]RegionAvailability
		return ret
	}
	return *o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceAvailability) GetRegionsOk() (*map[string]RegionAvailability, bool) {
	if o == nil || isNil(o.Regions) {
    return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *InstanceAvailability) HasRegions() bool {
	if o != nil && !isNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given map[string]RegionAvailability and assigns it to the Regions field.
func (o *InstanceAvailability) SetRegions(v map[string]RegionAvailability) {
	o.Regions = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *InstanceAvailability) GetAvailability() AvailabilityLevel {
	if o == nil || isNil(o.Availability) {
		var ret AvailabilityLevel
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceAvailability) GetAvailabilityOk() (*AvailabilityLevel, bool) {
	if o == nil || isNil(o.Availability) {
    return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *InstanceAvailability) HasAvailability() bool {
	if o != nil && !isNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given AvailabilityLevel and assigns it to the Availability field.
func (o *InstanceAvailability) SetAvailability(v AvailabilityLevel) {
	o.Availability = &v
}

func (o InstanceAvailability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	if !isNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceAvailability struct {
	value *InstanceAvailability
	isSet bool
}

func (v NullableInstanceAvailability) Get() *InstanceAvailability {
	return v.value
}

func (v *NullableInstanceAvailability) Set(val *InstanceAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceAvailability(val *InstanceAvailability) *NullableInstanceAvailability {
	return &NullableInstanceAvailability{value: val, isSet: true}
}

func (v NullableInstanceAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


