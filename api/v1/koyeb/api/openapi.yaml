openapi: 3.0.1
info:
  description: |
    The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests.
  title: Koyeb Rest API
  version: 1.0.0
servers:
- url: https://app.koyeb.com/
security:
- Bearer: []
tags:
- description: |
    Welcome to the Koyeb API documentation.

    The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests.
    The API has predictable resource-oriented URLs, allowing you to request, retrieve and execute actions on resources efficiently.

    The API returns JSON-encoded responses and uses standard HTTP response codes, and verbs.

    All of the functionality available in the Koyeb Control Panel is also available via the API, allowing you to automate repetitive and complex actions as required.

    All production API requests are made to:

    - https://app.koyeb.com/<version>

    All data is sent and received as JSON.

    ## Constructing Requests

    Requests are made of three components:

    - Base URL: `https://app.koyeb.com`
    - API Version: `v1`
    - Resource path: `apps`

    To construct a proper request, you need to format the URL as follows:

    `https://app.koyeb.com/{version}/{resource}`

    Example: `https://app.koyeb.com/v1/apps`

    The following code is an example request to retrieve the list of Apps.

    ```
    %curl -H 'Authorization: Bearer 1111-1111-1111-1111-1111' https://app.koyeb.com/v1/apps
    {
      "apps": [
        {
          "id": "e267e09d-a2ef-4672-95c7-bf88d787a274",
          "name": "demo",
          "organization_id": "c402bcad-d06d-4fd6-8af2-08b790c0e249",
          "updated_at": "2021-04-26T08:28:59.221274Z",
          "created_at": "2021-04-26T08:28:59.221274Z",
          "domains": [
            {
              "name": "demo-koyeb.koyeb.app",
              "deployment_group": "prod"
            }
          ]
        },
        {
          "id": "e38caea5-5acb-4fec-aa65-81749546b470",
          "name": "www",
          "organization_id": "c402bcad-d06d-4fd6-8af2-08b790c0e249",
          "updated_at": "2021-05-04T08:56:40.557792Z",
          "created_at": "2021-05-04T08:56:40.557792Z",
          "domains": [
            {
              "name": "www-koyeb.koyeb.app",
              "deployment_group": "prod"
            }
          ]
        }
      ],
      "limit": 20,
      "offset": 0,
      "count": 2
    }
    ```

    # Authentication

    The Koyeb API uses API keys to authenticate requests. You can view and manage your API keys in the Koyeb Control Panel.

    Your API keys carry many privileges. Take care to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, Slack, client-side code, and so forth.

    To make an authenticated request, include a bearer-type Authorization header containing your API key.

    All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.

    # Errors

    We use conventional HTTP response codes to indicate the success or failure of an API request.

    In general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that resulted from the provided information (e.g., a required parameter is missing, resource not found), and codes in the 5xx range indicate an error with our servers.

    ## HTTP Status Code Summary

    - `200 OK` - Everything worked as expected.
    - `400 Bad Request` - Often missing a required parameter.
    - `401 Unauthorized` - No valid API key provided.
    - `402 Request Failed` - Parameters were valid, but the request failed.
    - `403 Forbidden` - Insufficient privileges to access the requested resource.
    - `404 Not Found` - The requested item doesn't exist.
    - `50x` Server errors - Something went wrong on the API domain's end.

    Input and output data must be valid JSON with the appropriate Content-Type header set.

    ## Attributes

    - code:

      - `invalid_argument`: Occur when your request has invalid parameters.
      - `unknown_resource`: Occur when the resource doesn't exist.
      - `authentication_error`: Arise when there is a problem with authentication.
      - `rate_limit_error`: Too many requests hit the API too quickly.
      - `authorization_required`: You don't have sufficient right to access the resource.
      - `api_error`: API errors use in case of a problem with api domain's servers (extremely uncommon).

    - message:

      - A human-readable error giving more details about the error

    - status:

      - The HTTP code returned by the server.

    - fields (Optional):

      - An array of parameters with a human-readable message giving more details about the error.

    ## Errors responses example

    Response 400 (application/json)

    ```
    {
      "status": 400,
      "code": "invalid_argument",
      "message": "Invalid argument",
      "fields": [
        {
          "field": "definition.docker.image",
          "description": "cannot be blank"
        }
      ]
    }
    ```

    Response 401 (application/json)

    ```
    {
      "status": 401,
      "code": "authentication_error",
      "message": "Request unauthenticated with bearer"
    }
    ```

    Response 403 (application/json)

    ```
    {
      "status": 403,
      "code": "authentication_required",
      "message": "You don't have the requested permission to access to resource."
    }
    ```


    Response 404 (application/json)

    ```
    {
      "status": 404,
      "code": "unknown_resource",
      "message": "App not found"
    }
    ```

    # Pagination

    All top-level API resources receive a paginated response. For instance, list Apps, list Services, and others share a standard structure, taking two parameters: limit and offset.

    **Paginated request**

    Requests against paginated endpoints accept two query string arguments:

    * *limit*, a positive integer lower or equal to 100 to select the number of items to display.
    * *offset*, an integer to indicate the position to start at.

    Paginated endpoints usually also accept filters to search and sort results.
    These filters are documented along with each endpoint documentation.
  name: intro
  x-displayName: Introduction
  x-traitTag: true
paths:
  /v1/streams/metrics:
    get:
      operationId: GetMetrics
      parameters:
      - description: ID of the service to query instances metrics for. Ignored if
          instance_id is set.
        in: query
        name: service_id
        schema:
          type: string
      - description: ID of the instance to query metrics for.
        in: query
        name: instance_id
        schema:
          type: string
      - description: Metric to query.
        in: query
        name: name
        schema:
          default: UNKNOWN
          enum:
          - UNKNOWN
          - CPU_TOTAL_PERCENT
          - MEM_RSS
          - HTTP_THROUGHPUT
          - HTTP_RESPONSE_TIME_50P
          - HTTP_RESPONSE_TIME_90P
          - HTTP_RESPONSE_TIME_99P
          - HTTP_RESPONSE_TIME_MAX
          - PUBLIC_DATA_TRANSFER_IN
          - PUBLIC_DATA_TRANSFER_OUT
          type: string
      - description: (Optional) Defaults to an hour prior to end.
        in: query
        name: start
        schema:
          format: date-time
          type: string
      - description: (Optional) Defaults to now.
        in: query
        name: end
        schema:
          format: date-time
          type: string
      - description: (Optional) Must be a valid duration in hours (h) or minutes (m).
          Defaulst to 5m.
        in: query
        name: step
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetMetricsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Metrics
  /v1/streams/logs/query:
    get:
      operationId: QueryLogs
      parameters:
      - in: query
        name: type
        schema:
          type: string
      - in: query
        name: app_id
        schema:
          type: string
      - in: query
        name: service_id
        schema:
          type: string
      - in: query
        name: deployment_id
        schema:
          type: string
      - in: query
        name: instance_id
        schema:
          type: string
      - in: query
        name: stream
        schema:
          type: string
      - in: query
        name: regional_deployment_id
        schema:
          type: string
      - description: (Optional) Must always be before `end`. Defaults to 15 minutes
          ago.
        in: query
        name: start
        schema:
          format: date-time
          type: string
      - description: (Optional) Must always be after `start`. Defaults to now.
        in: query
        name: end
        schema:
          format: date-time
          type: string
      - description: (Optional) `asc` or `desc`. Defaults to `desc`.
        in: query
        name: order
        schema:
          type: string
      - description: (Optional) Defaults to 100. Maximum of 1000.
        in: query
        name: limit
        schema:
          format: int64
          type: string
      - description: (Optional) Apply a regex to filter logs. Can't be used with `text`.
        in: query
        name: regex
        schema:
          type: string
      - description: (Optional) Looks for this string in logs. Can't be used with
          `regex`.
        in: query
        name: text
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueryLogsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Query logs
      tags:
      - Logs
  /v1/streams/logs/tail:
    get:
      operationId: TailLogs
      parameters:
      - in: query
        name: type
        schema:
          type: string
      - in: query
        name: app_id
        schema:
          type: string
      - in: query
        name: service_id
        schema:
          type: string
      - in: query
        name: deployment_id
        schema:
          type: string
      - in: query
        name: regional_deployment_id
        schema:
          type: string
      - in: query
        name: instance_id
        schema:
          type: string
      - in: query
        name: stream
        schema:
          type: string
      - in: query
        name: start
        schema:
          type: string
      - in: query
        name: limit
        schema:
          format: int64
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Stream_result_of_LogEntry'
          description: A successful response.(streaming responses)
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Tails logs
      tags:
      - Logs
  /v1/streams/instances/exec:
    get:
      description: "This endpoint opens a websocket. Once open, all frames going through\
        \ the websocket should be formatted in JSON. Input frames should match the\
        \ format specified below. Output frames will match the response schema."
      operationId: ExecCommand
      parameters:
      - description: ID of the resource to exec on.
        in: query
        name: id
        schema:
          type: string
      - description: Command to exec. Mandatory in the first frame sent
        explode: true
        in: query
        name: body.command
        schema:
          items:
            type: string
          type: array
        style: form
      - in: query
        name: body.tty_size.height
        schema:
          format: int32
          type: integer
      - in: query
        name: body.tty_size.width
        schema:
          format: int32
          type: integer
      - description: Data is base64 encoded
        in: query
        name: body.stdin.data
        schema:
          format: byte
          type: string
      - description: Indicate last data frame
        in: query
        name: body.stdin.close
        schema:
          type: boolean
      - description: Disable TTY. It's enough to specify it in the first frame
        in: query
        name: body.disableTty
        schema:
          type: boolean
      - description: "When specified, it is used to determine if the kind of resource\
          \ the id refers to. If missing, defaults to the instance id."
        in: query
        name: id_type
        schema:
          default: INVALID
          enum:
          - INVALID
          - INSTANCE_ID
          - SERVICE_ID
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Stream_result_of_ExecCommandReply'
          description: A successful response.(streaming responses)
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Exec Command
      tags:
      - Instances
  /v1/archives:
    post:
      operationId: CreateArchive
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateArchive'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateArchiveReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Create a signed URL to upload an archive.
      tags:
      - Archives
      x-codegen-request-body-name: archive
  /v1/regional_deployment_events:
    get:
      operationId: ListRegionalDeploymentEvents
      parameters:
      - description: (Optional) Filter on regional deployment id
        in: query
        name: regional_deployment_id
        schema:
          type: string
      - description: (Optional) Filter on regional deployment event types
        explode: true
        in: query
        name: types
        schema:
          items:
            type: string
          type: array
        style: form
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Sorts the list in the ascending or the descending
          order
        in: query
        name: order
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListRegionalDeploymentEventsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Regional Deployment events
      tags:
      - RegionalDeployments
  /v1/regional_deployments:
    get:
      operationId: ListRegionalDeployments
      parameters:
      - description: (Optional) Filter on deployment id
        in: query
        name: deployment_id
        schema:
          type: string
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListRegionalDeploymentsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: |-
        Experimental: List regional deployments
        Use at your own risk
      tags:
      - RegionalDeployments
  /v1/regional_deployments/{id}:
    get:
      operationId: GetRegionalDeployment
      parameters:
      - description: The id of the regional deployment
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetRegionalDeploymentReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: |-
        Experimental: Get regional deployment
        Use at your own risk
      tags:
      - RegionalDeployments
  /v1/quotas/capacity:
    post:
      operationId: ReviewOrganizationCapacity
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReviewOrganizationCapacityRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReviewOrganizationCapacityReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Review Organization Capacity
      tags:
      - Quotas
      x-codegen-request-body-name: body
  /v1/snapshots:
    get:
      operationId: ListSnapshots
      parameters:
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Filter by organization_id
        in: query
        name: organization_id
        schema:
          type: string
      - description: |-
          (Optional) Filter by status

           - SNAPSHOT_STATUS_INVALID: zero value, invalid
           - SNAPSHOT_STATUS_CREATING: the snapshot is being created
           - SNAPSHOT_STATUS_AVAILABLE: the snapshot is complete and available
           - SNAPSHOT_STATUS_MIGRATING: the snapshot is being migrated
           - SNAPSHOT_STATUS_DELETING: the snapshot is being deleted
           - SNAPSHOT_STATUS_DELETED: the snapshot is deleted
        explode: true
        in: query
        name: statuses
        schema:
          items:
            enum:
            - SNAPSHOT_STATUS_INVALID
            - SNAPSHOT_STATUS_CREATING
            - SNAPSHOT_STATUS_AVAILABLE
            - SNAPSHOT_STATUS_MIGRATING
            - SNAPSHOT_STATUS_DELETING
            - SNAPSHOT_STATUS_DELETED
            type: string
          type: array
        style: form
      - description: (Optional) A filter for the region
        in: query
        name: region
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListSnapshotsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List all Snapshots
      tags:
      - Snapshots
    post:
      operationId: CreateSnapshot
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateSnapshotRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateSnapshotReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Create a Snapshot
      tags:
      - Snapshots
      x-codegen-request-body-name: body
  /v1/snapshots/{id}:
    delete:
      operationId: DeleteSnapshot
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteSnapshotReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Delete a Snapshot
      tags:
      - Snapshots
    get:
      operationId: GetSnapshot
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetSnapshotReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get a Snapshot
      tags:
      - Snapshots
    post:
      operationId: UpdateSnapshot
      parameters:
      - description: The id of the snapshot
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateSnapshot_request'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateSnapshotReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update a Snapshot
      tags:
      - Snapshots
      x-codegen-request-body-name: body
  /v1/deployment_events:
    get:
      operationId: ListDeploymentEvents
      parameters:
      - description: (Optional) Filter on deployment id
        in: query
        name: deployment_id
        schema:
          type: string
      - description: (Optional) Filter on deployment event types
        explode: true
        in: query
        name: types
        schema:
          items:
            type: string
          type: array
        style: form
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Sorts the list in the ascending or the descending
          order
        in: query
        name: order
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListDeploymentEventsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Deployment events
      tags:
      - Deployments
  /v1/deployments:
    get:
      operationId: ListDeployments
      parameters:
      - description: (Optional) Filter on application id
        in: query
        name: app_id
        schema:
          type: string
      - description: (Optional) Filter on service id
        in: query
        name: service_id
        schema:
          type: string
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Filter on statuses
        explode: true
        in: query
        name: statuses
        schema:
          items:
            enum:
            - PENDING
            - PROVISIONING
            - SCHEDULED
            - CANCELING
            - CANCELED
            - ALLOCATING
            - STARTING
            - HEALTHY
            - DEGRADED
            - UNHEALTHY
            - STOPPING
            - STOPPED
            - ERRORING
            - ERROR
            - STASHED
            - SLEEPING
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListDeploymentsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Deployments
      tags:
      - Deployments
  /v1/deployments/{id}:
    get:
      operationId: GetDeployment
      parameters:
      - description: The id of the deployment
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetDeploymentReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get Deployment
      tags:
      - Deployments
  /v1/deployments/{id}/cancel:
    post:
      description: |-
        Deployment cancellation is allowed for the following status:
         - pending
         - provisioning
         - scheduled
      operationId: CancelDeployment
      parameters:
      - description: The id of the deployment to cancel.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CancelDeploymentReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Cancel Deployment
      tags:
      - Deployments
  /v1/secrets:
    get:
      operationId: ListSecrets
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: limit
        schema:
          type: string
      - in: query
        name: offset
        schema:
          type: string
      - description: Filter by secret types
        explode: true
        in: query
        name: types
        schema:
          items:
            enum:
            - SIMPLE
            - REGISTRY
            - MANAGED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListSecretsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
    post:
      operationId: CreateSecret
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateSecret'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateSecretReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
      x-codegen-request-body-name: secret
  /v1/secrets/{id}:
    delete:
      operationId: DeleteSecret
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteSecretReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
    get:
      operationId: GetSecret
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetSecretReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
    patch:
      operationId: UpdateSecret2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Secret'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateSecretReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
      x-codegen-request-body-name: secret
    put:
      operationId: UpdateSecret
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Secret'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateSecretReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
      x-codegen-request-body-name: secret
  /v1/secrets/{id}/reveal:
    post:
      operationId: RevealSecret
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RevealSecretReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Secrets
      x-codegen-request-body-name: body
  /v1/volume_events:
    get:
      operationId: ListPersistentVolumeEvents
      parameters:
      - description: (Optional) Filter on persistent volume id
        in: query
        name: persistent_volume_id
        schema:
          type: string
      - description: (Optional) Filter on persistent volume event types
        explode: true
        in: query
        name: types
        schema:
          items:
            type: string
          type: array
        style: form
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Sorts the list in the ascending or the descending
          order
        in: query
        name: order
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListPersistentVolumeEventsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Persistent Volume events
      tags:
      - PersistentVolumes
  /v1/volumes:
    get:
      operationId: ListPersistentVolumes
      parameters:
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) A filter for the service id
        in: query
        name: service_id
        schema:
          type: string
      - description: (Optional) A filter for the region
        in: query
        name: region
        schema:
          type: string
      - description: (Optional) A filter for the name
        in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListPersistentVolumesReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List all PersistentVolumes
      tags:
      - PersistentVolumes
    post:
      operationId: CreatePersistentVolume
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreatePersistentVolumeRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreatePersistentVolumeReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Create a PersistentVolume
      tags:
      - PersistentVolumes
      x-codegen-request-body-name: body
  /v1/volumes/{id}:
    delete:
      operationId: DeletePersistentVolume
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeletePersistentVolumeReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Delete a PersistentVolume
      tags:
      - PersistentVolumes
    get:
      operationId: GetPersistentVolume
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetPersistentVolumeReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get a PersistentVolume
      tags:
      - PersistentVolumes
    post:
      operationId: UpdatePersistentVolume
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdatePersistentVolume_request'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdatePersistentVolumeReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update a PersistentVolume
      tags:
      - PersistentVolumes
      x-codegen-request-body-name: body
  /v1/app_events:
    get:
      operationId: ListAppEvents
      parameters:
      - description: (Optional) Filter on app id
        in: query
        name: app_id
        schema:
          type: string
      - description: (Optional) Filter on app event types
        explode: true
        in: query
        name: types
        schema:
          items:
            type: string
          type: array
        style: form
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Sorts the list in the ascending or the descending
          order
        in: query
        name: order
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListAppEventsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List App events
      tags:
      - Apps
  /v1/apps:
    get:
      operationId: ListApps
      parameters:
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) A filter for name
        in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListAppsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List App
      tags:
      - Apps
    post:
      operationId: CreateApp
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateApp'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateAppReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Create App
      tags:
      - Apps
      x-codegen-request-body-name: app
  /v1/apps/{id}:
    delete:
      description: App deletion is allowed for all status.
      operationId: DeleteApp
      parameters:
      - description: The id of the App to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteAppReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Delete App
      tags:
      - Apps
    get:
      operationId: GetApp
      parameters:
      - description: The id of the App
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetAppReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get App
      tags:
      - Apps
    patch:
      operationId: UpdateApp2
      parameters:
      - description: The id of the app to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateApp'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateAppReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update App
      tags:
      - Apps
      x-codegen-request-body-name: app
    put:
      operationId: UpdateApp
      parameters:
      - description: The id of the app to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateApp'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateAppReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update App
      tags:
      - Apps
      x-codegen-request-body-name: app
  /v1/apps/{id}/pause:
    post:
      description: |-
        App pause action is allowed for the following status:
         - starting
         - healthy
         - degraded
         - unhealthy
         - resuming
      operationId: PauseApp
      parameters:
      - description: The id of the app to pause.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PauseAppReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Pause App
      tags:
      - Apps
  /v1/apps/{id}/resume:
    post:
      description: |-
        App resume action is allowed for the following status:
         - paused
      operationId: ResumeApp
      parameters:
      - description: The id of the app to resume.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResumeAppReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Resume App
      tags:
      - Apps
  /v1/provisioning/{deployment_id}/status/{stage}/{attempt}:
    patch:
      operationId: DeclareStageProgress
      parameters:
      - in: path
        name: deployment_id
        required: true
        schema:
          type: string
      - in: path
        name: stage
        required: true
        schema:
          type: string
      - in: path
        name: attempt
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DeclareStageProgress_request'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeclareStageProgressReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Declare stage progress
      tags:
      - Provisioning
      x-codegen-request-body-name: body
    post:
      operationId: CreateStageAttempt
      parameters:
      - in: path
        name: deployment_id
        required: true
        schema:
          type: string
      - in: path
        name: stage
        required: true
        schema:
          type: string
      - in: path
        name: attempt
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateStageAttempt_request'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateStageAttemptReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Create an attempt for a stage
      tags:
      - Provisioning
      x-codegen-request-body-name: body
  /v1/provisioning/{deployment_id}/status/{stage}/{attempt}/{step}:
    patch:
      operationId: DeclareStepProgress
      parameters:
      - in: path
        name: deployment_id
        required: true
        schema:
          type: string
      - in: path
        name: stage
        required: true
        schema:
          type: string
      - in: path
        name: attempt
        required: true
        schema:
          type: string
      - in: path
        name: step
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DeclareStepProgress_request'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeclareStepProgressReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Declare step progress
      tags:
      - Provisioning
      x-codegen-request-body-name: body
  /v1/instance_events:
    get:
      operationId: ListInstanceEvents
      parameters:
      - description: (Optional) Filter on list of instance id
        explode: true
        in: query
        name: instance_ids
        schema:
          items:
            type: string
          type: array
        style: form
      - description: (Optional) Filter on instance event types
        explode: true
        in: query
        name: types
        schema:
          items:
            type: string
          type: array
        style: form
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Sorts the list in the ascending or the descending
          order
        in: query
        name: order
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListInstanceEventsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Instance events
      tags:
      - Instances
  /v1/instances:
    get:
      operationId: ListInstances
      parameters:
      - description: (Optional) Filter on application id
        in: query
        name: app_id
        schema:
          type: string
      - description: (Optional) Filter on service id
        in: query
        name: service_id
        schema:
          type: string
      - description: (Optional) Filter on deployment id
        in: query
        name: deployment_id
        schema:
          type: string
      - description: (Optional) Filter on regional deployment id
        in: query
        name: regional_deployment_id
        schema:
          type: string
      - description: (Optional) Filter on allocation id
        in: query
        name: allocation_id
        schema:
          type: string
      - description: (Optional) Filter on replica index
        in: query
        name: replica_index
        schema:
          type: string
      - description: (Optional) Filter on instance statuses
        explode: true
        in: query
        name: statuses
        schema:
          items:
            enum:
            - ALLOCATING
            - STARTING
            - HEALTHY
            - UNHEALTHY
            - STOPPING
            - STOPPED
            - ERROR
            - SLEEPING
            type: string
          type: array
        style: form
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Sorts the list in the ascending or the descending
          order
        in: query
        name: order
        schema:
          type: string
      - description: (Optional) The starting time of the period of running instance
        in: query
        name: starting_time
        schema:
          format: date-time
          type: string
      - description: (Optional) The ending time of the period of running instance
        in: query
        name: ending_time
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListInstancesReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Instances
      tags:
      - Instances
  /v1/instances/{id}:
    get:
      operationId: GetInstance
      parameters:
      - description: The id of the instance
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetInstanceReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get Instance
      tags:
      - Instances
  /v1/docker-helper/verify:
    get:
      operationId: VerifyDockerImage
      parameters:
      - description: The full image uri to be verified
        in: query
        name: image
        schema:
          type: string
      - description: (Optional) the id of the secret to use to authenticate to the
          registry
        in: query
        name: secret_id
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VerifyDockerImageReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Verify if a docker image is reachable
      tags:
      - DockerHelper
  /v1/service_events:
    get:
      operationId: ListServiceEvents
      parameters:
      - description: (Optional) Filter on service id
        in: query
        name: service_id
        schema:
          type: string
      - description: (Optional) Filter on service event types
        explode: true
        in: query
        name: types
        schema:
          items:
            type: string
          type: array
        style: form
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Sorts the list in the ascending or the descending
          order
        in: query
        name: order
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListServiceEventsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Service events
      tags:
      - Services
  /v1/services:
    get:
      operationId: ListServices
      parameters:
      - description: (Optional) The id of the app
        in: query
        name: app_id
        schema:
          type: string
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) A filter for name
        in: query
        name: name
        schema:
          type: string
      - description: (Optional) Filter on service types
        explode: true
        in: query
        name: types
        schema:
          items:
            enum:
            - INVALID_TYPE
            - WEB
            - WORKER
            - DATABASE
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListServicesReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Services
      tags:
      - Services
    post:
      operationId: CreateService
      parameters:
      - description: If set only run validation
        in: query
        name: dry_run
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateService'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateServiceReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Create Service
      tags:
      - Services
      x-codegen-request-body-name: service
  /v1/services-autocomplete:
    post:
      operationId: Autocomplete
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AutocompleteRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AutocompleteReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Generate autocomplete definition for a service
      tags:
      - Services
      x-codegen-request-body-name: body
  /v1/services/{id}:
    delete:
      description: Service deletion is allowed for all status.
      operationId: DeleteService
      parameters:
      - description: The id of the entity to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteServiceReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Delete Service
      tags:
      - Services
    get:
      operationId: GetService
      parameters:
      - description: The id of the Service
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetServiceReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get Service
      tags:
      - Services
    patch:
      operationId: UpdateService2
      parameters:
      - description: The id of the entity to update
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "If set, run validation and check that the service exists"
        in: query
        name: dry_run
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateService'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateServiceReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update Service
      tags:
      - Services
      x-codegen-request-body-name: service
    put:
      operationId: UpdateService
      parameters:
      - description: The id of the entity to update
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "If set, run validation and check that the service exists"
        in: query
        name: dry_run
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateService'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateServiceReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update Service
      tags:
      - Services
      x-codegen-request-body-name: service
  /v1/services/{id}/pause:
    post:
      description: |-
        Service pause action is allowed for the following status:
         - starting
         - healthy
         - degraded
         - unhealthy
         - resuming
      operationId: PauseService
      parameters:
      - description: The id of the service to pause.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PauseServiceReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Pause Service
      tags:
      - Services
  /v1/services/{id}/redeploy:
    post:
      operationId: ReDeploy
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RedeployRequest.Info'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RedeployReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: ReDeploy Service
      tags:
      - Services
      x-codegen-request-body-name: info
  /v1/services/{id}/resume:
    post:
      description: |-
        Service resume action is allowed for the following status:
         - paused
      operationId: ResumeService
      parameters:
      - description: The id of the service to pause.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResumeServiceReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Resume Service
      tags:
      - Services
  /v1/usages:
    get:
      operationId: GetOrganizationUsage
      parameters:
      - description: The starting time of the period to get data from
        in: query
        name: starting_time
        schema:
          format: date-time
          type: string
      - description: The ending time of the period to get data from
        in: query
        name: ending_time
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetOrganizationUsageReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get organization usage
      tags:
      - Usages
  /v1/usages/details:
    get:
      operationId: GetOrganizationUsageDetails
      parameters:
      - description: The starting time of the period to get data from
        in: query
        name: starting_time
        schema:
          format: date-time
          type: string
      - description: The ending time of the period to get data from
        in: query
        name: ending_time
        schema:
          format: date-time
          type: string
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Sorts the list in the ascending or the descending
          order
        in: query
        name: order
        schema:
          type: string
      - description: "If defined with the value 'text/csv', a csv file is returned"
        in: header
        name: Accept
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetOrganizationUsageDetailsReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get organization usage details
      tags:
      - Usages
  /v1/domains:
    get:
      operationId: ListDomains
      parameters:
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: |-
          (Optional) A filter for types

           - AUTOASSIGNED: Domain like <appName>-<orgName>.koyeb.app
        explode: true
        in: query
        name: types
        schema:
          items:
            enum:
            - AUTOASSIGNED
            - CUSTOM
            type: string
          type: array
        style: form
      - description: (Optional) A filter for statuses
        explode: true
        in: query
        name: statuses
        schema:
          items:
            enum:
            - PENDING
            - ACTIVE
            - ERROR
            - DELETING
            - DELETED
            type: string
          type: array
        style: form
      - description: (Optional) A filter for apps
        explode: true
        in: query
        name: app_ids
        schema:
          items:
            type: string
          type: array
        style: form
      - description: (Optional) A filter for name
        in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListDomainsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Domains
    post:
      operationId: CreateDomain
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateDomain'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateDomainReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Domains
      x-codegen-request-body-name: domain
  /v1/domains/{id}:
    delete:
      operationId: DeleteDomain
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteDomainReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Domains
    get:
      operationId: GetDomain
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetDomainReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Domains
    patch:
      operationId: UpdateDomain
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      - description: "If set, run validation and check that the domain is available."
        in: query
        name: dry_run
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateDomain'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateDomainReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Domains
      x-codegen-request-body-name: domain
  /v1/domains/{id}/refresh:
    post:
      operationId: RefreshDomainStatus
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RefreshDomainStatusReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Domains
  /v1/activities:
    get:
      operationId: ListActivities
      parameters:
      - in: query
        name: limit
        schema:
          type: string
      - in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Filter on object type
        explode: true
        in: query
        name: types
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActivityList'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - activity
  /v1/notifications:
    get:
      operationId: ListNotifications
      parameters:
      - in: query
        name: limit
        schema:
          type: string
      - in: query
        name: offset
        schema:
          type: string
      - in: query
        name: mark_read
        schema:
          type: string
      - in: query
        name: mark_seen
        schema:
          type: string
      - in: query
        name: unread
        schema:
          type: string
      - in: query
        name: unseen
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationList'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - activity
  /v1/git/branches:
    get:
      operationId: ListBranches
      parameters:
      - description: (Optional) Filter on one repository.
        in: query
        name: repository_id
        schema:
          type: string
      - description: |-
          (Optional) Filter on branch name using a fuzzy search.
          Repository filter is required to enable this filter.
        in: query
        name: name
        schema:
          type: string
      - description: (Optional) The number of items to return.
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return.
        in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/kgitproxy.ListBranchesReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Repositories
  /v1/git/repositories:
    get:
      operationId: ListRepositories
      parameters:
      - description: (Optional) Filter on repository name using a fuzzy search.
        in: query
        name: name
        schema:
          type: string
      - description: "(Optional) Define search operation for repository name. Accept\
          \ either \"fuzzy\" or \"equality\", use \"fuzzy\" by default."
        in: query
        name: name_search_op
        schema:
          type: string
      - description: (Optional) The number of items to return.
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return.
        in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/kgitproxy.ListRepositoriesReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Repositories
  /v1/git/sync/organization/{organization_id}:
    post:
      operationId: ResyncOrganization
      parameters:
      - in: path
        name: organization_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/kgitproxy.ResyncOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - Repositories
  /v1/search:
    get:
      operationId: Search
      parameters:
      - description: (Optional) Search query
        in: query
        name: query
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ksearch.SearchReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Search
      tags:
      - Search
  /v1/catalog/regions:
    get:
      operationId: ListRegions
      parameters:
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) A filter for regions
        in: query
        name: id
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListRegionsReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Region
      tags:
      - CatalogRegions
  /v1/catalog/regions/{id}:
    get:
      operationId: GetRegion
      parameters:
      - description: The name of the region
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetRegionReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get Region
      tags:
      - CatalogRegions
  /v1/catalog/datacenters:
    get:
      operationId: ListDatacenters
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListDatacentersReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List datacenters
      tags:
      - CatalogDatacenters
  /v1/catalog/instances:
    get:
      operationId: ListCatalogInstances
      parameters:
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) A filter for instances
        in: query
        name: id
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListCatalogInstancesReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List Instance
      tags:
      - CatalogInstances
  /v1/catalog/instances/{id}:
    get:
      operationId: GetCatalogInstance
      parameters:
      - description: The name of the instance
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetCatalogInstanceReply'
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get Instance
      tags:
      - CatalogInstances
  /v1/organization_invitations:
    get:
      operationId: ListOrganizationInvitations
      parameters:
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Filter on organization invitation statuses
        explode: true
        in: query
        name: statuses
        schema:
          items:
            enum:
            - INVALID
            - PENDING
            - ACCEPTED
            - REFUSED
            - EXPIRED
            type: string
          type: array
        style: form
      - description: |-
          (Optional) Filter on invitee ID. Will match both invitations sent to
          that user_id and invitations sent to the email of that user_id.
          The only valid value is the requester's user_id
        in: query
        name: user_id
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListOrganizationInvitationsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - OrganizationInvitations
    post:
      operationId: CreateOrganizationInvitation
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateOrganizationInvitationRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateOrganizationInvitationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - OrganizationInvitations
      x-codegen-request-body-name: body
  /v1/organization_invitations/{id}:
    delete:
      operationId: DeleteOrganizationInvitation
      parameters:
      - description: The id of the organization invitation to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteOrganizationInvitationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - OrganizationInvitations
    get:
      operationId: GetOrganizationInvitation
      parameters:
      - description: The id of the invitation to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetOrganizationInvitationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - OrganizationInvitations
  /v1/organization_invitations/{id}/resend:
    post:
      operationId: ResendOrganizationInvitation
      parameters:
      - description: The id of the organization invitation to resend
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResendOrganizationInvitationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - OrganizationInvitations
      x-codegen-request-body-name: body
  /v1/organizations/{organization_id}/summary:
    get:
      operationId: GetOrganizationSummary
      parameters:
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetOrganizationSummaryReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get organization usage summary
      tags:
      - Summary
  /v1/account/login:
    post:
      operationId: Login
      parameters:
      - description: Seon Fingerprint
        in: header
        name: seon-fp
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Login user
      tags:
      - Sessions
      x-codegen-request-body-name: body
  /v1/account/logout:
    delete:
      operationId: Logout
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LogoutReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Logout user
      tags:
      - Sessions
  /v1/account/refresh:
    put:
      operationId: RefreshToken
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Refresh token
      tags:
      - Sessions
  /v1/account/session:
    post:
      description: |-
        Creates a new session without an organization for current user.
        NOTE: If you want a session linked to another organization, please use "Switch organization".
      operationId: NewSession
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: New session
      tags:
      - Sessions
  /v1/organizations/{organization_id}/quotas:
    get:
      operationId: GetQuotas
      parameters:
      - in: path
        name: organization_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetQuotasReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - OrganizationQuotas
  /v1/intercom/profile:
    get:
      operationId: GetIntercomProfile
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetIntercomProfileReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get intercom profile
      tags:
      - Intercom
  /v1/credentials:
    get:
      operationId: ListCredentials
      parameters:
      - description: (Optional) A filter for type
        in: query
        name: type
        schema:
          default: INVALID
          enum:
          - INVALID
          - USER
          - ORGANIZATION
          type: string
      - description: (Optional) A filter for name
        in: query
        name: name
        schema:
          type: string
      - description: (Optional) Filter for an organization
        in: query
        name: organization_id
        schema:
          type: string
      - description: (Optional) Filter for an user
        in: query
        name: user_id
        schema:
          type: string
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListCredentialsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List credentials
      tags:
      - Credentials
    post:
      operationId: CreateCredential
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateCredential'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateCredentialReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Create credential
      tags:
      - Credentials
      x-codegen-request-body-name: credential
  /v1/credentials/{id}:
    delete:
      operationId: DeleteCredential
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteCredentialReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Delete credential
      tags:
      - Credentials
    get:
      operationId: GetCredential
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetCredentialReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get credential
      tags:
      - Credentials
    patch:
      operationId: UpdateCredential2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Credential'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateCredentialReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update credential
      tags:
      - Credentials
      x-codegen-request-body-name: credential
    put:
      operationId: UpdateCredential
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Credential'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateCredentialReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update credential
      tags:
      - Credentials
      x-codegen-request-body-name: credential
  /v1/organization_members:
    get:
      operationId: ListOrganizationMembers
      parameters:
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Filter for an organization
        in: query
        name: organization_id
        schema:
          type: string
      - description: (Optional) Filter for an user
        in: query
        name: user_id
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListOrganizationMembersReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List organization members
      tags:
      - OrganizationMembers
  /v1/organization_members/{id}:
    delete:
      operationId: RemoveOrganizationMember
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RemoveOrganizationMemberReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Remove an organization member
      tags:
      - OrganizationMembers
  /v1/subscriptions/{id}:
    get:
      operationId: GetSubscription
      parameters:
      - description: The id of the instance
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetSubscriptionReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get Subscription
      tags:
      - Subscriptions
  /v1/payment_methods:
    get:
      operationId: ListPaymentMethods
      parameters:
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Filter on payment method statuses
        explode: true
        in: query
        name: statuses
        schema:
          items:
            enum:
            - INVALID
            - CREATED
            - AUTHORIZED
            - DECLINED
            - CANCELED
            - EXPIRED
            - UNCHECKED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListPaymentMethodsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: List payment methods
      tags:
      - PaymentMethods
    post:
      operationId: CreatePaymentAuthorization
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreatePaymentAuthorizationRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreatePaymentAuthorizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Create payment authorization
      tags:
      - PaymentMethods
      x-codegen-request-body-name: body
  /v1/payment_methods/{id}:
    delete:
      operationId: DeletePaymentMethod
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeletePaymentMethodReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Delete payment method
      tags:
      - PaymentMethods
    get:
      operationId: GetPaymentMethod
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetPaymentMethodReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get payment method
      tags:
      - PaymentMethods
  /v1/payment_methods/{id}/confirm:
    post:
      operationId: ConfirmPaymentAuthorization
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConfirmPaymentAuthorizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Confirm payment authorization
      tags:
      - PaymentMethods
      x-codegen-request-body-name: body
  /v1/users/{id}:
    delete:
      operationId: DeleteUser
      parameters:
      - description: The id of the user
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteUserReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Delete user
      tags:
      - Users
  /v1/account/activities:
    get:
      operationId: GetAccountActivities
      parameters:
      - in: query
        name: limit
        schema:
          type: string
      - in: query
        name: offset
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActivityList'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - activity
  /v1/account/invite:
    post:
      operationId: CreateInvite
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InviteUserRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Empty'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - invite
      x-codegen-request-body-name: body
  /v1/account/oauth:
    get:
      operationId: GetOAuthOptions
      parameters:
      - description: Which authentication flow is being initiated
        in: query
        name: action
        schema:
          default: signin
          enum:
          - signin
          - signup
          - register
          type: string
      - description: A small (limited to 400 characters) string of arbitrary metadata
          which will be encoded in the state
        in: query
        name: metadata
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetOAuthOptionsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get OAuth Providers
      tags:
      - profile
    post:
      operationId: OAuthCallback
      parameters:
      - description: Seon Fingerprint
        in: header
        name: seon-fp
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OAuthCallbackRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OAuthCallbackReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Authenticate using OAuth
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/organization:
    get:
      operationId: GetCurrentOrganization
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
  /v1/account/organization_invitations:
    get:
      operationId: ListUserOrganizationInvitations
      parameters:
      - description: (Optional) The number of items to return
        in: query
        name: limit
        schema:
          type: string
      - description: (Optional) The offset in the list of item to return
        in: query
        name: offset
        schema:
          type: string
      - description: (Optional) Filter on organization invitation statuses
        explode: true
        in: query
        name: statuses
        schema:
          items:
            enum:
            - INVALID
            - PENDING
            - ACCEPTED
            - REFUSED
            - EXPIRED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListUserOrganizationInvitationsReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
  /v1/account/organization_invitations/{id}:
    get:
      operationId: GetUserOrganizationInvitation
      parameters:
      - description: The id of the organization invitation to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetUserOrganizationInvitationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
  /v1/account/organization_invitations/{id}/accept:
    post:
      operationId: AcceptOrganizationInvitation
      parameters:
      - description: The id of the organization invitation to accept
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AcceptOrganizationInvitationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/organization_invitations/{id}/decline:
    post:
      operationId: DeclineOrganizationInvitation
      parameters:
      - description: The id of the organization invitation to decline
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeclineOrganizationInvitationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/profile:
    get:
      operationId: GetCurrentUser
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
    patch:
      operationId: UpdateUser2
      parameters:
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateUserRequest.UserUpdateBody'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: user
    put:
      operationId: UpdateUser
      parameters:
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateUserRequest.UserUpdateBody'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: user
  /v1/account/resend_validation:
    post:
      operationId: ResendEmailValidation
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResendEmailValidationRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResendEmailValidationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/reset_password:
    post:
      operationId: ResetPassword
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResetPasswordReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/signup:
    post:
      operationId: Signup
      parameters:
      - description: Seon Fingerprint
        in: header
        name: seon-fp
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
        description: Create new account
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/update_password:
    post:
      operationId: UpdatePassword
      parameters:
      - description: Seon Fingerprint
        in: header
        name: seon-fp
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
      x-codegen-request-body-name: body
  /v1/account/validate/{id}:
    post:
      operationId: Validate
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - description: Seon Fingerprint
        in: header
        name: seon-fp
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - profile
  /v1/billing/has_unpaid_invoices:
    get:
      description: |-
        WARNING: Please don't use the following method.
        Koyeb doesn't guarantee backwards compatible breaking change and reserve the right to completely drop it without notice.
        USE AT YOUR OWN RISK.
      operationId: HasUnpaidInvoices
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HasUnpaidInvoicesReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: "Experimental: Has unpaid invoices"
      tags:
      - billing
  /v1/billing/manage:
    get:
      operationId: Manage
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ManageReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - billing
  /v1/billing/next_invoice:
    get:
      description: |-
        WARNING: Please don't use the following method.
        Koyeb doesn't guarantee backwards compatible breaking change and reserve the right to completely drop it without notice.
        USE AT YOUR OWN RISK.
      operationId: NextInvoice
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NextInvoiceReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: "Experimental: Fetch next invoice"
      tags:
      - billing
  /v1/github/installation:
    get:
      operationId: GetGithubInstallation
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetGithubInstallationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Fetch github installation configuration
      tags:
      - organization
    post:
      operationId: GithubInstallation
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/GithubInstallationRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GithubInstallationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Start github installation
      tags:
      - organization
      x-codegen-request-body-name: body
  /v1/organizations:
    post:
      operationId: CreateOrganization
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Create organization
      tags:
      - organization
      x-codegen-request-body-name: body
  /v1/organizations/{id}:
    delete:
      operationId: DeleteOrganization
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Delete an organization
      tags:
      - organization
    get:
      operationId: GetOrganization
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Get organization
      tags:
      - organization
    patch:
      operationId: UpdateOrganization2
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update organization
      tags:
      - organization
      x-codegen-request-body-name: organization
    put:
      operationId: UpdateOrganization
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: update_mask
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update organization
      tags:
      - organization
      x-codegen-request-body-name: organization
  /v1/organizations/{id}/deactivate:
    post:
      operationId: DeactivateOrganization
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeactivateOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Deactivate an organization
      tags:
      - organization
      x-codegen-request-body-name: body
  /v1/organizations/{id}/plan:
    post:
      operationId: UpdateOrganizationPlan
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateOrganizationPlan_request'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateOrganizationPlanReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Update organization plan
      tags:
      - organization
      x-codegen-request-body-name: body
  /v1/organizations/{id}/reactivate:
    post:
      operationId: ReactivateOrganization
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReactivateOrganizationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Reactivate an organization
      tags:
      - organization
      x-codegen-request-body-name: body
  /v1/organizations/{id}/signup_qualification:
    post:
      operationId: UpsertSignupQualification
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpsertSignupQualification_request'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpsertSignupQualificationReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Upsert organization's signup qualification
      tags:
      - organization
      x-codegen-request-body-name: body
  /v1/organizations/{id}/switch:
    post:
      operationId: SwitchOrganization
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - description: Seon Fingerprint
        in: header
        name: seon-fp
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Switch organization context
      tags:
      - organization
      x-codegen-request-body-name: body
  /v1/sso/canny:
    post:
      operationId: CannyAuth
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CannyAuthRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CannyAuthReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - sso
      x-codegen-request-body-name: body
  /v1/sso/discourse:
    post:
      operationId: DiscourseAuth
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DiscourseAuthRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DiscourseAuthReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      tags:
      - sso
      x-codegen-request-body-name: body
  /v1/unscope_organization_token:
    post:
      operationId: UnscopeOrganizationToken
      parameters:
      - description: Seon Fingerprint
        in: header
        name: seon-fp
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UnscopeOrganizationTokenRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: |-
        UnscopeOrganizationToken removes the organization scope from a token. This
        endpoint is useful when a user wants to remove an organization: by
        unscoping the token first, the user can then delete the organization
        without invalidating his token.
      tags:
      - organization
      x-codegen-request-body-name: body
  /v1/organization_confirmations/{id}:
    post:
      operationId: ConfirmOrganizationAction
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConfirmOrganizationActionReply'
          description: A successful response.
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorWithFields'
          description: Validation error
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the token is not valid.
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned when the resource does not exist.
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Returned in case of server error.
        "503":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Service is unavailable.
        default:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/google.rpc.Status'
          description: An unexpected error response.
      summary: Confirm organization action
      tags:
      - OrganizationConfirmations
components:
  schemas:
    google.protobuf.Any:
      additionalProperties:
        type: object
      example:
        '@type': '@type'
      properties:
        '@type':
          type: string
      type: object
    google.rpc.Status:
      example:
        code: 0
        details:
        - '@type': '@type'
        - '@type': '@type'
        message: message
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        details:
          items:
            $ref: '#/components/schemas/google.protobuf.Any'
          type: array
      type: object
    Error:
      properties:
        status:
          format: int32
          type: integer
        code:
          type: string
        message:
          type: string
      type: object
    ErrorField:
      properties:
        field:
          type: string
        description:
          type: string
      type: object
    ErrorWithFields:
      properties:
        status:
          format: int32
          type: integer
        code:
          type: string
        message:
          type: string
        fields:
          items:
            $ref: '#/components/schemas/ErrorField'
          type: array
      type: object
    GetMetricsReply:
      example:
        metrics:
        - samples:
          - value: 0.8008281904610115
            timestamp: timestamp
          - value: 0.8008281904610115
            timestamp: timestamp
          labels:
            key: labels
        - samples:
          - value: 0.8008281904610115
            timestamp: timestamp
          - value: 0.8008281904610115
            timestamp: timestamp
          labels:
            key: labels
      properties:
        metrics:
          items:
            $ref: '#/components/schemas/GetMetricsReply.Metric'
          type: array
      type: object
    GetMetricsReply.Metric:
      example:
        samples:
        - value: 0.8008281904610115
          timestamp: timestamp
        - value: 0.8008281904610115
          timestamp: timestamp
        labels:
          key: labels
      properties:
        labels:
          additionalProperties:
            type: string
          type: object
        samples:
          items:
            $ref: '#/components/schemas/Sample'
          type: array
      type: object
    MetricName:
      default: UNKNOWN
      enum:
      - UNKNOWN
      - CPU_TOTAL_PERCENT
      - MEM_RSS
      - HTTP_THROUGHPUT
      - HTTP_RESPONSE_TIME_50P
      - HTTP_RESPONSE_TIME_90P
      - HTTP_RESPONSE_TIME_99P
      - HTTP_RESPONSE_TIME_MAX
      - PUBLIC_DATA_TRANSFER_IN
      - PUBLIC_DATA_TRANSFER_OUT
      type: string
    Sample:
      example:
        value: 0.8008281904610115
        timestamp: timestamp
      properties:
        timestamp:
          type: string
        value:
          format: double
          type: number
      type: object
    google.protobuf.NullValue:
      default: NULL_VALUE
      description: |-
        `NullValue` is a singleton enumeration to represent the null value for the
        `Value` type union.

         The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
      enum:
      - NULL_VALUE
      type: string
    LogEntry:
      example:
        msg: msg
        created_at: 2000-01-23T04:56:07.000+00:00
        labels: "{}"
      properties:
        msg:
          type: string
        created_at:
          format: date-time
          type: string
        labels:
          properties: {}
          type: object
      type: object
    QueryLogsReply:
      example:
        pagination:
          next_start: 2000-01-23T04:56:07.000+00:00
          next_end: 2000-01-23T04:56:07.000+00:00
          has_more: true
        data:
        - msg: msg
          created_at: 2000-01-23T04:56:07.000+00:00
          labels: "{}"
        - msg: msg
          created_at: 2000-01-23T04:56:07.000+00:00
          labels: "{}"
      properties:
        data:
          items:
            $ref: '#/components/schemas/LogEntry'
          type: array
        pagination:
          $ref: '#/components/schemas/QueryLogsReplyPagination'
      type: object
    QueryLogsReplyPagination:
      example:
        next_start: 2000-01-23T04:56:07.000+00:00
        next_end: 2000-01-23T04:56:07.000+00:00
        has_more: true
      properties:
        has_more:
          type: boolean
        next_start:
          format: date-time
          type: string
        next_end:
          format: date-time
          type: string
      type: object
    ExecCommandIO:
      example:
        data: data
        close: true
      properties:
        data:
          description: Data is base64 encoded
          format: byte
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
        close:
          description: Indicate last data frame
          type: boolean
      type: object
    ExecCommandReply:
      example:
        stdout:
          data: data
          close: true
        exited: true
        exit_code: 0
        stderr:
          data: data
          close: true
      properties:
        stdout:
          $ref: '#/components/schemas/ExecCommandIO'
        stderr:
          $ref: '#/components/schemas/ExecCommandIO'
        exited:
          type: boolean
        exit_code:
          format: int32
          type: integer
      type: object
    ExecCommandRequest.Body:
      properties:
        command:
          description: Command to exec. Mandatory in the first frame sent
          items:
            type: string
          type: array
        tty_size:
          $ref: '#/components/schemas/ExecCommandRequest.TerminalSize'
        stdin:
          $ref: '#/components/schemas/ExecCommandIO'
        disableTty:
          description: Disable TTY. It's enough to specify it in the first frame
          type: boolean
      type: object
    ExecCommandRequest.IdType:
      default: INVALID
      enum:
      - INVALID
      - INSTANCE_ID
      - SERVICE_ID
      type: string
    ExecCommandRequest.TerminalSize:
      properties:
        height:
          format: int32
          type: integer
        width:
          format: int32
          type: integer
      type: object
    Archive:
      example:
        size: size
        organization_id: organization_id
        upload_url: upload_url
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        deleted_at: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: "The archive id, that can be referenced when creating or updating\
            \ a service."
          type: string
        organization_id:
          description: Organization owning the archive.
          type: string
        upload_url:
          description: |-
            The URL where to upload the archive. This URL is signed and can only be
            used to upload the archive until `valid_until`.
          type: string
        size:
          description: The provisioned space for the archive.
          format: uint64
          type: string
        created_at:
          description: Date of creation of the archive.
          format: date-time
          type: string
        deleted_at:
          description: |-
            This field is automatically set by Koyeb when the
            archive is garbage collected.
          format: date-time
          type: string
      type: object
    CreateArchive:
      example:
        size: size
      properties:
        size:
          description: "How much space to provision for the archive, in bytes."
          format: uint64
          type: string
      type: object
    CreateArchiveReply:
      example:
        archive:
          size: size
          organization_id: organization_id
          upload_url: upload_url
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          deleted_at: 2000-01-23T04:56:07.000+00:00
      properties:
        archive:
          $ref: '#/components/schemas/Archive'
      type: object
    ArchiveSource:
      example:
        id: id
        buildpack:
          privileged: true
          run_command: run_command
          build_command: build_command
        docker:
          args:
          - args
          - args
          privileged: true
          entrypoint:
          - entrypoint
          - entrypoint
          dockerfile: dockerfile
          command: command
          target: target
      properties:
        id:
          title: The ID of the archive to deploy
          type: string
        buildpack:
          $ref: '#/components/schemas/BuildpackBuilder'
        docker:
          $ref: '#/components/schemas/DockerBuilder'
      type: object
    BuildpackBuilder:
      example:
        privileged: true
        run_command: run_command
        build_command: build_command
      properties:
        build_command:
          title: "A command used to override the build command, run after all build\
            \ steps"
          type: string
        run_command:
          title: A command used to override the default run command
          type: string
        privileged:
          title: A flag to run the container in privileged mode
          type: boolean
      type: object
    ConfigFile:
      example:
        path: path
        permissions: permissions
        content: content
      properties:
        path:
          title: the path where the file is copied
          type: string
        permissions:
          title: the permissions of the file in format 0644
          type: string
        content:
          title: the content of the file
          type: string
      type: object
    DeploymentHealthCheck:
      example:
        tcp:
          port: 6
        restart_limit: 1
        http:
          path: path
          headers:
          - value: value
            key: key
          - value: value
            key: key
          method: method
          port: 7
        interval: 1
        grace_period: 7
        timeout: 1
      properties:
        grace_period:
          format: int64
          title: "An optional initial period in seconds to wait for the instance to\
            \ become healthy, default is 5s"
          type: integer
        interval:
          format: int64
          title: "An optional period in seconds between two health checks, default\
            \ is 60s"
          type: integer
        restart_limit:
          format: int64
          title: "An optional number of consecutive failures before attempting to\
            \ restart the service, default is 3"
          type: integer
        timeout:
          format: int64
          title: "An optional maximum time to wait in seconds before considering the\
            \ check as a failure, default is 5s"
          type: integer
        tcp:
          $ref: '#/components/schemas/TCPHealthCheck'
        http:
          $ref: '#/components/schemas/HTTPHealthCheck'
      type: object
    DeploymentProvisioningInfo:
      example:
        image: image
        stages:
        - finished_at: 2000-01-23T04:56:07.000+00:00
          build_attempts:
          - internal_failure: true
            finished_at: 2000-01-23T04:56:07.000+00:00
            wait_completion: true
            image_pushed: true
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            id: 0
            steps:
            - finished_at: 2000-01-23T04:56:07.000+00:00
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            - finished_at: 2000-01-23T04:56:07.000+00:00
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            status: null
            retryable_failure: true
          - internal_failure: true
            finished_at: 2000-01-23T04:56:07.000+00:00
            wait_completion: true
            image_pushed: true
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            id: 0
            steps:
            - finished_at: 2000-01-23T04:56:07.000+00:00
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            - finished_at: 2000-01-23T04:56:07.000+00:00
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            status: null
            retryable_failure: true
          name: name
          messages:
          - messages
          - messages
          started_at: 2000-01-23T04:56:07.000+00:00
          status: null
        - finished_at: 2000-01-23T04:56:07.000+00:00
          build_attempts:
          - internal_failure: true
            finished_at: 2000-01-23T04:56:07.000+00:00
            wait_completion: true
            image_pushed: true
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            id: 0
            steps:
            - finished_at: 2000-01-23T04:56:07.000+00:00
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            - finished_at: 2000-01-23T04:56:07.000+00:00
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            status: null
            retryable_failure: true
          - internal_failure: true
            finished_at: 2000-01-23T04:56:07.000+00:00
            wait_completion: true
            image_pushed: true
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            id: 0
            steps:
            - finished_at: 2000-01-23T04:56:07.000+00:00
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            - finished_at: 2000-01-23T04:56:07.000+00:00
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            status: null
            retryable_failure: true
          name: name
          messages:
          - messages
          - messages
          started_at: 2000-01-23T04:56:07.000+00:00
          status: null
        sha: sha
      properties:
        sha:
          description: The git sha for this build (we resolve the reference at the
            start of the build).
          type: string
        image:
          description: The docker image built as a result of this build.
          type: string
        stages:
          description: Some info about the build.
          items:
            $ref: '#/components/schemas/DeploymentProvisioningInfo.Stage'
          type: array
      type: object
    DeploymentProvisioningInfo.Stage:
      example:
        finished_at: 2000-01-23T04:56:07.000+00:00
        build_attempts:
        - internal_failure: true
          finished_at: 2000-01-23T04:56:07.000+00:00
          wait_completion: true
          image_pushed: true
          messages:
          - messages
          - messages
          started_at: 2000-01-23T04:56:07.000+00:00
          id: 0
          steps:
          - finished_at: 2000-01-23T04:56:07.000+00:00
            name: name
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            status: null
          - finished_at: 2000-01-23T04:56:07.000+00:00
            name: name
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            status: null
          status: null
          retryable_failure: true
        - internal_failure: true
          finished_at: 2000-01-23T04:56:07.000+00:00
          wait_completion: true
          image_pushed: true
          messages:
          - messages
          - messages
          started_at: 2000-01-23T04:56:07.000+00:00
          id: 0
          steps:
          - finished_at: 2000-01-23T04:56:07.000+00:00
            name: name
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            status: null
          - finished_at: 2000-01-23T04:56:07.000+00:00
            name: name
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            status: null
          status: null
          retryable_failure: true
        name: name
        messages:
        - messages
        - messages
        started_at: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/DeploymentProvisioningInfo.Stage.Status'
        messages:
          items:
            type: string
          type: array
        started_at:
          format: date-time
          type: string
        finished_at:
          format: date-time
          type: string
        build_attempts:
          items:
            $ref: '#/components/schemas/DeploymentProvisioningInfo.Stage.BuildAttempt'
          type: array
      type: object
    DeploymentProvisioningInfo.Stage.BuildAttempt:
      example:
        internal_failure: true
        finished_at: 2000-01-23T04:56:07.000+00:00
        wait_completion: true
        image_pushed: true
        messages:
        - messages
        - messages
        started_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        steps:
        - finished_at: 2000-01-23T04:56:07.000+00:00
          name: name
          messages:
          - messages
          - messages
          started_at: 2000-01-23T04:56:07.000+00:00
          status: null
        - finished_at: 2000-01-23T04:56:07.000+00:00
          name: name
          messages:
          - messages
          - messages
          started_at: 2000-01-23T04:56:07.000+00:00
          status: null
        status: null
        retryable_failure: true
      properties:
        id:
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/DeploymentProvisioningInfo.Stage.Status'
        messages:
          items:
            type: string
          type: array
        started_at:
          format: date-time
          type: string
        finished_at:
          format: date-time
          type: string
        steps:
          items:
            $ref: '#/components/schemas/DeploymentProvisioningInfo.Stage.BuildAttempt.BuildStep'
          type: array
        image_pushed:
          type: boolean
        internal_failure:
          type: boolean
        retryable_failure:
          type: boolean
        wait_completion:
          description: "This flag is used to finalize the build, and continue the\
            \ deployment in case of success, or cancel and potentially retry the build\
            \ in case of failure."
          type: boolean
      type: object
    DeploymentProvisioningInfo.Stage.BuildAttempt.BuildStep:
      example:
        finished_at: 2000-01-23T04:56:07.000+00:00
        name: name
        messages:
        - messages
        - messages
        started_at: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/DeploymentProvisioningInfo.Stage.Status'
        messages:
          items:
            type: string
          type: array
        started_at:
          format: date-time
          type: string
        finished_at:
          format: date-time
          type: string
      type: object
    DeploymentProvisioningInfo.Stage.Status:
      default: UNKNOWN
      enum:
      - UNKNOWN
      - PENDING
      - RUNNING
      - FAILED
      - COMPLETED
      - ABORTED
      type: string
    DeploymentScalingTarget:
      example:
        average_mem:
          value: 2
        requests_per_second:
          value: 7
        average_cpu:
          value: 5
        requests_response_time:
          quantile: 2
          value: 3
        concurrent_requests:
          value: 9
        sleep_idle_delay:
          value: 4
      properties:
        average_cpu:
          $ref: '#/components/schemas/DeploymentScalingTargetAverageCPU'
        average_mem:
          $ref: '#/components/schemas/DeploymentScalingTargetAverageMem'
        requests_per_second:
          $ref: '#/components/schemas/DeploymentScalingTargetRequestsPerSecond'
        concurrent_requests:
          $ref: '#/components/schemas/DeploymentScalingTargetConcurrentRequests'
        requests_response_time:
          $ref: '#/components/schemas/DeploymentScalingTargetRequestsResponseTime'
        sleep_idle_delay:
          $ref: '#/components/schemas/DeploymentScalingTargetSleepIdleDelay'
      type: object
    DeploymentScalingTargetAverageCPU:
      example:
        value: 5
      properties:
        value:
          format: int64
          type: integer
      type: object
    DeploymentScalingTargetAverageMem:
      example:
        value: 2
      properties:
        value:
          format: int64
          type: integer
      type: object
    DeploymentScalingTargetConcurrentRequests:
      example:
        value: 9
      properties:
        value:
          format: int64
          type: integer
      type: object
    DeploymentScalingTargetRequestsPerSecond:
      example:
        value: 7
      properties:
        value:
          format: int64
          type: integer
      type: object
    DeploymentScalingTargetRequestsResponseTime:
      example:
        quantile: 2
        value: 3
      properties:
        value:
          format: int64
          type: integer
        quantile:
          description: |-
            The quantile to use for autoscaling. For example, set to 95 to use the 95th
            percentile (p95) for autoscaling.  Valid values are between 0 and 100.
          format: int64
          type: integer
      type: object
    DeploymentScalingTargetSleepIdleDelay:
      example:
        value: 4
      properties:
        value:
          description: |-
            Delay in seconds after which a service which received 0 request is scaled to 0.
            This is not configurable and must be set to 300 (5 minutes). Get in touch to
            tune it.
          format: int64
          type: integer
      type: object
    DeploymentStrategy:
      example:
        type: null
      properties:
        type:
          $ref: '#/components/schemas/DeploymentStrategyType'
      type: object
    DeploymentStrategyType:
      default: DEPLOYMENT_STRATEGY_TYPE_INVALID
      description: |2-
         - DEPLOYMENT_STRATEGY_TYPE_INVALID: Invalid / Zero value.
         - DEPLOYMENT_STRATEGY_TYPE_CANARY: Use canary strategy.
         - DEPLOYMENT_STRATEGY_TYPE_ROLLING: Use rolling strategy.
         - DEPLOYMENT_STRATEGY_TYPE_BLUE_GREEN: Use blue green strategy.
         - DEPLOYMENT_STRATEGY_TYPE_IMMEDIATE: Use immediate strategy.
      enum:
      - DEPLOYMENT_STRATEGY_TYPE_INVALID
      - DEPLOYMENT_STRATEGY_TYPE_CANARY
      - DEPLOYMENT_STRATEGY_TYPE_ROLLING
      - DEPLOYMENT_STRATEGY_TYPE_BLUE_GREEN
      - DEPLOYMENT_STRATEGY_TYPE_IMMEDIATE
      type: string
    DockerBuilder:
      example:
        args:
        - args
        - args
        privileged: true
        entrypoint:
        - entrypoint
        - entrypoint
        dockerfile: dockerfile
        command: command
        target: target
      properties:
        dockerfile:
          title: A path to the Dockerfile
          type: string
        entrypoint:
          items:
            type: string
          title: The docker ENTRYPOINT
          type: array
        command:
          title: The docker CMD
          type: string
        args:
          items:
            type: string
          title: The docker CMD args
          type: array
        target:
          title: The target for multi-stage builds
          type: string
        privileged:
          title: A flag to run the container in privileged mode
          type: boolean
      type: object
    DockerSource:
      example:
        args:
        - args
        - args
        privileged: true
        image: image
        image_registry_secret: image_registry_secret
        entrypoint:
        - entrypoint
        - entrypoint
        command: command
      properties:
        image:
          type: string
        command:
          type: string
        args:
          items:
            type: string
          type: array
        image_registry_secret:
          type: string
        entrypoint:
          items:
            type: string
          type: array
        privileged:
          title: A flag to run the container in privileged mode
          type: boolean
      type: object
    Env:
      example:
        secret: secret
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
        secret:
          type: string
      type: object
    GetRegionalDeploymentReply:
      example:
        regional_deployment:
          metadata: "{}"
          role: null
          created_at: 2000-01-23T04:56:07.000+00:00
          scheduled_at: 2000-01-23T04:56:07.000+00:00
          version: version
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          datacenters:
          - datacenters
          - datacenters
          updated_at: 2000-01-23T04:56:07.000+00:00
          child_id: child_id
          provisioning_info:
            image: image
            stages:
            - finished_at: 2000-01-23T04:56:07.000+00:00
              build_attempts:
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            - finished_at: 2000-01-23T04:56:07.000+00:00
              build_attempts:
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            sha: sha
          deployment_group: deployment_group
          parent_id: parent_id
          organization_id: organization_id
          service_id: service_id
          started_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          definition:
            scaling:
              min: 1
              max: 5
              targets:
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
            volumes:
            - path: path
              replica_index: 1
              id: id
            - path: path
              replica_index: 1
              id: id
            skip_cache: true
            archive:
              id: id
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            type: null
            ports:
            - protocol: protocol
              port: 6
            - protocol: protocol
              port: 6
            env:
            - secret: secret
              value: value
              key: key
            - secret: secret
              value: value
              key: key
            config_files:
            - path: path
              permissions: permissions
              content: content
            - path: path
              permissions: permissions
              content: content
            docker:
              args:
              - args
              - args
              privileged: true
              image: image
              image_registry_secret: image_registry_secret
              entrypoint:
              - entrypoint
              - entrypoint
              command: command
            routes:
            - path: path
              port: 0
            - path: path
              port: 0
            git:
              run_command: run_command
              workdir: workdir
              build_command: build_command
              no_deploy_on_push: true
              tag: tag
              repository: repository
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              branch: branch
              sha: sha
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            deployment_group: deployment_group
            health_checks:
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            name: name
            strategy:
              type: null
            region: region
            instance_type: instance_type
          id: id
          deployment_id: deployment_id
          region: region
          app_id: app_id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          allocated_at: 2000-01-23T04:56:07.000+00:00
          status: null
      properties:
        regional_deployment:
          $ref: '#/components/schemas/RegionalDeployment'
      type: object
    GitSource:
      example:
        run_command: run_command
        workdir: workdir
        build_command: build_command
        no_deploy_on_push: true
        tag: tag
        repository: repository
        buildpack:
          privileged: true
          run_command: run_command
          build_command: build_command
        branch: branch
        sha: sha
        docker:
          args:
          - args
          - args
          privileged: true
          entrypoint:
          - entrypoint
          - entrypoint
          dockerfile: dockerfile
          command: command
          target: target
      properties:
        repository:
          description: "A url to a git repository (contains the provider as well)\
            \ .e.g: github.com/koyeb/test."
          type: string
        branch:
          title: A git branch that will be tracked for new commits and deployments
            will be created
          type: string
        tag:
          title: A git tag that should be built
          type: string
        sha:
          title: "A git commit that should be built (useful for pinning to a commit,\
            \ this will always be set when a deployment is created by a code push)"
          type: string
        build_command:
          title: "A command used to override the build command, run after all build\
            \ steps — deprecated, use buildpack.build_command instead"
          type: string
        run_command:
          title: "A command used to override the default run command - deprecated,\
            \ use buildpack.run_command instead"
          type: string
        no_deploy_on_push:
          title: A flag to disable a new deployment when a push event is detected
          type: boolean
        workdir:
          title: A subdirectory to use as the build directory
          type: string
        buildpack:
          $ref: '#/components/schemas/BuildpackBuilder'
        docker:
          $ref: '#/components/schemas/DockerBuilder'
      type: object
    HTTPHeader:
      example:
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    HTTPHealthCheck:
      example:
        path: path
        headers:
        - value: value
          key: key
        - value: value
          key: key
        method: method
        port: 7
      properties:
        port:
          format: int64
          title: "The port to use to perform the health check, must be declared in\
            \ the ports section"
          type: integer
        path:
          title: The path to use to perform the HTTP health check
          type: string
        method:
          title: "An optional HTTP method to use to perform the health check, default\
            \ is GET"
          type: string
        headers:
          items:
            $ref: '#/components/schemas/HTTPHeader'
          title: "An optional list of HTTP headers to provide when performing the\
            \ request, default is empty"
          type: array
      type: object
    ListRegionalDeploymentEventsReply:
      example:
        offset: 6
        limit: 0
        has_next: true
        events:
        - regional_deployment_id: regional_deployment_id
          metadata: "{}"
          organization_id: organization_id
          id: id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
        - regional_deployment_id: regional_deployment_id
          metadata: "{}"
          organization_id: organization_id
          id: id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
        order: order
      properties:
        events:
          items:
            $ref: '#/components/schemas/RegionalDeploymentEvent'
          title: The collection of events
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        order:
          title: The order in the request
          type: string
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    ListRegionalDeploymentsReply:
      example:
        offset: 5
        regional_deployments:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          definition:
            scaling:
              min: 1
              max: 5
              targets:
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
            volumes:
            - path: path
              replica_index: 1
              id: id
            - path: path
              replica_index: 1
              id: id
            skip_cache: true
            archive:
              id: id
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            type: null
            ports:
            - protocol: protocol
              port: 6
            - protocol: protocol
              port: 6
            env:
            - secret: secret
              value: value
              key: key
            - secret: secret
              value: value
              key: key
            config_files:
            - path: path
              permissions: permissions
              content: content
            - path: path
              permissions: permissions
              content: content
            docker:
              args:
              - args
              - args
              privileged: true
              image: image
              image_registry_secret: image_registry_secret
              entrypoint:
              - entrypoint
              - entrypoint
              command: command
            routes:
            - path: path
              port: 0
            - path: path
              port: 0
            git:
              run_command: run_command
              workdir: workdir
              build_command: build_command
              no_deploy_on_push: true
              tag: tag
              repository: repository
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              branch: branch
              sha: sha
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            deployment_group: deployment_group
            health_checks:
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            name: name
            strategy:
              type: null
            region: region
            instance_type: instance_type
          id: id
          region: region
          status: null
        - updated_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          definition:
            scaling:
              min: 1
              max: 5
              targets:
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
            volumes:
            - path: path
              replica_index: 1
              id: id
            - path: path
              replica_index: 1
              id: id
            skip_cache: true
            archive:
              id: id
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            type: null
            ports:
            - protocol: protocol
              port: 6
            - protocol: protocol
              port: 6
            env:
            - secret: secret
              value: value
              key: key
            - secret: secret
              value: value
              key: key
            config_files:
            - path: path
              permissions: permissions
              content: content
            - path: path
              permissions: permissions
              content: content
            docker:
              args:
              - args
              - args
              privileged: true
              image: image
              image_registry_secret: image_registry_secret
              entrypoint:
              - entrypoint
              - entrypoint
              command: command
            routes:
            - path: path
              port: 0
            - path: path
              port: 0
            git:
              run_command: run_command
              workdir: workdir
              build_command: build_command
              no_deploy_on_push: true
              tag: tag
              repository: repository
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              branch: branch
              sha: sha
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            deployment_group: deployment_group
            health_checks:
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            name: name
            strategy:
              type: null
            region: region
            instance_type: instance_type
          id: id
          region: region
          status: null
        limit: 4
        count: 9
        has_next: true
      properties:
        regional_deployments:
          items:
            $ref: '#/components/schemas/RegionalDeploymentListItem'
          title: The collection of regional deployments
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    Port:
      example:
        protocol: protocol
        port: 6
      properties:
        port:
          format: int64
          type: integer
        protocol:
          type: string
      type: object
    RegionalDeployment:
      example:
        metadata: "{}"
        role: null
        created_at: 2000-01-23T04:56:07.000+00:00
        scheduled_at: 2000-01-23T04:56:07.000+00:00
        version: version
        succeeded_at: 2000-01-23T04:56:07.000+00:00
        datacenters:
        - datacenters
        - datacenters
        updated_at: 2000-01-23T04:56:07.000+00:00
        child_id: child_id
        provisioning_info:
          image: image
          stages:
          - finished_at: 2000-01-23T04:56:07.000+00:00
            build_attempts:
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            name: name
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            status: null
          - finished_at: 2000-01-23T04:56:07.000+00:00
            build_attempts:
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            name: name
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            status: null
          sha: sha
        deployment_group: deployment_group
        parent_id: parent_id
        organization_id: organization_id
        service_id: service_id
        started_at: 2000-01-23T04:56:07.000+00:00
        messages:
        - messages
        - messages
        definition:
          scaling:
            min: 1
            max: 5
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          volumes:
          - path: path
            replica_index: 1
            id: id
          - path: path
            replica_index: 1
            id: id
          skip_cache: true
          archive:
            id: id
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          type: null
          ports:
          - protocol: protocol
            port: 6
          - protocol: protocol
            port: 6
          env:
          - secret: secret
            value: value
            key: key
          - secret: secret
            value: value
            key: key
          config_files:
          - path: path
            permissions: permissions
            content: content
          - path: path
            permissions: permissions
            content: content
          docker:
            args:
            - args
            - args
            privileged: true
            image: image
            image_registry_secret: image_registry_secret
            entrypoint:
            - entrypoint
            - entrypoint
            command: command
          routes:
          - path: path
            port: 0
          - path: path
            port: 0
          git:
            run_command: run_command
            workdir: workdir
            build_command: build_command
            no_deploy_on_push: true
            tag: tag
            repository: repository
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            branch: branch
            sha: sha
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          deployment_group: deployment_group
          health_checks:
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          name: name
          strategy:
            type: null
          region: region
          instance_type: instance_type
        id: id
        deployment_id: deployment_id
        region: region
        app_id: app_id
        terminated_at: 2000-01-23T04:56:07.000+00:00
        allocated_at: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        id:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        scheduled_at:
          format: date-time
          type: string
        allocated_at:
          format: date-time
          type: string
        started_at:
          format: date-time
          type: string
        succeeded_at:
          format: date-time
          type: string
        terminated_at:
          format: date-time
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
        region:
          type: string
        parent_id:
          type: string
        child_id:
          type: string
        status:
          $ref: '#/components/schemas/RegionalDeployment.Status'
        messages:
          items:
            type: string
          type: array
        definition:
          $ref: '#/components/schemas/RegionalDeploymentDefinition'
        datacenters:
          items:
            type: string
          type: array
        metadata:
          type: object
        provisioning_info:
          $ref: '#/components/schemas/DeploymentProvisioningInfo'
        role:
          $ref: '#/components/schemas/RegionalDeployment.Role'
        version:
          format: uint64
          type: string
        deployment_group:
          title: Legacy stuff
          type: string
        deployment_id:
          type: string
      type: object
    RegionalDeployment.Role:
      default: INVALID
      enum:
      - INVALID
      - ACTIVE
      - UPCOMING
      - CURRENT
      type: string
    RegionalDeployment.Status:
      default: PENDING
      enum:
      - PENDING
      - PROVISIONING
      - SCHEDULED
      - CANCELING
      - CANCELED
      - ALLOCATING
      - STARTING
      - HEALTHY
      - DEGRADED
      - UNHEALTHY
      - STOPPING
      - STOPPED
      - ERRORING
      - ERROR
      - SLEEPING
      type: string
    RegionalDeploymentDefinition:
      example:
        scaling:
          min: 1
          max: 5
          targets:
          - average_mem:
              value: 2
            requests_per_second:
              value: 7
            average_cpu:
              value: 5
            requests_response_time:
              quantile: 2
              value: 3
            concurrent_requests:
              value: 9
            sleep_idle_delay:
              value: 4
          - average_mem:
              value: 2
            requests_per_second:
              value: 7
            average_cpu:
              value: 5
            requests_response_time:
              quantile: 2
              value: 3
            concurrent_requests:
              value: 9
            sleep_idle_delay:
              value: 4
        volumes:
        - path: path
          replica_index: 1
          id: id
        - path: path
          replica_index: 1
          id: id
        skip_cache: true
        archive:
          id: id
          buildpack:
            privileged: true
            run_command: run_command
            build_command: build_command
          docker:
            args:
            - args
            - args
            privileged: true
            entrypoint:
            - entrypoint
            - entrypoint
            dockerfile: dockerfile
            command: command
            target: target
        type: null
        ports:
        - protocol: protocol
          port: 6
        - protocol: protocol
          port: 6
        env:
        - secret: secret
          value: value
          key: key
        - secret: secret
          value: value
          key: key
        config_files:
        - path: path
          permissions: permissions
          content: content
        - path: path
          permissions: permissions
          content: content
        docker:
          args:
          - args
          - args
          privileged: true
          image: image
          image_registry_secret: image_registry_secret
          entrypoint:
          - entrypoint
          - entrypoint
          command: command
        routes:
        - path: path
          port: 0
        - path: path
          port: 0
        git:
          run_command: run_command
          workdir: workdir
          build_command: build_command
          no_deploy_on_push: true
          tag: tag
          repository: repository
          buildpack:
            privileged: true
            run_command: run_command
            build_command: build_command
          branch: branch
          sha: sha
          docker:
            args:
            - args
            - args
            privileged: true
            entrypoint:
            - entrypoint
            - entrypoint
            dockerfile: dockerfile
            command: command
            target: target
        deployment_group: deployment_group
        health_checks:
        - tcp:
            port: 6
          restart_limit: 1
          http:
            path: path
            headers:
            - value: value
              key: key
            - value: value
              key: key
            method: method
            port: 7
          interval: 1
          grace_period: 7
          timeout: 1
        - tcp:
            port: 6
          restart_limit: 1
          http:
            path: path
            headers:
            - value: value
              key: key
            - value: value
              key: key
            method: method
            port: 7
          interval: 1
          grace_period: 7
          timeout: 1
        name: name
        strategy:
          type: null
        region: region
        instance_type: instance_type
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/RegionalDeploymentDefinition.Type'
        strategy:
          $ref: '#/components/schemas/DeploymentStrategy'
        routes:
          items:
            $ref: '#/components/schemas/Route'
          type: array
        ports:
          items:
            $ref: '#/components/schemas/Port'
          type: array
        env:
          items:
            $ref: '#/components/schemas/Env'
          type: array
        region:
          type: string
        scaling:
          $ref: '#/components/schemas/Scaling'
        instance_type:
          type: string
        deployment_group:
          type: string
        health_checks:
          items:
            $ref: '#/components/schemas/DeploymentHealthCheck'
          type: array
        volumes:
          items:
            $ref: '#/components/schemas/RegionalDeploymentVolume'
          type: array
        config_files:
          items:
            $ref: '#/components/schemas/ConfigFile'
          type: array
        skip_cache:
          type: boolean
        docker:
          $ref: '#/components/schemas/DockerSource'
        git:
          $ref: '#/components/schemas/GitSource'
        archive:
          $ref: '#/components/schemas/ArchiveSource'
      type: object
    RegionalDeploymentDefinition.Type:
      default: INVALID
      enum:
      - INVALID
      - WEB
      - WORKER
      type: string
    RegionalDeploymentEvent:
      example:
        regional_deployment_id: regional_deployment_id
        metadata: "{}"
        organization_id: organization_id
        id: id
        type: type
        message: message
        when: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: string
        when:
          format: date-time
          type: string
        organization_id:
          type: string
        regional_deployment_id:
          type: string
        type:
          type: string
        message:
          type: string
        metadata:
          properties: {}
          type: object
      type: object
    RegionalDeploymentListItem:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        messages:
        - messages
        - messages
        definition:
          scaling:
            min: 1
            max: 5
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          volumes:
          - path: path
            replica_index: 1
            id: id
          - path: path
            replica_index: 1
            id: id
          skip_cache: true
          archive:
            id: id
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          type: null
          ports:
          - protocol: protocol
            port: 6
          - protocol: protocol
            port: 6
          env:
          - secret: secret
            value: value
            key: key
          - secret: secret
            value: value
            key: key
          config_files:
          - path: path
            permissions: permissions
            content: content
          - path: path
            permissions: permissions
            content: content
          docker:
            args:
            - args
            - args
            privileged: true
            image: image
            image_registry_secret: image_registry_secret
            entrypoint:
            - entrypoint
            - entrypoint
            command: command
          routes:
          - path: path
            port: 0
          - path: path
            port: 0
          git:
            run_command: run_command
            workdir: workdir
            build_command: build_command
            no_deploy_on_push: true
            tag: tag
            repository: repository
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            branch: branch
            sha: sha
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          deployment_group: deployment_group
          health_checks:
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          name: name
          strategy:
            type: null
          region: region
          instance_type: instance_type
        id: id
        region: region
        status: null
      properties:
        id:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        region:
          type: string
        status:
          $ref: '#/components/schemas/RegionalDeployment.Status'
        messages:
          items:
            type: string
          type: array
        definition:
          $ref: '#/components/schemas/RegionalDeploymentDefinition'
      type: object
    RegionalDeploymentMetadata:
      type: object
    RegionalDeploymentVolume:
      example:
        path: path
        replica_index: 1
        id: id
      properties:
        id:
          title: the id of the volume
          type: string
        path:
          title: the path where the volume is mounted to
          type: string
        replica_index:
          format: int64
          title: the replica index to mount the volume to
          type: integer
      type: object
    Route:
      example:
        path: path
        port: 0
      properties:
        port:
          format: int64
          type: integer
        path:
          type: string
      type: object
    Scaling:
      example:
        min: 1
        max: 5
        targets:
        - average_mem:
            value: 2
          requests_per_second:
            value: 7
          average_cpu:
            value: 5
          requests_response_time:
            quantile: 2
            value: 3
          concurrent_requests:
            value: 9
          sleep_idle_delay:
            value: 4
        - average_mem:
            value: 2
          requests_per_second:
            value: 7
          average_cpu:
            value: 5
          requests_response_time:
            quantile: 2
            value: 3
          concurrent_requests:
            value: 9
          sleep_idle_delay:
            value: 4
      properties:
        min:
          format: int64
          type: integer
        max:
          format: int64
          type: integer
        targets:
          items:
            $ref: '#/components/schemas/DeploymentScalingTarget'
          type: array
      type: object
    TCPHealthCheck:
      example:
        port: 6
      properties:
        port:
          format: int64
          title: "The port to use to perform the health check, must be declared in\
            \ the ports section"
          type: integer
      type: object
    ReviewOrganizationCapacityReply:
      example:
        has_capacity: true
      properties:
        has_capacity:
          type: boolean
      type: object
    ReviewOrganizationCapacityRequest:
      example:
        plan: plan
      properties:
        plan:
          type: string
      type: object
    CreateSnapshotReply:
      example:
        snapshot:
          size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          region: region
          type: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          parent_volume_id: parent_volume_id
          status: null
      properties:
        snapshot:
          $ref: '#/components/schemas/Snapshot'
      type: object
    CreateSnapshotRequest:
      example:
        name: name
        parent_volume_id: parent_volume_id
      properties:
        parent_volume_id:
          title: The id of the volume to snapshot
          type: string
        name:
          title: The name of the snapshot
          type: string
      type: object
    DeleteSnapshotReply:
      example:
        snapshot:
          size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          region: region
          type: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          parent_volume_id: parent_volume_id
          status: null
      properties:
        snapshot:
          $ref: '#/components/schemas/Snapshot'
      type: object
    GetSnapshotReply:
      example:
        snapshot:
          size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          region: region
          type: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          parent_volume_id: parent_volume_id
          status: null
      properties:
        snapshot:
          $ref: '#/components/schemas/Snapshot'
      type: object
    ListSnapshotsReply:
      example:
        snapshots:
        - size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          region: region
          type: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          parent_volume_id: parent_volume_id
          status: null
        - size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          region: region
          type: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          parent_volume_id: parent_volume_id
          status: null
        offset: 1
        limit: 6
        has_next: true
      properties:
        snapshots:
          items:
            $ref: '#/components/schemas/Snapshot'
          title: The collection of snapshots
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    Snapshot:
      description: "The object that represents a snapshot. It can either be local,\
        \ on a node, or remote, in a cold storage."
      example:
        size: 0
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        region: region
        type: null
        deleted_at: 2000-01-23T04:56:07.000+00:00
        parent_volume_id: parent_volume_id
        status: null
      properties:
        id:
          title: the identifier of the snapshot object
          type: string
        name:
          title: the snapshot name
          type: string
        size:
          format: int64
          title: the original volume size
          type: integer
        created_at:
          format: date-time
          title: creation timestamp
          type: string
        updated_at:
          format: date-time
          title: last change timestamp
          type: string
        deleted_at:
          format: date-time
          title: deletion timestamp
          type: string
        organization_id:
          title: the organization to which the snapshot belongs to
          type: string
        parent_volume_id:
          title: the volume from which the snapshot has been created
          type: string
        region:
          title: "the region where the snapshot resides, if any"
          type: string
        status:
          $ref: '#/components/schemas/SnapshotStatus'
        type:
          $ref: '#/components/schemas/SnapshotType'
      type: object
    SnapshotStatus:
      default: SNAPSHOT_STATUS_INVALID
      enum:
      - SNAPSHOT_STATUS_INVALID
      - SNAPSHOT_STATUS_CREATING
      - SNAPSHOT_STATUS_AVAILABLE
      - SNAPSHOT_STATUS_MIGRATING
      - SNAPSHOT_STATUS_DELETING
      - SNAPSHOT_STATUS_DELETED
      title: |-
        - SNAPSHOT_STATUS_INVALID: zero value, invalid
         - SNAPSHOT_STATUS_CREATING: the snapshot is being created
         - SNAPSHOT_STATUS_AVAILABLE: the snapshot is complete and available
         - SNAPSHOT_STATUS_MIGRATING: the snapshot is being migrated
         - SNAPSHOT_STATUS_DELETING: the snapshot is being deleted
         - SNAPSHOT_STATUS_DELETED: the snapshot is deleted
      type: string
    SnapshotType:
      default: SNAPSHOT_TYPE_INVALID
      enum:
      - SNAPSHOT_TYPE_INVALID
      - SNAPSHOT_TYPE_LOCAL
      - SNAPSHOT_TYPE_REMOTE
      title: |-
        - SNAPSHOT_TYPE_INVALID: zero value, invalid
         - SNAPSHOT_TYPE_LOCAL: the snapshot is local to the machine
         - SNAPSHOT_TYPE_REMOTE: the snapshot is remote in a cold storage
      type: string
    UpdateSnapshotReply:
      example:
        snapshot:
          size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          region: region
          type: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          parent_volume_id: parent_volume_id
          status: null
      properties:
        snapshot:
          $ref: '#/components/schemas/Snapshot'
      type: object
    ArchiveDeploymentMetadata:
      example:
        last_provisioned_deployment_id: last_provisioned_deployment_id
      properties:
        last_provisioned_deployment_id:
          type: string
      type: object
    CancelDeploymentReply:
      type: object
    DatabaseDeploymentMetadata:
      example:
        neon_postgres:
          reset_role_passwords:
          - reset_role_passwords
          - reset_role_passwords
      properties:
        neon_postgres:
          $ref: '#/components/schemas/NeonPostgresDatabaseDeploymentMetadata'
      type: object
    DatabaseSource:
      example:
        neon_postgres:
          databases:
          - owner: owner
            name: name
          - owner: owner
            name: name
          roles:
          - name: name
            secret: secret
          - name: name
            secret: secret
          region: region
          instance_type: instance_type
          pg_version: 2
      properties:
        neon_postgres:
          $ref: '#/components/schemas/NeonPostgresDatabase'
      type: object
    Deployment:
      example:
        metadata:
          database:
            neon_postgres:
              reset_role_passwords:
              - reset_role_passwords
              - reset_role_passwords
          git:
            last_provisioned_deployment_id: last_provisioned_deployment_id
          archive:
            last_provisioned_deployment_id: last_provisioned_deployment_id
          trigger:
            actor: null
            git:
              sender_username: sender_username
              provider: null
              repository: repository
              message: message
              branch: branch
              sha: sha
              sender_avatar_url: sender_avatar_url
              sender_profile_url: sender_profile_url
            type: null
        role: null
        created_at: 2000-01-23T04:56:07.000+00:00
        skip_build: true
        version: version
        succeeded_at: 2000-01-23T04:56:07.000+00:00
        updated_at: 2000-01-23T04:56:07.000+00:00
        child_id: child_id
        provisioning_info:
          image: image
          stages:
          - finished_at: 2000-01-23T04:56:07.000+00:00
            build_attempts:
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            name: name
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            status: null
          - finished_at: 2000-01-23T04:56:07.000+00:00
            build_attempts:
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            name: name
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            status: null
          sha: sha
        deployment_group: deployment_group
        parent_id: parent_id
        organization_id: organization_id
        service_id: service_id
        started_at: 2000-01-23T04:56:07.000+00:00
        messages:
        - messages
        - messages
        definition:
          instance_types:
          - scopes:
            - scopes
            - scopes
            type: type
          - scopes:
            - scopes
            - scopes
            type: type
          regions:
          - regions
          - regions
          volumes:
          - path: path
            replica_index: 5
            id: id
            scopes:
            - scopes
            - scopes
          - path: path
            replica_index: 5
            id: id
            scopes:
            - scopes
            - scopes
          skip_cache: true
          archive:
            id: id
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          type: null
          ports:
          - protocol: protocol
            port: 6
          - protocol: protocol
            port: 6
          env:
          - scopes:
            - scopes
            - scopes
            secret: secret
            value: value
            key: key
          - scopes:
            - scopes
            - scopes
            secret: secret
            value: value
            key: key
          config_files:
          - path: path
            permissions: permissions
            content: content
          - path: path
            permissions: permissions
            content: content
          docker:
            args:
            - args
            - args
            privileged: true
            image: image
            image_registry_secret: image_registry_secret
            entrypoint:
            - entrypoint
            - entrypoint
            command: command
          routes:
          - path: path
            port: 0
          - path: path
            port: 0
          database:
            neon_postgres:
              databases:
              - owner: owner
                name: name
              - owner: owner
                name: name
              roles:
              - name: name
                secret: secret
              - name: name
                secret: secret
              region: region
              instance_type: instance_type
              pg_version: 2
          git:
            run_command: run_command
            workdir: workdir
            build_command: build_command
            no_deploy_on_push: true
            tag: tag
            repository: repository
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            branch: branch
            sha: sha
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          scalings:
          - min: 1
            max: 5
            scopes:
            - scopes
            - scopes
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          - min: 1
            max: 5
            scopes:
            - scopes
            - scopes
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          health_checks:
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          name: name
          strategy:
            type: null
        id: id
        database_info:
          neon_postgres:
            endpoint_state: endpoint_state
            endpoint_last_active: 2000-01-23T04:56:07.000+00:00
            server_host: server_host
            roles:
            - secret_id: secret_id
              name: name
            - secret_id: secret_id
              name: name
            written_data_bytes: written_data_bytes
            data_transfer_bytes: data_transfer_bytes
            default_branch_state: default_branch_state
            active_time_seconds: active_time_seconds
            default_branch_logical_size: default_branch_logical_size
            default_branch_name: default_branch_name
            server_port: 7
            default_branch_id: default_branch_id
            compute_time_seconds: compute_time_seconds
            data_storage_bytes_hour: data_storage_bytes_hour
        app_id: app_id
        terminated_at: 2000-01-23T04:56:07.000+00:00
        allocated_at: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        id:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        allocated_at:
          format: date-time
          type: string
        started_at:
          format: date-time
          type: string
        succeeded_at:
          format: date-time
          type: string
        terminated_at:
          format: date-time
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
        parent_id:
          type: string
        child_id:
          type: string
        status:
          $ref: '#/components/schemas/Deployment.Status'
        metadata:
          $ref: '#/components/schemas/DeploymentMetadata'
        definition:
          $ref: '#/components/schemas/DeploymentDefinition'
        messages:
          items:
            type: string
          type: array
        provisioning_info:
          $ref: '#/components/schemas/DeploymentProvisioningInfo'
        database_info:
          $ref: '#/components/schemas/DeploymentDatabaseInfo'
        skip_build:
          type: boolean
        role:
          $ref: '#/components/schemas/Deployment.Role'
        version:
          format: uint64
          type: string
        deployment_group:
          type: string
      type: object
    Deployment.Role:
      default: INVALID
      enum:
      - INVALID
      - ACTIVE
      - UPCOMING
      - CURRENT
      type: string
    Deployment.Status:
      default: PENDING
      enum:
      - PENDING
      - PROVISIONING
      - SCHEDULED
      - CANCELING
      - CANCELED
      - ALLOCATING
      - STARTING
      - HEALTHY
      - DEGRADED
      - UNHEALTHY
      - STOPPING
      - STOPPED
      - ERRORING
      - ERROR
      - STASHED
      - SLEEPING
      type: string
    DeploymentDatabaseInfo:
      example:
        neon_postgres:
          endpoint_state: endpoint_state
          endpoint_last_active: 2000-01-23T04:56:07.000+00:00
          server_host: server_host
          roles:
          - secret_id: secret_id
            name: name
          - secret_id: secret_id
            name: name
          written_data_bytes: written_data_bytes
          data_transfer_bytes: data_transfer_bytes
          default_branch_state: default_branch_state
          active_time_seconds: active_time_seconds
          default_branch_logical_size: default_branch_logical_size
          default_branch_name: default_branch_name
          server_port: 7
          default_branch_id: default_branch_id
          compute_time_seconds: compute_time_seconds
          data_storage_bytes_hour: data_storage_bytes_hour
      properties:
        neon_postgres:
          $ref: '#/components/schemas/DeploymentNeonPostgresDatabaseInfo'
      type: object
    DeploymentDefinition:
      example:
        instance_types:
        - scopes:
          - scopes
          - scopes
          type: type
        - scopes:
          - scopes
          - scopes
          type: type
        regions:
        - regions
        - regions
        volumes:
        - path: path
          replica_index: 5
          id: id
          scopes:
          - scopes
          - scopes
        - path: path
          replica_index: 5
          id: id
          scopes:
          - scopes
          - scopes
        skip_cache: true
        archive:
          id: id
          buildpack:
            privileged: true
            run_command: run_command
            build_command: build_command
          docker:
            args:
            - args
            - args
            privileged: true
            entrypoint:
            - entrypoint
            - entrypoint
            dockerfile: dockerfile
            command: command
            target: target
        type: null
        ports:
        - protocol: protocol
          port: 6
        - protocol: protocol
          port: 6
        env:
        - scopes:
          - scopes
          - scopes
          secret: secret
          value: value
          key: key
        - scopes:
          - scopes
          - scopes
          secret: secret
          value: value
          key: key
        config_files:
        - path: path
          permissions: permissions
          content: content
        - path: path
          permissions: permissions
          content: content
        docker:
          args:
          - args
          - args
          privileged: true
          image: image
          image_registry_secret: image_registry_secret
          entrypoint:
          - entrypoint
          - entrypoint
          command: command
        routes:
        - path: path
          port: 0
        - path: path
          port: 0
        database:
          neon_postgres:
            databases:
            - owner: owner
              name: name
            - owner: owner
              name: name
            roles:
            - name: name
              secret: secret
            - name: name
              secret: secret
            region: region
            instance_type: instance_type
            pg_version: 2
        git:
          run_command: run_command
          workdir: workdir
          build_command: build_command
          no_deploy_on_push: true
          tag: tag
          repository: repository
          buildpack:
            privileged: true
            run_command: run_command
            build_command: build_command
          branch: branch
          sha: sha
          docker:
            args:
            - args
            - args
            privileged: true
            entrypoint:
            - entrypoint
            - entrypoint
            dockerfile: dockerfile
            command: command
            target: target
        scalings:
        - min: 1
          max: 5
          scopes:
          - scopes
          - scopes
          targets:
          - average_mem:
              value: 2
            requests_per_second:
              value: 7
            average_cpu:
              value: 5
            requests_response_time:
              quantile: 2
              value: 3
            concurrent_requests:
              value: 9
            sleep_idle_delay:
              value: 4
          - average_mem:
              value: 2
            requests_per_second:
              value: 7
            average_cpu:
              value: 5
            requests_response_time:
              quantile: 2
              value: 3
            concurrent_requests:
              value: 9
            sleep_idle_delay:
              value: 4
        - min: 1
          max: 5
          scopes:
          - scopes
          - scopes
          targets:
          - average_mem:
              value: 2
            requests_per_second:
              value: 7
            average_cpu:
              value: 5
            requests_response_time:
              quantile: 2
              value: 3
            concurrent_requests:
              value: 9
            sleep_idle_delay:
              value: 4
          - average_mem:
              value: 2
            requests_per_second:
              value: 7
            average_cpu:
              value: 5
            requests_response_time:
              quantile: 2
              value: 3
            concurrent_requests:
              value: 9
            sleep_idle_delay:
              value: 4
        health_checks:
        - tcp:
            port: 6
          restart_limit: 1
          http:
            path: path
            headers:
            - value: value
              key: key
            - value: value
              key: key
            method: method
            port: 7
          interval: 1
          grace_period: 7
          timeout: 1
        - tcp:
            port: 6
          restart_limit: 1
          http:
            path: path
            headers:
            - value: value
              key: key
            - value: value
              key: key
            method: method
            port: 7
          interval: 1
          grace_period: 7
          timeout: 1
        name: name
        strategy:
          type: null
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/DeploymentDefinition.Type'
        strategy:
          $ref: '#/components/schemas/DeploymentStrategy'
        routes:
          items:
            $ref: '#/components/schemas/DeploymentRoute'
          type: array
        ports:
          items:
            $ref: '#/components/schemas/DeploymentPort'
          type: array
        env:
          items:
            $ref: '#/components/schemas/DeploymentEnv'
          type: array
        regions:
          items:
            type: string
          type: array
        scalings:
          items:
            $ref: '#/components/schemas/DeploymentScaling'
          type: array
        instance_types:
          items:
            $ref: '#/components/schemas/DeploymentInstanceType'
          type: array
        health_checks:
          items:
            $ref: '#/components/schemas/DeploymentHealthCheck'
          type: array
        volumes:
          items:
            $ref: '#/components/schemas/DeploymentVolume'
          type: array
        config_files:
          items:
            $ref: '#/components/schemas/ConfigFile'
          type: array
        skip_cache:
          type: boolean
        docker:
          $ref: '#/components/schemas/DockerSource'
        git:
          $ref: '#/components/schemas/GitSource'
        database:
          $ref: '#/components/schemas/DatabaseSource'
        archive:
          $ref: '#/components/schemas/ArchiveSource'
      type: object
    DeploymentDefinition.Type:
      default: INVALID
      enum:
      - INVALID
      - WEB
      - WORKER
      - DATABASE
      type: string
    DeploymentEnv:
      example:
        scopes:
        - scopes
        - scopes
        secret: secret
        value: value
        key: key
      properties:
        scopes:
          items:
            type: string
          type: array
        key:
          type: string
        value:
          type: string
        secret:
          type: string
      type: object
    DeploymentEvent:
      example:
        metadata: "{}"
        organization_id: organization_id
        id: id
        deployment_id: deployment_id
        type: type
        message: message
        when: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: string
        when:
          format: date-time
          type: string
        organization_id:
          type: string
        deployment_id:
          type: string
        type:
          type: string
        message:
          type: string
        metadata:
          properties: {}
          type: object
      type: object
    DeploymentInstanceType:
      example:
        scopes:
        - scopes
        - scopes
        type: type
      properties:
        scopes:
          items:
            type: string
          type: array
        type:
          type: string
      type: object
    DeploymentListItem:
      example:
        metadata:
          database:
            neon_postgres:
              reset_role_passwords:
              - reset_role_passwords
              - reset_role_passwords
          git:
            last_provisioned_deployment_id: last_provisioned_deployment_id
          archive:
            last_provisioned_deployment_id: last_provisioned_deployment_id
          trigger:
            actor: null
            git:
              sender_username: sender_username
              provider: null
              repository: repository
              message: message
              branch: branch
              sha: sha
              sender_avatar_url: sender_avatar_url
              sender_profile_url: sender_profile_url
            type: null
        created_at: 2000-01-23T04:56:07.000+00:00
        version: version
        succeeded_at: 2000-01-23T04:56:07.000+00:00
        updated_at: 2000-01-23T04:56:07.000+00:00
        child_id: child_id
        provisioning_info:
          image: image
          stages:
          - finished_at: 2000-01-23T04:56:07.000+00:00
            build_attempts:
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            name: name
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            status: null
          - finished_at: 2000-01-23T04:56:07.000+00:00
            build_attempts:
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            - internal_failure: true
              finished_at: 2000-01-23T04:56:07.000+00:00
              wait_completion: true
              image_pushed: true
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              id: 0
              steps:
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              - finished_at: 2000-01-23T04:56:07.000+00:00
                name: name
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                status: null
              status: null
              retryable_failure: true
            name: name
            messages:
            - messages
            - messages
            started_at: 2000-01-23T04:56:07.000+00:00
            status: null
          sha: sha
        deployment_group: deployment_group
        parent_id: parent_id
        organization_id: organization_id
        service_id: service_id
        started_at: 2000-01-23T04:56:07.000+00:00
        messages:
        - messages
        - messages
        definition:
          instance_types:
          - scopes:
            - scopes
            - scopes
            type: type
          - scopes:
            - scopes
            - scopes
            type: type
          regions:
          - regions
          - regions
          volumes:
          - path: path
            replica_index: 5
            id: id
            scopes:
            - scopes
            - scopes
          - path: path
            replica_index: 5
            id: id
            scopes:
            - scopes
            - scopes
          skip_cache: true
          archive:
            id: id
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          type: null
          ports:
          - protocol: protocol
            port: 6
          - protocol: protocol
            port: 6
          env:
          - scopes:
            - scopes
            - scopes
            secret: secret
            value: value
            key: key
          - scopes:
            - scopes
            - scopes
            secret: secret
            value: value
            key: key
          config_files:
          - path: path
            permissions: permissions
            content: content
          - path: path
            permissions: permissions
            content: content
          docker:
            args:
            - args
            - args
            privileged: true
            image: image
            image_registry_secret: image_registry_secret
            entrypoint:
            - entrypoint
            - entrypoint
            command: command
          routes:
          - path: path
            port: 0
          - path: path
            port: 0
          database:
            neon_postgres:
              databases:
              - owner: owner
                name: name
              - owner: owner
                name: name
              roles:
              - name: name
                secret: secret
              - name: name
                secret: secret
              region: region
              instance_type: instance_type
              pg_version: 2
          git:
            run_command: run_command
            workdir: workdir
            build_command: build_command
            no_deploy_on_push: true
            tag: tag
            repository: repository
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            branch: branch
            sha: sha
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          scalings:
          - min: 1
            max: 5
            scopes:
            - scopes
            - scopes
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          - min: 1
            max: 5
            scopes:
            - scopes
            - scopes
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          health_checks:
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          name: name
          strategy:
            type: null
        id: id
        database_info:
          neon_postgres:
            endpoint_state: endpoint_state
            endpoint_last_active: 2000-01-23T04:56:07.000+00:00
            server_host: server_host
            roles:
            - secret_id: secret_id
              name: name
            - secret_id: secret_id
              name: name
            written_data_bytes: written_data_bytes
            data_transfer_bytes: data_transfer_bytes
            default_branch_state: default_branch_state
            active_time_seconds: active_time_seconds
            default_branch_logical_size: default_branch_logical_size
            default_branch_name: default_branch_name
            server_port: 7
            default_branch_id: default_branch_id
            compute_time_seconds: compute_time_seconds
            data_storage_bytes_hour: data_storage_bytes_hour
        app_id: app_id
        terminated_at: 2000-01-23T04:56:07.000+00:00
        allocated_at: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        id:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        allocated_at:
          format: date-time
          type: string
        started_at:
          format: date-time
          type: string
        succeeded_at:
          format: date-time
          type: string
        terminated_at:
          format: date-time
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
        parent_id:
          type: string
        child_id:
          type: string
        status:
          $ref: '#/components/schemas/Deployment.Status'
        metadata:
          $ref: '#/components/schemas/DeploymentMetadata'
        definition:
          $ref: '#/components/schemas/DeploymentDefinition'
        messages:
          items:
            type: string
          type: array
        provisioning_info:
          $ref: '#/components/schemas/DeploymentProvisioningInfo'
        database_info:
          $ref: '#/components/schemas/DeploymentDatabaseInfo'
        version:
          format: uint64
          type: string
        deployment_group:
          type: string
      type: object
    DeploymentMetadata:
      example:
        database:
          neon_postgres:
            reset_role_passwords:
            - reset_role_passwords
            - reset_role_passwords
        git:
          last_provisioned_deployment_id: last_provisioned_deployment_id
        archive:
          last_provisioned_deployment_id: last_provisioned_deployment_id
        trigger:
          actor: null
          git:
            sender_username: sender_username
            provider: null
            repository: repository
            message: message
            branch: branch
            sha: sha
            sender_avatar_url: sender_avatar_url
            sender_profile_url: sender_profile_url
          type: null
      properties:
        trigger:
          $ref: '#/components/schemas/TriggerDeploymentMetadata'
        database:
          $ref: '#/components/schemas/DatabaseDeploymentMetadata'
        git:
          $ref: '#/components/schemas/GitDeploymentMetadata'
        archive:
          $ref: '#/components/schemas/ArchiveDeploymentMetadata'
      type: object
    DeploymentNeonPostgresDatabaseInfo:
      example:
        endpoint_state: endpoint_state
        endpoint_last_active: 2000-01-23T04:56:07.000+00:00
        server_host: server_host
        roles:
        - secret_id: secret_id
          name: name
        - secret_id: secret_id
          name: name
        written_data_bytes: written_data_bytes
        data_transfer_bytes: data_transfer_bytes
        default_branch_state: default_branch_state
        active_time_seconds: active_time_seconds
        default_branch_logical_size: default_branch_logical_size
        default_branch_name: default_branch_name
        server_port: 7
        default_branch_id: default_branch_id
        compute_time_seconds: compute_time_seconds
        data_storage_bytes_hour: data_storage_bytes_hour
      properties:
        active_time_seconds:
          format: int64
          type: string
        compute_time_seconds:
          format: int64
          type: string
        written_data_bytes:
          format: int64
          type: string
        data_transfer_bytes:
          format: int64
          type: string
        data_storage_bytes_hour:
          format: int64
          type: string
        server_host:
          type: string
        server_port:
          format: int64
          type: integer
        endpoint_state:
          type: string
        endpoint_last_active:
          format: date-time
          type: string
        default_branch_id:
          type: string
        default_branch_name:
          type: string
        default_branch_state:
          type: string
        default_branch_logical_size:
          format: int64
          type: string
        roles:
          items:
            $ref: '#/components/schemas/DeploymentNeonPostgresDatabaseInfoRole'
          type: array
      type: object
    DeploymentNeonPostgresDatabaseInfoRole:
      example:
        secret_id: secret_id
        name: name
      properties:
        name:
          type: string
        secret_id:
          type: string
      type: object
    DeploymentPort:
      example:
        protocol: protocol
        port: 6
      properties:
        port:
          format: int64
          type: integer
        protocol:
          title: "One of http, http2, tcp"
          type: string
      type: object
    DeploymentRoute:
      example:
        path: path
        port: 0
      properties:
        port:
          format: int64
          type: integer
        path:
          type: string
      type: object
    DeploymentScaling:
      example:
        min: 1
        max: 5
        scopes:
        - scopes
        - scopes
        targets:
        - average_mem:
            value: 2
          requests_per_second:
            value: 7
          average_cpu:
            value: 5
          requests_response_time:
            quantile: 2
            value: 3
          concurrent_requests:
            value: 9
          sleep_idle_delay:
            value: 4
        - average_mem:
            value: 2
          requests_per_second:
            value: 7
          average_cpu:
            value: 5
          requests_response_time:
            quantile: 2
            value: 3
          concurrent_requests:
            value: 9
          sleep_idle_delay:
            value: 4
      properties:
        scopes:
          items:
            type: string
          type: array
        min:
          format: int64
          type: integer
        max:
          format: int64
          type: integer
        targets:
          items:
            $ref: '#/components/schemas/DeploymentScalingTarget'
          type: array
      type: object
    DeploymentVolume:
      example:
        path: path
        replica_index: 5
        id: id
        scopes:
        - scopes
        - scopes
      properties:
        id:
          title: the id of the volume
          type: string
        path:
          title: the path where the volume is mounted to
          type: string
        replica_index:
          format: int64
          title: "optionally, explicitly choose the replica index to mount the volume\
            \ to"
          type: integer
        scopes:
          items:
            type: string
          title: scope of the associated
          type: array
      type: object
    GetDeploymentReply:
      example:
        deployment:
          metadata:
            database:
              neon_postgres:
                reset_role_passwords:
                - reset_role_passwords
                - reset_role_passwords
            git:
              last_provisioned_deployment_id: last_provisioned_deployment_id
            archive:
              last_provisioned_deployment_id: last_provisioned_deployment_id
            trigger:
              actor: null
              git:
                sender_username: sender_username
                provider: null
                repository: repository
                message: message
                branch: branch
                sha: sha
                sender_avatar_url: sender_avatar_url
                sender_profile_url: sender_profile_url
              type: null
          role: null
          created_at: 2000-01-23T04:56:07.000+00:00
          skip_build: true
          version: version
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          child_id: child_id
          provisioning_info:
            image: image
            stages:
            - finished_at: 2000-01-23T04:56:07.000+00:00
              build_attempts:
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            - finished_at: 2000-01-23T04:56:07.000+00:00
              build_attempts:
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            sha: sha
          deployment_group: deployment_group
          parent_id: parent_id
          organization_id: organization_id
          service_id: service_id
          started_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          definition:
            instance_types:
            - scopes:
              - scopes
              - scopes
              type: type
            - scopes:
              - scopes
              - scopes
              type: type
            regions:
            - regions
            - regions
            volumes:
            - path: path
              replica_index: 5
              id: id
              scopes:
              - scopes
              - scopes
            - path: path
              replica_index: 5
              id: id
              scopes:
              - scopes
              - scopes
            skip_cache: true
            archive:
              id: id
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            type: null
            ports:
            - protocol: protocol
              port: 6
            - protocol: protocol
              port: 6
            env:
            - scopes:
              - scopes
              - scopes
              secret: secret
              value: value
              key: key
            - scopes:
              - scopes
              - scopes
              secret: secret
              value: value
              key: key
            config_files:
            - path: path
              permissions: permissions
              content: content
            - path: path
              permissions: permissions
              content: content
            docker:
              args:
              - args
              - args
              privileged: true
              image: image
              image_registry_secret: image_registry_secret
              entrypoint:
              - entrypoint
              - entrypoint
              command: command
            routes:
            - path: path
              port: 0
            - path: path
              port: 0
            database:
              neon_postgres:
                databases:
                - owner: owner
                  name: name
                - owner: owner
                  name: name
                roles:
                - name: name
                  secret: secret
                - name: name
                  secret: secret
                region: region
                instance_type: instance_type
                pg_version: 2
            git:
              run_command: run_command
              workdir: workdir
              build_command: build_command
              no_deploy_on_push: true
              tag: tag
              repository: repository
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              branch: branch
              sha: sha
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            scalings:
            - min: 1
              max: 5
              scopes:
              - scopes
              - scopes
              targets:
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
            - min: 1
              max: 5
              scopes:
              - scopes
              - scopes
              targets:
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
            health_checks:
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            name: name
            strategy:
              type: null
          id: id
          database_info:
            neon_postgres:
              endpoint_state: endpoint_state
              endpoint_last_active: 2000-01-23T04:56:07.000+00:00
              server_host: server_host
              roles:
              - secret_id: secret_id
                name: name
              - secret_id: secret_id
                name: name
              written_data_bytes: written_data_bytes
              data_transfer_bytes: data_transfer_bytes
              default_branch_state: default_branch_state
              active_time_seconds: active_time_seconds
              default_branch_logical_size: default_branch_logical_size
              default_branch_name: default_branch_name
              server_port: 7
              default_branch_id: default_branch_id
              compute_time_seconds: compute_time_seconds
              data_storage_bytes_hour: data_storage_bytes_hour
          app_id: app_id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          allocated_at: 2000-01-23T04:56:07.000+00:00
          status: null
      properties:
        deployment:
          $ref: '#/components/schemas/Deployment'
      type: object
    GitDeploymentMetadata:
      example:
        last_provisioned_deployment_id: last_provisioned_deployment_id
      properties:
        last_provisioned_deployment_id:
          type: string
      type: object
    ListDeploymentEventsReply:
      example:
        offset: 6
        limit: 0
        has_next: true
        events:
        - metadata: "{}"
          organization_id: organization_id
          id: id
          deployment_id: deployment_id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
        - metadata: "{}"
          organization_id: organization_id
          id: id
          deployment_id: deployment_id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
        order: order
      properties:
        events:
          items:
            $ref: '#/components/schemas/DeploymentEvent'
          title: The collection of events
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        order:
          title: The order in the request
          type: string
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    ListDeploymentsReply:
      example:
        deployments:
        - metadata:
            database:
              neon_postgres:
                reset_role_passwords:
                - reset_role_passwords
                - reset_role_passwords
            git:
              last_provisioned_deployment_id: last_provisioned_deployment_id
            archive:
              last_provisioned_deployment_id: last_provisioned_deployment_id
            trigger:
              actor: null
              git:
                sender_username: sender_username
                provider: null
                repository: repository
                message: message
                branch: branch
                sha: sha
                sender_avatar_url: sender_avatar_url
                sender_profile_url: sender_profile_url
              type: null
          created_at: 2000-01-23T04:56:07.000+00:00
          version: version
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          child_id: child_id
          provisioning_info:
            image: image
            stages:
            - finished_at: 2000-01-23T04:56:07.000+00:00
              build_attempts:
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            - finished_at: 2000-01-23T04:56:07.000+00:00
              build_attempts:
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            sha: sha
          deployment_group: deployment_group
          parent_id: parent_id
          organization_id: organization_id
          service_id: service_id
          started_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          definition:
            instance_types:
            - scopes:
              - scopes
              - scopes
              type: type
            - scopes:
              - scopes
              - scopes
              type: type
            regions:
            - regions
            - regions
            volumes:
            - path: path
              replica_index: 5
              id: id
              scopes:
              - scopes
              - scopes
            - path: path
              replica_index: 5
              id: id
              scopes:
              - scopes
              - scopes
            skip_cache: true
            archive:
              id: id
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            type: null
            ports:
            - protocol: protocol
              port: 6
            - protocol: protocol
              port: 6
            env:
            - scopes:
              - scopes
              - scopes
              secret: secret
              value: value
              key: key
            - scopes:
              - scopes
              - scopes
              secret: secret
              value: value
              key: key
            config_files:
            - path: path
              permissions: permissions
              content: content
            - path: path
              permissions: permissions
              content: content
            docker:
              args:
              - args
              - args
              privileged: true
              image: image
              image_registry_secret: image_registry_secret
              entrypoint:
              - entrypoint
              - entrypoint
              command: command
            routes:
            - path: path
              port: 0
            - path: path
              port: 0
            database:
              neon_postgres:
                databases:
                - owner: owner
                  name: name
                - owner: owner
                  name: name
                roles:
                - name: name
                  secret: secret
                - name: name
                  secret: secret
                region: region
                instance_type: instance_type
                pg_version: 2
            git:
              run_command: run_command
              workdir: workdir
              build_command: build_command
              no_deploy_on_push: true
              tag: tag
              repository: repository
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              branch: branch
              sha: sha
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            scalings:
            - min: 1
              max: 5
              scopes:
              - scopes
              - scopes
              targets:
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
            - min: 1
              max: 5
              scopes:
              - scopes
              - scopes
              targets:
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
            health_checks:
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            name: name
            strategy:
              type: null
          id: id
          database_info:
            neon_postgres:
              endpoint_state: endpoint_state
              endpoint_last_active: 2000-01-23T04:56:07.000+00:00
              server_host: server_host
              roles:
              - secret_id: secret_id
                name: name
              - secret_id: secret_id
                name: name
              written_data_bytes: written_data_bytes
              data_transfer_bytes: data_transfer_bytes
              default_branch_state: default_branch_state
              active_time_seconds: active_time_seconds
              default_branch_logical_size: default_branch_logical_size
              default_branch_name: default_branch_name
              server_port: 7
              default_branch_id: default_branch_id
              compute_time_seconds: compute_time_seconds
              data_storage_bytes_hour: data_storage_bytes_hour
          app_id: app_id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          allocated_at: 2000-01-23T04:56:07.000+00:00
          status: null
        - metadata:
            database:
              neon_postgres:
                reset_role_passwords:
                - reset_role_passwords
                - reset_role_passwords
            git:
              last_provisioned_deployment_id: last_provisioned_deployment_id
            archive:
              last_provisioned_deployment_id: last_provisioned_deployment_id
            trigger:
              actor: null
              git:
                sender_username: sender_username
                provider: null
                repository: repository
                message: message
                branch: branch
                sha: sha
                sender_avatar_url: sender_avatar_url
                sender_profile_url: sender_profile_url
              type: null
          created_at: 2000-01-23T04:56:07.000+00:00
          version: version
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          child_id: child_id
          provisioning_info:
            image: image
            stages:
            - finished_at: 2000-01-23T04:56:07.000+00:00
              build_attempts:
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            - finished_at: 2000-01-23T04:56:07.000+00:00
              build_attempts:
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            sha: sha
          deployment_group: deployment_group
          parent_id: parent_id
          organization_id: organization_id
          service_id: service_id
          started_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          definition:
            instance_types:
            - scopes:
              - scopes
              - scopes
              type: type
            - scopes:
              - scopes
              - scopes
              type: type
            regions:
            - regions
            - regions
            volumes:
            - path: path
              replica_index: 5
              id: id
              scopes:
              - scopes
              - scopes
            - path: path
              replica_index: 5
              id: id
              scopes:
              - scopes
              - scopes
            skip_cache: true
            archive:
              id: id
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            type: null
            ports:
            - protocol: protocol
              port: 6
            - protocol: protocol
              port: 6
            env:
            - scopes:
              - scopes
              - scopes
              secret: secret
              value: value
              key: key
            - scopes:
              - scopes
              - scopes
              secret: secret
              value: value
              key: key
            config_files:
            - path: path
              permissions: permissions
              content: content
            - path: path
              permissions: permissions
              content: content
            docker:
              args:
              - args
              - args
              privileged: true
              image: image
              image_registry_secret: image_registry_secret
              entrypoint:
              - entrypoint
              - entrypoint
              command: command
            routes:
            - path: path
              port: 0
            - path: path
              port: 0
            database:
              neon_postgres:
                databases:
                - owner: owner
                  name: name
                - owner: owner
                  name: name
                roles:
                - name: name
                  secret: secret
                - name: name
                  secret: secret
                region: region
                instance_type: instance_type
                pg_version: 2
            git:
              run_command: run_command
              workdir: workdir
              build_command: build_command
              no_deploy_on_push: true
              tag: tag
              repository: repository
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              branch: branch
              sha: sha
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            scalings:
            - min: 1
              max: 5
              scopes:
              - scopes
              - scopes
              targets:
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
            - min: 1
              max: 5
              scopes:
              - scopes
              - scopes
              targets:
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
            health_checks:
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            name: name
            strategy:
              type: null
          id: id
          database_info:
            neon_postgres:
              endpoint_state: endpoint_state
              endpoint_last_active: 2000-01-23T04:56:07.000+00:00
              server_host: server_host
              roles:
              - secret_id: secret_id
                name: name
              - secret_id: secret_id
                name: name
              written_data_bytes: written_data_bytes
              data_transfer_bytes: data_transfer_bytes
              default_branch_state: default_branch_state
              active_time_seconds: active_time_seconds
              default_branch_logical_size: default_branch_logical_size
              default_branch_name: default_branch_name
              server_port: 7
              default_branch_id: default_branch_id
              compute_time_seconds: compute_time_seconds
              data_storage_bytes_hour: data_storage_bytes_hour
          app_id: app_id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          allocated_at: 2000-01-23T04:56:07.000+00:00
          status: null
        offset: 3
        limit: 9
        count: 2
        has_next: true
      properties:
        deployments:
          items:
            $ref: '#/components/schemas/DeploymentListItem'
          title: The collection of deployments
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    NeonPostgresDatabase:
      example:
        databases:
        - owner: owner
          name: name
        - owner: owner
          name: name
        roles:
        - name: name
          secret: secret
        - name: name
          secret: secret
        region: region
        instance_type: instance_type
        pg_version: 2
      properties:
        pg_version:
          format: int64
          type: integer
        region:
          type: string
        instance_type:
          type: string
        roles:
          items:
            $ref: '#/components/schemas/NeonPostgresDatabase.NeonRole'
          type: array
        databases:
          items:
            $ref: '#/components/schemas/NeonPostgresDatabase.NeonDatabase'
          type: array
      type: object
    NeonPostgresDatabase.NeonDatabase:
      example:
        owner: owner
        name: name
      properties:
        name:
          type: string
        owner:
          type: string
      type: object
    NeonPostgresDatabase.NeonRole:
      example:
        name: name
        secret: secret
      properties:
        name:
          type: string
        secret:
          type: string
      type: object
    NeonPostgresDatabaseDeploymentMetadata:
      example:
        reset_role_passwords:
        - reset_role_passwords
        - reset_role_passwords
      properties:
        reset_role_passwords:
          items:
            type: string
          type: array
      type: object
    TriggerDeploymentMetadata:
      example:
        actor: null
        git:
          sender_username: sender_username
          provider: null
          repository: repository
          message: message
          branch: branch
          sha: sha
          sender_avatar_url: sender_avatar_url
          sender_profile_url: sender_profile_url
        type: null
      properties:
        type:
          $ref: '#/components/schemas/TriggerDeploymentMetadata.TriggerType'
        actor:
          $ref: '#/components/schemas/TriggerDeploymentMetadata.ActorType'
        git:
          $ref: '#/components/schemas/TriggerGitDeploymentMetadata'
      type: object
    TriggerDeploymentMetadata.ActorType:
      default: UNKNOWN_ACTOR
      enum:
      - UNKNOWN_ACTOR
      - USER
      - SYSTEM
      type: string
    TriggerDeploymentMetadata.TriggerType:
      default: UNKNOWN_TYPE
      enum:
      - UNKNOWN_TYPE
      - GIT
      - RESUME
      - DATABASE_SYNC
      type: string
    TriggerGitDeploymentMetadata:
      example:
        sender_username: sender_username
        provider: null
        repository: repository
        message: message
        branch: branch
        sha: sha
        sender_avatar_url: sender_avatar_url
        sender_profile_url: sender_profile_url
      properties:
        provider:
          $ref: '#/components/schemas/TriggerGitDeploymentMetadata.Provider'
        repository:
          type: string
        branch:
          type: string
        sha:
          type: string
        message:
          type: string
        sender_username:
          type: string
        sender_avatar_url:
          type: string
        sender_profile_url:
          type: string
      type: object
    TriggerGitDeploymentMetadata.Provider:
      default: UNKNOWN
      enum:
      - UNKNOWN
      - GITHUB
      type: string
    AzureContainerRegistryConfiguration:
      example:
        password: password
        registry_name: registry_name
        username: username
      properties:
        registry_name:
          type: string
        username:
          type: string
        password:
          type: string
      type: object
    CreateSecret:
      example:
        gcp_container_registry:
          keyfile_content: keyfile_content
          url: url
        github_registry:
          password: password
          username: username
        private_registry:
          password: password
          url: url
          username: username
        gitlab_registry:
          password: password
          username: username
        name: name
        azure_container_registry:
          password: password
          registry_name: registry_name
          username: username
        type: null
        value: value
        docker_hub_registry:
          password: password
          username: username
        digital_ocean_registry:
          password: password
          username: username
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/SecretType'
        value:
          type: string
        docker_hub_registry:
          $ref: '#/components/schemas/DockerHubRegistryConfiguration'
        private_registry:
          $ref: '#/components/schemas/PrivateRegistryConfiguration'
        digital_ocean_registry:
          $ref: '#/components/schemas/DigitalOceanRegistryConfiguration'
        github_registry:
          $ref: '#/components/schemas/GitHubRegistryConfiguration'
        gitlab_registry:
          $ref: '#/components/schemas/GitLabRegistryConfiguration'
        gcp_container_registry:
          $ref: '#/components/schemas/GCPContainerRegistryConfiguration'
        azure_container_registry:
          $ref: '#/components/schemas/AzureContainerRegistryConfiguration'
      type: object
    CreateSecretReply:
      example:
        secret:
          created_at: 2000-01-23T04:56:07.000+00:00
          azure_container_registry:
            password: password
            registry_name: registry_name
            username: username
          type: null
          digital_ocean_registry:
            password: password
            username: username
          gcp_container_registry:
            keyfile_content: keyfile_content
            url: url
          updated_at: 2000-01-23T04:56:07.000+00:00
          github_registry:
            password: password
            username: username
          database_role_password:
            password: password
            username: username
          organization_id: organization_id
          private_registry:
            password: password
            url: url
            username: username
          gitlab_registry:
            password: password
            username: username
          name: name
          id: id
          value: value
          docker_hub_registry:
            password: password
            username: username
      properties:
        secret:
          $ref: '#/components/schemas/Secret'
      type: object
    DatabaseRolePassword:
      example:
        password: password
        username: username
      properties:
        username:
          type: string
        password:
          type: string
      type: object
    DeleteSecretReply:
      type: object
    DigitalOceanRegistryConfiguration:
      example:
        password: password
        username: username
      properties:
        username:
          type: string
        password:
          type: string
      type: object
    DockerHubRegistryConfiguration:
      example:
        password: password
        username: username
      properties:
        username:
          type: string
        password:
          type: string
      type: object
    GCPContainerRegistryConfiguration:
      example:
        keyfile_content: keyfile_content
        url: url
      properties:
        keyfile_content:
          type: string
        url:
          type: string
      type: object
    GetSecretReply:
      example:
        secret:
          created_at: 2000-01-23T04:56:07.000+00:00
          azure_container_registry:
            password: password
            registry_name: registry_name
            username: username
          type: null
          digital_ocean_registry:
            password: password
            username: username
          gcp_container_registry:
            keyfile_content: keyfile_content
            url: url
          updated_at: 2000-01-23T04:56:07.000+00:00
          github_registry:
            password: password
            username: username
          database_role_password:
            password: password
            username: username
          organization_id: organization_id
          private_registry:
            password: password
            url: url
            username: username
          gitlab_registry:
            password: password
            username: username
          name: name
          id: id
          value: value
          docker_hub_registry:
            password: password
            username: username
      properties:
        secret:
          $ref: '#/components/schemas/Secret'
      type: object
    GitHubRegistryConfiguration:
      example:
        password: password
        username: username
      properties:
        username:
          type: string
        password:
          type: string
      type: object
    GitLabRegistryConfiguration:
      example:
        password: password
        username: username
      properties:
        username:
          type: string
        password:
          type: string
      type: object
    ListSecretsReply:
      example:
        offset: 6
        limit: 0
        count: 1
        secrets:
        - created_at: 2000-01-23T04:56:07.000+00:00
          azure_container_registry:
            password: password
            registry_name: registry_name
            username: username
          type: null
          digital_ocean_registry:
            password: password
            username: username
          gcp_container_registry:
            keyfile_content: keyfile_content
            url: url
          updated_at: 2000-01-23T04:56:07.000+00:00
          github_registry:
            password: password
            username: username
          database_role_password:
            password: password
            username: username
          organization_id: organization_id
          private_registry:
            password: password
            url: url
            username: username
          gitlab_registry:
            password: password
            username: username
          name: name
          id: id
          value: value
          docker_hub_registry:
            password: password
            username: username
        - created_at: 2000-01-23T04:56:07.000+00:00
          azure_container_registry:
            password: password
            registry_name: registry_name
            username: username
          type: null
          digital_ocean_registry:
            password: password
            username: username
          gcp_container_registry:
            keyfile_content: keyfile_content
            url: url
          updated_at: 2000-01-23T04:56:07.000+00:00
          github_registry:
            password: password
            username: username
          database_role_password:
            password: password
            username: username
          organization_id: organization_id
          private_registry:
            password: password
            url: url
            username: username
          gitlab_registry:
            password: password
            username: username
          name: name
          id: id
          value: value
          docker_hub_registry:
            password: password
            username: username
      properties:
        secrets:
          items:
            $ref: '#/components/schemas/Secret'
          type: array
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
        count:
          format: int64
          type: integer
      type: object
    PrivateRegistryConfiguration:
      example:
        password: password
        url: url
        username: username
      properties:
        username:
          type: string
        password:
          type: string
        url:
          type: string
      type: object
    RevealSecretReply:
      example:
        value: "{}"
      properties:
        value:
          type: object
      type: object
    Secret:
      example:
        created_at: 2000-01-23T04:56:07.000+00:00
        azure_container_registry:
          password: password
          registry_name: registry_name
          username: username
        type: null
        digital_ocean_registry:
          password: password
          username: username
        gcp_container_registry:
          keyfile_content: keyfile_content
          url: url
        updated_at: 2000-01-23T04:56:07.000+00:00
        github_registry:
          password: password
          username: username
        database_role_password:
          password: password
          username: username
        organization_id: organization_id
        private_registry:
          password: password
          url: url
          username: username
        gitlab_registry:
          password: password
          username: username
        name: name
        id: id
        value: value
        docker_hub_registry:
          password: password
          username: username
      properties:
        id:
          type: string
        name:
          type: string
        organization_id:
          type: string
        type:
          $ref: '#/components/schemas/SecretType'
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        value:
          type: string
        docker_hub_registry:
          $ref: '#/components/schemas/DockerHubRegistryConfiguration'
        private_registry:
          $ref: '#/components/schemas/PrivateRegistryConfiguration'
        digital_ocean_registry:
          $ref: '#/components/schemas/DigitalOceanRegistryConfiguration'
        github_registry:
          $ref: '#/components/schemas/GitHubRegistryConfiguration'
        gitlab_registry:
          $ref: '#/components/schemas/GitLabRegistryConfiguration'
        gcp_container_registry:
          $ref: '#/components/schemas/GCPContainerRegistryConfiguration'
        azure_container_registry:
          $ref: '#/components/schemas/AzureContainerRegistryConfiguration'
        database_role_password:
          $ref: '#/components/schemas/DatabaseRolePassword'
      type: object
    SecretType:
      default: SIMPLE
      enum:
      - SIMPLE
      - REGISTRY
      - MANAGED
      type: string
    UpdateSecretReply:
      example:
        secret:
          created_at: 2000-01-23T04:56:07.000+00:00
          azure_container_registry:
            password: password
            registry_name: registry_name
            username: username
          type: null
          digital_ocean_registry:
            password: password
            username: username
          gcp_container_registry:
            keyfile_content: keyfile_content
            url: url
          updated_at: 2000-01-23T04:56:07.000+00:00
          github_registry:
            password: password
            username: username
          database_role_password:
            password: password
            username: username
          organization_id: organization_id
          private_registry:
            password: password
            url: url
            username: username
          gitlab_registry:
            password: password
            username: username
          name: name
          id: id
          value: value
          docker_hub_registry:
            password: password
            username: username
      properties:
        secret:
          $ref: '#/components/schemas/Secret'
      type: object
    CreatePersistentVolumeReply:
      example:
        volume:
          snapshot_id: snapshot_id
          cur_size: 6
          created_at: 2000-01-23T04:56:07.000+00:00
          backing_store: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          max_size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          read_only: true
          organization_id: organization_id
          service_id: service_id
          name: name
          id: id
          region: region
          status: null
      properties:
        volume:
          $ref: '#/components/schemas/PersistentVolume'
      type: object
    CreatePersistentVolumeRequest:
      example:
        volume_type: null
        read_only: true
        snapshot_id: snapshot_id
        name: name
        region: region
        max_size: 0
      properties:
        volume_type:
          $ref: '#/components/schemas/PersistentVolumeBackingStore'
        name:
          title: the volume name
          type: string
        region:
          title: the volume region
          type: string
        read_only:
          title: whether the volume must be set as read only
          type: boolean
        max_size:
          format: int64
          title: the size of the volume (in Gigabyte / GB)
          type: integer
        snapshot_id:
          title: (optional) the id of the snapshot whence the volume comes from
          type: string
      type: object
    DeletePersistentVolumeReply:
      example:
        volume:
          snapshot_id: snapshot_id
          cur_size: 6
          created_at: 2000-01-23T04:56:07.000+00:00
          backing_store: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          max_size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          read_only: true
          organization_id: organization_id
          service_id: service_id
          name: name
          id: id
          region: region
          status: null
      properties:
        volume:
          $ref: '#/components/schemas/PersistentVolume'
      type: object
    GetPersistentVolumeReply:
      example:
        volume:
          snapshot_id: snapshot_id
          cur_size: 6
          created_at: 2000-01-23T04:56:07.000+00:00
          backing_store: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          max_size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          read_only: true
          organization_id: organization_id
          service_id: service_id
          name: name
          id: id
          region: region
          status: null
      properties:
        volume:
          $ref: '#/components/schemas/PersistentVolume'
      type: object
    ListPersistentVolumeEventsReply:
      example:
        offset: 6
        limit: 0
        has_next: true
        events:
        - metadata: "{}"
          persistent_volume_id: persistent_volume_id
          organization_id: organization_id
          id: id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
        - metadata: "{}"
          persistent_volume_id: persistent_volume_id
          organization_id: organization_id
          id: id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
        order: order
      properties:
        events:
          items:
            $ref: '#/components/schemas/PersistentVolumeEvent'
          title: The collection of events
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        order:
          title: The order in the request
          type: string
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    ListPersistentVolumesReply:
      example:
        offset: 5
        volumes:
        - snapshot_id: snapshot_id
          cur_size: 6
          created_at: 2000-01-23T04:56:07.000+00:00
          backing_store: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          max_size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          read_only: true
          organization_id: organization_id
          service_id: service_id
          name: name
          id: id
          region: region
          status: null
        - snapshot_id: snapshot_id
          cur_size: 6
          created_at: 2000-01-23T04:56:07.000+00:00
          backing_store: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          max_size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          read_only: true
          organization_id: organization_id
          service_id: service_id
          name: name
          id: id
          region: region
          status: null
        limit: 1
        has_next: true
      properties:
        volumes:
          items:
            $ref: '#/components/schemas/PersistentVolume'
          title: The collection of persistent volumes
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    PersistentVolume:
      example:
        snapshot_id: snapshot_id
        cur_size: 6
        created_at: 2000-01-23T04:56:07.000+00:00
        backing_store: null
        deleted_at: 2000-01-23T04:56:07.000+00:00
        max_size: 0
        updated_at: 2000-01-23T04:56:07.000+00:00
        read_only: true
        organization_id: organization_id
        service_id: service_id
        name: name
        id: id
        region: region
        status: null
      properties:
        id:
          title: the identifier for the volume object
          type: string
        name:
          title: the volume name
          type: string
        snapshot_id:
          title: (optional) the id of the snapshot whence the volume comes from
          type: string
        created_at:
          format: date-time
          title: creation timestamp
          type: string
        updated_at:
          format: date-time
          title: last change timestamp
          type: string
        deleted_at:
          format: date-time
          title: deletion timestamp
          type: string
        organization_id:
          title: the organization to which the volume belongs to
          type: string
        service_id:
          title: the service_id to which the volume is eventually bound to
          type: string
        region:
          title: the region where the volume exists
          type: string
        read_only:
          title: whether to mount the volume in read-only mode
          type: boolean
        max_size:
          format: int64
          title: the maximum size of the volume (in Gigabyte / GB)
          type: integer
        cur_size:
          format: int64
          title: the used amount of space as measured the last time (in Gigabyte /
            GB)
          type: integer
        status:
          $ref: '#/components/schemas/PersistentVolumeStatus'
        backing_store:
          $ref: '#/components/schemas/PersistentVolumeBackingStore'
      title: The object that represent a volume to handle persistency for deployments
      type: object
    PersistentVolumeBackingStore:
      default: PERSISTENT_VOLUME_BACKING_STORE_INVALID
      enum:
      - PERSISTENT_VOLUME_BACKING_STORE_INVALID
      - PERSISTENT_VOLUME_BACKING_STORE_LOCAL_BLK
      title: |-
        - PERSISTENT_VOLUME_BACKING_STORE_INVALID: zero value, invalid
         - PERSISTENT_VOLUME_BACKING_STORE_LOCAL_BLK: the backing store is a locally reachable block device
      type: string
    PersistentVolumeEvent:
      example:
        metadata: "{}"
        persistent_volume_id: persistent_volume_id
        organization_id: organization_id
        id: id
        type: type
        message: message
        when: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: string
        when:
          format: date-time
          type: string
        organization_id:
          type: string
        persistent_volume_id:
          type: string
        type:
          type: string
        message:
          type: string
        metadata:
          properties: {}
          type: object
      type: object
    PersistentVolumeStatus:
      default: PERSISTENT_VOLUME_STATUS_INVALID
      enum:
      - PERSISTENT_VOLUME_STATUS_INVALID
      - PERSISTENT_VOLUME_STATUS_ATTACHED
      - PERSISTENT_VOLUME_STATUS_DETACHED
      - PERSISTENT_VOLUME_STATUS_DELETING
      - PERSISTENT_VOLUME_STATUS_DELETED
      title: |-
        - PERSISTENT_VOLUME_STATUS_INVALID: zero value, invalid
         - PERSISTENT_VOLUME_STATUS_ATTACHED: the volume is attached to an instance
         - PERSISTENT_VOLUME_STATUS_DETACHED: the volume is free to use
         - PERSISTENT_VOLUME_STATUS_DELETING: the volume will be deleted
         - PERSISTENT_VOLUME_STATUS_DELETED: the volume was deleted
      type: string
    UpdatePersistentVolumeReply:
      example:
        volume:
          snapshot_id: snapshot_id
          cur_size: 6
          created_at: 2000-01-23T04:56:07.000+00:00
          backing_store: null
          deleted_at: 2000-01-23T04:56:07.000+00:00
          max_size: 0
          updated_at: 2000-01-23T04:56:07.000+00:00
          read_only: true
          organization_id: organization_id
          service_id: service_id
          name: name
          id: id
          region: region
          status: null
      properties:
        volume:
          $ref: '#/components/schemas/PersistentVolume'
      type: object
    App:
      example:
        created_at: 2000-01-23T04:56:07.000+00:00
        resumed_at: 2000-01-23T04:56:07.000+00:00
        domains:
        - created_at: 2000-01-23T04:56:07.000+00:00
          intended_cname: intended_cname
          koyeb:
            request_timeout_seconds: 0
          type: null
          cloudflare: "{}"
          version: version
          updated_at: 2000-01-23T04:56:07.000+00:00
          deployment_group: deployment_group
          verified_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          messages:
          - messages
          - messages
          id: id
          app_id: app_id
          status: null
        - created_at: 2000-01-23T04:56:07.000+00:00
          intended_cname: intended_cname
          koyeb:
            request_timeout_seconds: 0
          type: null
          cloudflare: "{}"
          version: version
          updated_at: 2000-01-23T04:56:07.000+00:00
          deployment_group: deployment_group
          verified_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          messages:
          - messages
          - messages
          id: id
          app_id: app_id
          status: null
        version: version
        succeeded_at: 2000-01-23T04:56:07.000+00:00
        paused_at: 2000-01-23T04:56:07.000+00:00
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        name: name
        started_at: 2000-01-23T04:56:07.000+00:00
        messages:
        - messages
        - messages
        id: id
        terminated_at: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        id:
          type: string
        name:
          type: string
        organization_id:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        started_at:
          format: date-time
          type: string
        succeeded_at:
          format: date-time
          type: string
        paused_at:
          format: date-time
          type: string
        resumed_at:
          format: date-time
          type: string
        terminated_at:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/App.Status'
        messages:
          items:
            type: string
          type: array
        version:
          format: uint64
          type: string
        domains:
          items:
            $ref: '#/components/schemas/Domain'
          type: array
      type: object
    App.Status:
      default: STARTING
      enum:
      - STARTING
      - HEALTHY
      - DEGRADED
      - UNHEALTHY
      - DELETING
      - DELETED
      - PAUSING
      - PAUSED
      - RESUMING
      type: string
    AppEvent:
      example:
        metadata: "{}"
        organization_id: organization_id
        id: id
        type: type
        message: message
        when: 2000-01-23T04:56:07.000+00:00
        app_id: app_id
      properties:
        id:
          type: string
        when:
          format: date-time
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        type:
          type: string
        message:
          type: string
        metadata:
          properties: {}
          type: object
      type: object
    AppListItem:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        domains:
        - created_at: 2000-01-23T04:56:07.000+00:00
          intended_cname: intended_cname
          koyeb:
            request_timeout_seconds: 0
          type: null
          cloudflare: "{}"
          version: version
          updated_at: 2000-01-23T04:56:07.000+00:00
          deployment_group: deployment_group
          verified_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          messages:
          - messages
          - messages
          id: id
          app_id: app_id
          status: null
        - created_at: 2000-01-23T04:56:07.000+00:00
          intended_cname: intended_cname
          koyeb:
            request_timeout_seconds: 0
          type: null
          cloudflare: "{}"
          version: version
          updated_at: 2000-01-23T04:56:07.000+00:00
          deployment_group: deployment_group
          verified_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          messages:
          - messages
          - messages
          id: id
          app_id: app_id
          status: null
        messages:
        - messages
        - messages
        id: id
        status: null
      properties:
        id:
          type: string
        name:
          type: string
        organization_id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        domains:
          items:
            $ref: '#/components/schemas/Domain'
          type: array
        status:
          $ref: '#/components/schemas/App.Status'
        messages:
          items:
            type: string
          type: array
      type: object
    CreateApp:
      example:
        name: name
      properties:
        name:
          type: string
      type: object
    CreateAppReply:
      example:
        app:
          created_at: 2000-01-23T04:56:07.000+00:00
          resumed_at: 2000-01-23T04:56:07.000+00:00
          domains:
          - created_at: 2000-01-23T04:56:07.000+00:00
            intended_cname: intended_cname
            koyeb:
              request_timeout_seconds: 0
            type: null
            cloudflare: "{}"
            version: version
            updated_at: 2000-01-23T04:56:07.000+00:00
            deployment_group: deployment_group
            verified_at: 2000-01-23T04:56:07.000+00:00
            organization_id: organization_id
            name: name
            messages:
            - messages
            - messages
            id: id
            app_id: app_id
            status: null
          - created_at: 2000-01-23T04:56:07.000+00:00
            intended_cname: intended_cname
            koyeb:
              request_timeout_seconds: 0
            type: null
            cloudflare: "{}"
            version: version
            updated_at: 2000-01-23T04:56:07.000+00:00
            deployment_group: deployment_group
            verified_at: 2000-01-23T04:56:07.000+00:00
            organization_id: organization_id
            name: name
            messages:
            - messages
            - messages
            id: id
            app_id: app_id
            status: null
          version: version
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          paused_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          started_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          id: id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          status: null
      properties:
        app:
          $ref: '#/components/schemas/App'
      type: object
    DeleteAppReply:
      type: object
    Domain:
      example:
        created_at: 2000-01-23T04:56:07.000+00:00
        intended_cname: intended_cname
        koyeb:
          request_timeout_seconds: 0
        type: null
        cloudflare: "{}"
        version: version
        updated_at: 2000-01-23T04:56:07.000+00:00
        deployment_group: deployment_group
        verified_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        name: name
        messages:
        - messages
        - messages
        id: id
        app_id: app_id
        status: null
      properties:
        id:
          type: string
        organization_id:
          type: string
        name:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/Domain.Status'
        type:
          $ref: '#/components/schemas/Domain.Type'
        app_id:
          type: string
        deployment_group:
          type: string
        verified_at:
          format: date-time
          type: string
        intended_cname:
          type: string
        messages:
          items:
            type: string
          type: array
        version:
          format: uint64
          type: string
        cloudflare:
          type: object
        koyeb:
          $ref: '#/components/schemas/Domain.LoadBalancerKoyeb'
      type: object
    Domain.LoadBalancerCloudflare:
      type: object
    Domain.LoadBalancerKoyeb:
      example:
        request_timeout_seconds: 0
      properties:
        request_timeout_seconds:
          format: int64
          title: Between 100 and 900
          type: integer
      type: object
    Domain.Status:
      default: PENDING
      enum:
      - PENDING
      - ACTIVE
      - ERROR
      - DELETING
      - DELETED
      type: string
    Domain.Type:
      default: AUTOASSIGNED
      enum:
      - AUTOASSIGNED
      - CUSTOM
      title: "- AUTOASSIGNED: Domain like <appName>-<orgName>.koyeb.app"
      type: string
    GetAppReply:
      example:
        app:
          created_at: 2000-01-23T04:56:07.000+00:00
          resumed_at: 2000-01-23T04:56:07.000+00:00
          domains:
          - created_at: 2000-01-23T04:56:07.000+00:00
            intended_cname: intended_cname
            koyeb:
              request_timeout_seconds: 0
            type: null
            cloudflare: "{}"
            version: version
            updated_at: 2000-01-23T04:56:07.000+00:00
            deployment_group: deployment_group
            verified_at: 2000-01-23T04:56:07.000+00:00
            organization_id: organization_id
            name: name
            messages:
            - messages
            - messages
            id: id
            app_id: app_id
            status: null
          - created_at: 2000-01-23T04:56:07.000+00:00
            intended_cname: intended_cname
            koyeb:
              request_timeout_seconds: 0
            type: null
            cloudflare: "{}"
            version: version
            updated_at: 2000-01-23T04:56:07.000+00:00
            deployment_group: deployment_group
            verified_at: 2000-01-23T04:56:07.000+00:00
            organization_id: organization_id
            name: name
            messages:
            - messages
            - messages
            id: id
            app_id: app_id
            status: null
          version: version
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          paused_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          started_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          id: id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          status: null
      properties:
        app:
          $ref: '#/components/schemas/App'
      type: object
    ListAppEventsReply:
      example:
        offset: 6
        limit: 0
        has_next: true
        events:
        - metadata: "{}"
          organization_id: organization_id
          id: id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
          app_id: app_id
        - metadata: "{}"
          organization_id: organization_id
          id: id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
          app_id: app_id
        order: order
      properties:
        events:
          items:
            $ref: '#/components/schemas/AppEvent'
          title: The collection of events
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        order:
          title: The order in the request
          type: string
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    ListAppsReply:
      example:
        offset: 1
        limit: 6
        count: 5
        has_next: true
        apps:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          domains:
          - created_at: 2000-01-23T04:56:07.000+00:00
            intended_cname: intended_cname
            koyeb:
              request_timeout_seconds: 0
            type: null
            cloudflare: "{}"
            version: version
            updated_at: 2000-01-23T04:56:07.000+00:00
            deployment_group: deployment_group
            verified_at: 2000-01-23T04:56:07.000+00:00
            organization_id: organization_id
            name: name
            messages:
            - messages
            - messages
            id: id
            app_id: app_id
            status: null
          - created_at: 2000-01-23T04:56:07.000+00:00
            intended_cname: intended_cname
            koyeb:
              request_timeout_seconds: 0
            type: null
            cloudflare: "{}"
            version: version
            updated_at: 2000-01-23T04:56:07.000+00:00
            deployment_group: deployment_group
            verified_at: 2000-01-23T04:56:07.000+00:00
            organization_id: organization_id
            name: name
            messages:
            - messages
            - messages
            id: id
            app_id: app_id
            status: null
          messages:
          - messages
          - messages
          id: id
          status: null
        - updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          domains:
          - created_at: 2000-01-23T04:56:07.000+00:00
            intended_cname: intended_cname
            koyeb:
              request_timeout_seconds: 0
            type: null
            cloudflare: "{}"
            version: version
            updated_at: 2000-01-23T04:56:07.000+00:00
            deployment_group: deployment_group
            verified_at: 2000-01-23T04:56:07.000+00:00
            organization_id: organization_id
            name: name
            messages:
            - messages
            - messages
            id: id
            app_id: app_id
            status: null
          - created_at: 2000-01-23T04:56:07.000+00:00
            intended_cname: intended_cname
            koyeb:
              request_timeout_seconds: 0
            type: null
            cloudflare: "{}"
            version: version
            updated_at: 2000-01-23T04:56:07.000+00:00
            deployment_group: deployment_group
            verified_at: 2000-01-23T04:56:07.000+00:00
            organization_id: organization_id
            name: name
            messages:
            - messages
            - messages
            id: id
            app_id: app_id
            status: null
          messages:
          - messages
          - messages
          id: id
          status: null
      properties:
        apps:
          items:
            $ref: '#/components/schemas/AppListItem'
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    PauseAppReply:
      type: object
    ResumeAppReply:
      type: object
    UpdateApp:
      example:
        name: name
      properties:
        name:
          type: string
      type: object
    UpdateAppReply:
      example:
        app:
          created_at: 2000-01-23T04:56:07.000+00:00
          resumed_at: 2000-01-23T04:56:07.000+00:00
          domains:
          - created_at: 2000-01-23T04:56:07.000+00:00
            intended_cname: intended_cname
            koyeb:
              request_timeout_seconds: 0
            type: null
            cloudflare: "{}"
            version: version
            updated_at: 2000-01-23T04:56:07.000+00:00
            deployment_group: deployment_group
            verified_at: 2000-01-23T04:56:07.000+00:00
            organization_id: organization_id
            name: name
            messages:
            - messages
            - messages
            id: id
            app_id: app_id
            status: null
          - created_at: 2000-01-23T04:56:07.000+00:00
            intended_cname: intended_cname
            koyeb:
              request_timeout_seconds: 0
            type: null
            cloudflare: "{}"
            version: version
            updated_at: 2000-01-23T04:56:07.000+00:00
            deployment_group: deployment_group
            verified_at: 2000-01-23T04:56:07.000+00:00
            organization_id: organization_id
            name: name
            messages:
            - messages
            - messages
            id: id
            app_id: app_id
            status: null
          version: version
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          paused_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          started_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          id: id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          status: null
      properties:
        app:
          $ref: '#/components/schemas/App'
      type: object
    CreateStageAttemptReply:
      type: object
    DeclareStageProgressReply:
      type: object
    DeclareStepProgressReply:
      type: object
    GetInstanceReply:
      example:
        instance:
          regional_deployment_id: regional_deployment_id
          created_at: 2000-01-23T04:56:07.000+00:00
          datacenter: datacenter
          type: type
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          xyz_deployment_id: xyz_deployment_id
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          service_id: service_id
          hypervisor: hypervisor
          allocation_id: allocation_id
          replica_index: 0
          messages:
          - messages
          - messages
          started_at: 2000-01-23T04:56:07.000+00:00
          id: id
          region: region
          app_id: app_id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          status: null
      properties:
        instance:
          $ref: '#/components/schemas/Instance'
      type: object
    Instance:
      example:
        regional_deployment_id: regional_deployment_id
        created_at: 2000-01-23T04:56:07.000+00:00
        datacenter: datacenter
        type: type
        succeeded_at: 2000-01-23T04:56:07.000+00:00
        xyz_deployment_id: xyz_deployment_id
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        service_id: service_id
        hypervisor: hypervisor
        allocation_id: allocation_id
        replica_index: 0
        messages:
        - messages
        - messages
        started_at: 2000-01-23T04:56:07.000+00:00
        id: id
        region: region
        app_id: app_id
        terminated_at: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        id:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
        regional_deployment_id:
          type: string
        allocation_id:
          type: string
        type:
          type: string
        replica_index:
          format: int64
          type: integer
        region:
          type: string
        datacenter:
          type: string
        hypervisor:
          type: string
        status:
          $ref: '#/components/schemas/Instance.Status'
        messages:
          items:
            type: string
          type: array
        started_at:
          format: date-time
          type: string
        succeeded_at:
          format: date-time
          type: string
        terminated_at:
          format: date-time
          type: string
        xyz_deployment_id:
          description: |-
            WARNING: Please don't use the following attribute.
            Koyeb doesn't guarantee backwards compatible breaking change and reserve the right to completely drop it without notice.
            USE AT YOUR OWN RISK.
          type: string
      type: object
    Instance.Status:
      default: ALLOCATING
      enum:
      - ALLOCATING
      - STARTING
      - HEALTHY
      - UNHEALTHY
      - STOPPING
      - STOPPED
      - ERROR
      - SLEEPING
      type: string
    InstanceEvent:
      example:
        metadata: "{}"
        instance_id: instance_id
        organization_id: organization_id
        id: id
        type: type
        message: message
        when: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: string
        when:
          format: date-time
          type: string
        organization_id:
          type: string
        instance_id:
          type: string
        type:
          type: string
        message:
          type: string
        metadata:
          properties: {}
          type: object
      type: object
    InstanceListItem:
      example:
        regional_deployment_id: regional_deployment_id
        created_at: 2000-01-23T04:56:07.000+00:00
        datacenter: datacenter
        type: type
        xyz_deployment_id: xyz_deployment_id
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        service_id: service_id
        allocation_id: allocation_id
        replica_index: 0
        messages:
        - messages
        - messages
        id: id
        region: region
        app_id: app_id
        status: null
      properties:
        id:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
        regional_deployment_id:
          type: string
        allocation_id:
          type: string
        type:
          type: string
        replica_index:
          format: int64
          type: integer
        region:
          type: string
        datacenter:
          type: string
        status:
          $ref: '#/components/schemas/Instance.Status'
        messages:
          items:
            type: string
          type: array
        xyz_deployment_id:
          description: |-
            WARNING: Please don't use the following attribute.
            Koyeb doesn't guarantee backwards compatible breaking change and reserve the right to completely drop it without notice.
            USE AT YOUR OWN RISK.
          type: string
      type: object
    ListInstanceEventsReply:
      example:
        offset: 6
        limit: 0
        has_next: true
        events:
        - metadata: "{}"
          instance_id: instance_id
          organization_id: organization_id
          id: id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
        - metadata: "{}"
          instance_id: instance_id
          organization_id: organization_id
          id: id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
        order: order
      properties:
        events:
          items:
            $ref: '#/components/schemas/InstanceEvent'
          title: The collection of events
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        order:
          title: The order in the request
          type: string
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    ListInstancesReply:
      example:
        offset: 1
        instances:
        - regional_deployment_id: regional_deployment_id
          created_at: 2000-01-23T04:56:07.000+00:00
          datacenter: datacenter
          type: type
          xyz_deployment_id: xyz_deployment_id
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          service_id: service_id
          allocation_id: allocation_id
          replica_index: 0
          messages:
          - messages
          - messages
          id: id
          region: region
          app_id: app_id
          status: null
        - regional_deployment_id: regional_deployment_id
          created_at: 2000-01-23T04:56:07.000+00:00
          datacenter: datacenter
          type: type
          xyz_deployment_id: xyz_deployment_id
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          service_id: service_id
          allocation_id: allocation_id
          replica_index: 0
          messages:
          - messages
          - messages
          id: id
          region: region
          app_id: app_id
          status: null
        limit: 6
        count: 5
        order: order
      properties:
        instances:
          items:
            $ref: '#/components/schemas/InstanceListItem'
          title: The collection of instances
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
        order:
          title: The order in the request
          type: string
      type: object
    VerifyDockerImageReply:
      example:
        reason: reason
        code: null
        success: true
      properties:
        success:
          title: Whether the image is accessible or not
          type: boolean
        reason:
          title: "(Optional) If the image is not accessible, the reason"
          type: string
        code:
          $ref: '#/components/schemas/VerifyDockerImageReply.ErrCode'
      type: object
    VerifyDockerImageReply.ErrCode:
      default: UNKNOWN
      description: |-
        - UNKNOWN: Default value
         - AUTH_ACCESS_DENIED: The registry denied access to an authenticated request
         - ANON_ACCESS_DENIED: The registry denied access to an anonymous request
         - AUTH_NOT_FOUND: The image has not been found after an authenticated request
         - ANON_NOT_FOUND: The image has not been found after an anonymous request
         - REGISTRY_ERROR: The registry returned an error
         - TIMEOUT: The request to the registry timed out
         - DNS: There was an error trying to resolve the name of the registry
         - MALFORMED: The provided image name is malformed
         - INVALID_OS: The operating system is not supported
         - INVALID_ARCH: The architecture is not supported
      enum:
      - UNKNOWN
      - AUTH_ACCESS_DENIED
      - ANON_ACCESS_DENIED
      - AUTH_NOT_FOUND
      - ANON_NOT_FOUND
      - REGISTRY_ERROR
      - TIMEOUT
      - DNS
      - MALFORMED
      - INVALID_OS
      - INVALID_ARCH
      title: The error code associated to each specific failure mode
      type: string
    AutoRelease:
      example:
        groups:
        - latest_sha: latest_sha
          name: name
          git_ref: git_ref
          repository: repository
        - latest_sha: latest_sha
          name: name
          git_ref: git_ref
          repository: repository
      properties:
        groups:
          items:
            $ref: '#/components/schemas/AutoRelease.Group'
          type: array
      type: object
    AutoRelease.Group:
      example:
        latest_sha: latest_sha
        name: name
        git_ref: git_ref
        repository: repository
      properties:
        name:
          type: string
        repository:
          type: string
        git_ref:
          title: "A git ref to track (.e.g: refs/tags/<tag> or refs/heads/<branch>"
          type: string
        latest_sha:
          title: The last hash that was resolved (used to avoid triggering releases
            when things haven't changed)
          type: string
      title: Configuration extracted from the latest deployment in this deployment_group
      type: object
    AutocompleteReply:
      example:
        user_env:
        - user_env
        - user_env
        system_env:
        - system_env
        - system_env
        secrets:
        - secrets
        - secrets
      properties:
        secrets:
          items:
            type: string
          title: List of available secrets
          type: array
        user_env:
          items:
            type: string
          title: List of available user's environment variables
          type: array
        system_env:
          items:
            type: string
          title: List of available system's environment variables
          type: array
      type: object
    AutocompleteRequest:
      example:
        definition:
          instance_types:
          - scopes:
            - scopes
            - scopes
            type: type
          - scopes:
            - scopes
            - scopes
            type: type
          regions:
          - regions
          - regions
          volumes:
          - path: path
            replica_index: 5
            id: id
            scopes:
            - scopes
            - scopes
          - path: path
            replica_index: 5
            id: id
            scopes:
            - scopes
            - scopes
          skip_cache: true
          archive:
            id: id
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          type: null
          ports:
          - protocol: protocol
            port: 6
          - protocol: protocol
            port: 6
          env:
          - scopes:
            - scopes
            - scopes
            secret: secret
            value: value
            key: key
          - scopes:
            - scopes
            - scopes
            secret: secret
            value: value
            key: key
          config_files:
          - path: path
            permissions: permissions
            content: content
          - path: path
            permissions: permissions
            content: content
          docker:
            args:
            - args
            - args
            privileged: true
            image: image
            image_registry_secret: image_registry_secret
            entrypoint:
            - entrypoint
            - entrypoint
            command: command
          routes:
          - path: path
            port: 0
          - path: path
            port: 0
          database:
            neon_postgres:
              databases:
              - owner: owner
                name: name
              - owner: owner
                name: name
              roles:
              - name: name
                secret: secret
              - name: name
                secret: secret
              region: region
              instance_type: instance_type
              pg_version: 2
          git:
            run_command: run_command
            workdir: workdir
            build_command: build_command
            no_deploy_on_push: true
            tag: tag
            repository: repository
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            branch: branch
            sha: sha
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          scalings:
          - min: 1
            max: 5
            scopes:
            - scopes
            - scopes
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          - min: 1
            max: 5
            scopes:
            - scopes
            - scopes
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          health_checks:
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          name: name
          strategy:
            type: null
      properties:
        definition:
          $ref: '#/components/schemas/DeploymentDefinition'
      type: object
    CreateService:
      example:
        definition:
          instance_types:
          - scopes:
            - scopes
            - scopes
            type: type
          - scopes:
            - scopes
            - scopes
            type: type
          regions:
          - regions
          - regions
          volumes:
          - path: path
            replica_index: 5
            id: id
            scopes:
            - scopes
            - scopes
          - path: path
            replica_index: 5
            id: id
            scopes:
            - scopes
            - scopes
          skip_cache: true
          archive:
            id: id
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          type: null
          ports:
          - protocol: protocol
            port: 6
          - protocol: protocol
            port: 6
          env:
          - scopes:
            - scopes
            - scopes
            secret: secret
            value: value
            key: key
          - scopes:
            - scopes
            - scopes
            secret: secret
            value: value
            key: key
          config_files:
          - path: path
            permissions: permissions
            content: content
          - path: path
            permissions: permissions
            content: content
          docker:
            args:
            - args
            - args
            privileged: true
            image: image
            image_registry_secret: image_registry_secret
            entrypoint:
            - entrypoint
            - entrypoint
            command: command
          routes:
          - path: path
            port: 0
          - path: path
            port: 0
          database:
            neon_postgres:
              databases:
              - owner: owner
                name: name
              - owner: owner
                name: name
              roles:
              - name: name
                secret: secret
              - name: name
                secret: secret
              region: region
              instance_type: instance_type
              pg_version: 2
          git:
            run_command: run_command
            workdir: workdir
            build_command: build_command
            no_deploy_on_push: true
            tag: tag
            repository: repository
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            branch: branch
            sha: sha
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          scalings:
          - min: 1
            max: 5
            scopes:
            - scopes
            - scopes
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          - min: 1
            max: 5
            scopes:
            - scopes
            - scopes
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          health_checks:
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          name: name
          strategy:
            type: null
        app_id: app_id
      properties:
        app_id:
          type: string
        definition:
          $ref: '#/components/schemas/DeploymentDefinition'
      type: object
    CreateServiceReply:
      example:
        service:
          created_at: 2000-01-23T04:56:07.000+00:00
          resumed_at: 2000-01-23T04:56:07.000+00:00
          type: null
          version: version
          last_provisioned_deployment_id: last_provisioned_deployment_id
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          paused_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          started_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          active_deployment_id: active_deployment_id
          id: id
          state:
            desired_deployment:
              groups:
              - name: name
                deployment_ids:
                - deployment_ids
                - deployment_ids
              - name: name
                deployment_ids:
                - deployment_ids
                - deployment_ids
            auto_release:
              groups:
              - latest_sha: latest_sha
                name: name
                git_ref: git_ref
                repository: repository
              - latest_sha: latest_sha
                name: name
                git_ref: git_ref
                repository: repository
          app_id: app_id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          latest_deployment_id: latest_deployment_id
          status: null
      properties:
        service:
          $ref: '#/components/schemas/Service'
      type: object
    DeleteServiceReply:
      type: object
    DesiredDeployment:
      example:
        groups:
        - name: name
          deployment_ids:
          - deployment_ids
          - deployment_ids
        - name: name
          deployment_ids:
          - deployment_ids
          - deployment_ids
      properties:
        groups:
          items:
            $ref: '#/components/schemas/DesiredDeployment.Group'
          type: array
      type: object
    DesiredDeployment.Group:
      example:
        name: name
        deployment_ids:
        - deployment_ids
        - deployment_ids
      properties:
        name:
          type: string
        deployment_ids:
          items:
            type: string
          type: array
      type: object
    GetServiceReply:
      example:
        service:
          created_at: 2000-01-23T04:56:07.000+00:00
          resumed_at: 2000-01-23T04:56:07.000+00:00
          type: null
          version: version
          last_provisioned_deployment_id: last_provisioned_deployment_id
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          paused_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          started_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          active_deployment_id: active_deployment_id
          id: id
          state:
            desired_deployment:
              groups:
              - name: name
                deployment_ids:
                - deployment_ids
                - deployment_ids
              - name: name
                deployment_ids:
                - deployment_ids
                - deployment_ids
            auto_release:
              groups:
              - latest_sha: latest_sha
                name: name
                git_ref: git_ref
                repository: repository
              - latest_sha: latest_sha
                name: name
                git_ref: git_ref
                repository: repository
          app_id: app_id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          latest_deployment_id: latest_deployment_id
          status: null
      properties:
        service:
          $ref: '#/components/schemas/Service'
      type: object
    ListServiceEventsReply:
      example:
        offset: 6
        limit: 0
        has_next: true
        events:
        - metadata: "{}"
          organization_id: organization_id
          service_id: service_id
          id: id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
        - metadata: "{}"
          organization_id: organization_id
          service_id: service_id
          id: id
          type: type
          message: message
          when: 2000-01-23T04:56:07.000+00:00
        order: order
      properties:
        events:
          items:
            $ref: '#/components/schemas/ServiceEvent'
          title: The collection of events
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        order:
          title: The order in the request
          type: string
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    ListServicesReply:
      example:
        offset: 6
        limit: 0
        count: 1
        has_next: true
        services:
        - created_at: 2000-01-23T04:56:07.000+00:00
          type: null
          version: version
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          messages:
          - messages
          - messages
          active_deployment_id: active_deployment_id
          id: id
          state:
            desired_deployment:
              groups:
              - name: name
                deployment_ids:
                - deployment_ids
                - deployment_ids
              - name: name
                deployment_ids:
                - deployment_ids
                - deployment_ids
            auto_release:
              groups:
              - latest_sha: latest_sha
                name: name
                git_ref: git_ref
                repository: repository
              - latest_sha: latest_sha
                name: name
                git_ref: git_ref
                repository: repository
          app_id: app_id
          latest_deployment_id: latest_deployment_id
          status: null
        - created_at: 2000-01-23T04:56:07.000+00:00
          type: null
          version: version
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          messages:
          - messages
          - messages
          active_deployment_id: active_deployment_id
          id: id
          state:
            desired_deployment:
              groups:
              - name: name
                deployment_ids:
                - deployment_ids
                - deployment_ids
              - name: name
                deployment_ids:
                - deployment_ids
                - deployment_ids
            auto_release:
              groups:
              - latest_sha: latest_sha
                name: name
                git_ref: git_ref
                repository: repository
              - latest_sha: latest_sha
                name: name
                git_ref: git_ref
                repository: repository
          app_id: app_id
          latest_deployment_id: latest_deployment_id
          status: null
      properties:
        services:
          items:
            $ref: '#/components/schemas/ServiceListItem'
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
        has_next:
          title: If there is more items after in the collection
          type: boolean
      type: object
    PauseServiceReply:
      type: object
    RedeployReply:
      example:
        deployment:
          metadata:
            database:
              neon_postgres:
                reset_role_passwords:
                - reset_role_passwords
                - reset_role_passwords
            git:
              last_provisioned_deployment_id: last_provisioned_deployment_id
            archive:
              last_provisioned_deployment_id: last_provisioned_deployment_id
            trigger:
              actor: null
              git:
                sender_username: sender_username
                provider: null
                repository: repository
                message: message
                branch: branch
                sha: sha
                sender_avatar_url: sender_avatar_url
                sender_profile_url: sender_profile_url
              type: null
          role: null
          created_at: 2000-01-23T04:56:07.000+00:00
          skip_build: true
          version: version
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          child_id: child_id
          provisioning_info:
            image: image
            stages:
            - finished_at: 2000-01-23T04:56:07.000+00:00
              build_attempts:
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            - finished_at: 2000-01-23T04:56:07.000+00:00
              build_attempts:
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              - internal_failure: true
                finished_at: 2000-01-23T04:56:07.000+00:00
                wait_completion: true
                image_pushed: true
                messages:
                - messages
                - messages
                started_at: 2000-01-23T04:56:07.000+00:00
                id: 0
                steps:
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                - finished_at: 2000-01-23T04:56:07.000+00:00
                  name: name
                  messages:
                  - messages
                  - messages
                  started_at: 2000-01-23T04:56:07.000+00:00
                  status: null
                status: null
                retryable_failure: true
              name: name
              messages:
              - messages
              - messages
              started_at: 2000-01-23T04:56:07.000+00:00
              status: null
            sha: sha
          deployment_group: deployment_group
          parent_id: parent_id
          organization_id: organization_id
          service_id: service_id
          started_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          definition:
            instance_types:
            - scopes:
              - scopes
              - scopes
              type: type
            - scopes:
              - scopes
              - scopes
              type: type
            regions:
            - regions
            - regions
            volumes:
            - path: path
              replica_index: 5
              id: id
              scopes:
              - scopes
              - scopes
            - path: path
              replica_index: 5
              id: id
              scopes:
              - scopes
              - scopes
            skip_cache: true
            archive:
              id: id
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            type: null
            ports:
            - protocol: protocol
              port: 6
            - protocol: protocol
              port: 6
            env:
            - scopes:
              - scopes
              - scopes
              secret: secret
              value: value
              key: key
            - scopes:
              - scopes
              - scopes
              secret: secret
              value: value
              key: key
            config_files:
            - path: path
              permissions: permissions
              content: content
            - path: path
              permissions: permissions
              content: content
            docker:
              args:
              - args
              - args
              privileged: true
              image: image
              image_registry_secret: image_registry_secret
              entrypoint:
              - entrypoint
              - entrypoint
              command: command
            routes:
            - path: path
              port: 0
            - path: path
              port: 0
            database:
              neon_postgres:
                databases:
                - owner: owner
                  name: name
                - owner: owner
                  name: name
                roles:
                - name: name
                  secret: secret
                - name: name
                  secret: secret
                region: region
                instance_type: instance_type
                pg_version: 2
            git:
              run_command: run_command
              workdir: workdir
              build_command: build_command
              no_deploy_on_push: true
              tag: tag
              repository: repository
              buildpack:
                privileged: true
                run_command: run_command
                build_command: build_command
              branch: branch
              sha: sha
              docker:
                args:
                - args
                - args
                privileged: true
                entrypoint:
                - entrypoint
                - entrypoint
                dockerfile: dockerfile
                command: command
                target: target
            scalings:
            - min: 1
              max: 5
              scopes:
              - scopes
              - scopes
              targets:
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
            - min: 1
              max: 5
              scopes:
              - scopes
              - scopes
              targets:
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
              - average_mem:
                  value: 2
                requests_per_second:
                  value: 7
                average_cpu:
                  value: 5
                requests_response_time:
                  quantile: 2
                  value: 3
                concurrent_requests:
                  value: 9
                sleep_idle_delay:
                  value: 4
            health_checks:
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            - tcp:
                port: 6
              restart_limit: 1
              http:
                path: path
                headers:
                - value: value
                  key: key
                - value: value
                  key: key
                method: method
                port: 7
              interval: 1
              grace_period: 7
              timeout: 1
            name: name
            strategy:
              type: null
          id: id
          database_info:
            neon_postgres:
              endpoint_state: endpoint_state
              endpoint_last_active: 2000-01-23T04:56:07.000+00:00
              server_host: server_host
              roles:
              - secret_id: secret_id
                name: name
              - secret_id: secret_id
                name: name
              written_data_bytes: written_data_bytes
              data_transfer_bytes: data_transfer_bytes
              default_branch_state: default_branch_state
              active_time_seconds: active_time_seconds
              default_branch_logical_size: default_branch_logical_size
              default_branch_name: default_branch_name
              server_port: 7
              default_branch_id: default_branch_id
              compute_time_seconds: compute_time_seconds
              data_storage_bytes_hour: data_storage_bytes_hour
          app_id: app_id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          allocated_at: 2000-01-23T04:56:07.000+00:00
          status: null
      properties:
        deployment:
          $ref: '#/components/schemas/Deployment'
      type: object
    RedeployRequest.Info:
      properties:
        deployment_group:
          type: string
        sha:
          type: string
        use_cache:
          type: boolean
        skip_build:
          description: |-
            If set to true, the build stage will be skipped and the image coming from the last successful build step will be used instead.
            The call fails if no previous successful builds happened.
          type: boolean
      type: object
    ResumeServiceReply:
      type: object
    Service:
      example:
        created_at: 2000-01-23T04:56:07.000+00:00
        resumed_at: 2000-01-23T04:56:07.000+00:00
        type: null
        version: version
        last_provisioned_deployment_id: last_provisioned_deployment_id
        succeeded_at: 2000-01-23T04:56:07.000+00:00
        paused_at: 2000-01-23T04:56:07.000+00:00
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        name: name
        started_at: 2000-01-23T04:56:07.000+00:00
        messages:
        - messages
        - messages
        active_deployment_id: active_deployment_id
        id: id
        state:
          desired_deployment:
            groups:
            - name: name
              deployment_ids:
              - deployment_ids
              - deployment_ids
            - name: name
              deployment_ids:
              - deployment_ids
              - deployment_ids
          auto_release:
            groups:
            - latest_sha: latest_sha
              name: name
              git_ref: git_ref
              repository: repository
            - latest_sha: latest_sha
              name: name
              git_ref: git_ref
              repository: repository
        app_id: app_id
        terminated_at: 2000-01-23T04:56:07.000+00:00
        latest_deployment_id: latest_deployment_id
        status: null
      properties:
        id:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        started_at:
          format: date-time
          type: string
        succeeded_at:
          format: date-time
          type: string
        paused_at:
          format: date-time
          type: string
        resumed_at:
          format: date-time
          type: string
        terminated_at:
          format: date-time
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/Service.Type'
        organization_id:
          type: string
        app_id:
          type: string
        status:
          $ref: '#/components/schemas/Service.Status'
        messages:
          items:
            type: string
          type: array
        version:
          format: uint64
          type: string
        active_deployment_id:
          type: string
        latest_deployment_id:
          type: string
        last_provisioned_deployment_id:
          type: string
        state:
          $ref: '#/components/schemas/ServiceState'
      type: object
    Service.Status:
      default: STARTING
      enum:
      - STARTING
      - HEALTHY
      - DEGRADED
      - UNHEALTHY
      - DELETING
      - DELETED
      - PAUSING
      - PAUSED
      - RESUMING
      type: string
    Service.Type:
      default: INVALID_TYPE
      enum:
      - INVALID_TYPE
      - WEB
      - WORKER
      - DATABASE
      type: string
    ServiceEvent:
      example:
        metadata: "{}"
        organization_id: organization_id
        service_id: service_id
        id: id
        type: type
        message: message
        when: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: string
        when:
          format: date-time
          type: string
        organization_id:
          type: string
        service_id:
          type: string
        type:
          type: string
        message:
          type: string
        metadata:
          properties: {}
          type: object
      type: object
    ServiceListItem:
      example:
        created_at: 2000-01-23T04:56:07.000+00:00
        type: null
        version: version
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        name: name
        messages:
        - messages
        - messages
        active_deployment_id: active_deployment_id
        id: id
        state:
          desired_deployment:
            groups:
            - name: name
              deployment_ids:
              - deployment_ids
              - deployment_ids
            - name: name
              deployment_ids:
              - deployment_ids
              - deployment_ids
          auto_release:
            groups:
            - latest_sha: latest_sha
              name: name
              git_ref: git_ref
              repository: repository
            - latest_sha: latest_sha
              name: name
              git_ref: git_ref
              repository: repository
        app_id: app_id
        latest_deployment_id: latest_deployment_id
        status: null
      properties:
        id:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/Service.Type'
        organization_id:
          type: string
        app_id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/Service.Status'
        messages:
          items:
            type: string
          type: array
        version:
          format: uint64
          title: A version updated whenever this state changes (useful for caching)
          type: string
        state:
          $ref: '#/components/schemas/ServiceState'
        active_deployment_id:
          type: string
        latest_deployment_id:
          type: string
      type: object
    ServiceState:
      example:
        desired_deployment:
          groups:
          - name: name
            deployment_ids:
            - deployment_ids
            - deployment_ids
          - name: name
            deployment_ids:
            - deployment_ids
            - deployment_ids
        auto_release:
          groups:
          - latest_sha: latest_sha
            name: name
            git_ref: git_ref
            repository: repository
          - latest_sha: latest_sha
            name: name
            git_ref: git_ref
            repository: repository
      properties:
        desired_deployment:
          $ref: '#/components/schemas/DesiredDeployment'
        auto_release:
          $ref: '#/components/schemas/AutoRelease'
      type: object
    UpdateService:
      example:
        metadata:
          database:
            neon_postgres:
              reset_role_passwords:
              - reset_role_passwords
              - reset_role_passwords
          git:
            last_provisioned_deployment_id: last_provisioned_deployment_id
          archive:
            last_provisioned_deployment_id: last_provisioned_deployment_id
          trigger:
            actor: null
            git:
              sender_username: sender_username
              provider: null
              repository: repository
              message: message
              branch: branch
              sha: sha
              sender_avatar_url: sender_avatar_url
              sender_profile_url: sender_profile_url
            type: null
        save_only: true
        definition:
          instance_types:
          - scopes:
            - scopes
            - scopes
            type: type
          - scopes:
            - scopes
            - scopes
            type: type
          regions:
          - regions
          - regions
          volumes:
          - path: path
            replica_index: 5
            id: id
            scopes:
            - scopes
            - scopes
          - path: path
            replica_index: 5
            id: id
            scopes:
            - scopes
            - scopes
          skip_cache: true
          archive:
            id: id
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          type: null
          ports:
          - protocol: protocol
            port: 6
          - protocol: protocol
            port: 6
          env:
          - scopes:
            - scopes
            - scopes
            secret: secret
            value: value
            key: key
          - scopes:
            - scopes
            - scopes
            secret: secret
            value: value
            key: key
          config_files:
          - path: path
            permissions: permissions
            content: content
          - path: path
            permissions: permissions
            content: content
          docker:
            args:
            - args
            - args
            privileged: true
            image: image
            image_registry_secret: image_registry_secret
            entrypoint:
            - entrypoint
            - entrypoint
            command: command
          routes:
          - path: path
            port: 0
          - path: path
            port: 0
          database:
            neon_postgres:
              databases:
              - owner: owner
                name: name
              - owner: owner
                name: name
              roles:
              - name: name
                secret: secret
              - name: name
                secret: secret
              region: region
              instance_type: instance_type
              pg_version: 2
          git:
            run_command: run_command
            workdir: workdir
            build_command: build_command
            no_deploy_on_push: true
            tag: tag
            repository: repository
            buildpack:
              privileged: true
              run_command: run_command
              build_command: build_command
            branch: branch
            sha: sha
            docker:
              args:
              - args
              - args
              privileged: true
              entrypoint:
              - entrypoint
              - entrypoint
              dockerfile: dockerfile
              command: command
              target: target
          scalings:
          - min: 1
            max: 5
            scopes:
            - scopes
            - scopes
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          - min: 1
            max: 5
            scopes:
            - scopes
            - scopes
            targets:
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
            - average_mem:
                value: 2
              requests_per_second:
                value: 7
              average_cpu:
                value: 5
              requests_response_time:
                quantile: 2
                value: 3
              concurrent_requests:
                value: 9
              sleep_idle_delay:
                value: 4
          health_checks:
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          - tcp:
              port: 6
            restart_limit: 1
            http:
              path: path
              headers:
              - value: value
                key: key
              - value: value
                key: key
              method: method
              port: 7
            interval: 1
            grace_period: 7
            timeout: 1
          name: name
          strategy:
            type: null
        skip_build: true
      properties:
        definition:
          $ref: '#/components/schemas/DeploymentDefinition'
        metadata:
          $ref: '#/components/schemas/DeploymentMetadata'
        skip_build:
          description: |-
            If set to true, the build stage will be skipped and the image coming from the last successful build step will be used instead.
            The call fails if no previous successful builds happened.
          type: boolean
        save_only:
          title: "If set, do not trigger a deployment, only store the new settings"
          type: boolean
      type: object
    UpdateServiceReply:
      example:
        service:
          created_at: 2000-01-23T04:56:07.000+00:00
          resumed_at: 2000-01-23T04:56:07.000+00:00
          type: null
          version: version
          last_provisioned_deployment_id: last_provisioned_deployment_id
          succeeded_at: 2000-01-23T04:56:07.000+00:00
          paused_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          started_at: 2000-01-23T04:56:07.000+00:00
          messages:
          - messages
          - messages
          active_deployment_id: active_deployment_id
          id: id
          state:
            desired_deployment:
              groups:
              - name: name
                deployment_ids:
                - deployment_ids
                - deployment_ids
              - name: name
                deployment_ids:
                - deployment_ids
                - deployment_ids
            auto_release:
              groups:
              - latest_sha: latest_sha
                name: name
                git_ref: git_ref
                repository: repository
              - latest_sha: latest_sha
                name: name
                git_ref: git_ref
                repository: repository
          app_id: app_id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          latest_deployment_id: latest_deployment_id
          status: null
      properties:
        service:
          $ref: '#/components/schemas/Service'
      type: object
    AppUsage:
      example:
        app_name: app_name
        services:
        - regions:
            key:
              instances:
                key:
                  duration_seconds: 0
          service_name: service_name
          service_id: service_id
        - regions:
            key:
              instances:
                key:
                  duration_seconds: 0
          service_name: service_name
          service_id: service_id
        app_id: app_id
      properties:
        app_id:
          type: string
        app_name:
          type: string
        services:
          items:
            $ref: '#/components/schemas/ServiceUsage'
          type: array
      type: object
    GetOrganizationUsageDetailsReply:
      example:
        offset: 1
        limit: 6
        count: 5
        usage_details:
        - regional_deployment_id: regional_deployment_id
          duration_seconds: 0
          service_name: service_name
          app_name: app_name
          instance_id: instance_id
          organization_id: organization_id
          service_id: service_id
          started_at: 2000-01-23T04:56:07.000+00:00
          deployment_id: deployment_id
          region: region
          app_id: app_id
          instance_type: instance_type
          terminated_at: 2000-01-23T04:56:07.000+00:00
        - regional_deployment_id: regional_deployment_id
          duration_seconds: 0
          service_name: service_name
          app_name: app_name
          instance_id: instance_id
          organization_id: organization_id
          service_id: service_id
          started_at: 2000-01-23T04:56:07.000+00:00
          deployment_id: deployment_id
          region: region
          app_id: app_id
          instance_type: instance_type
          terminated_at: 2000-01-23T04:56:07.000+00:00
        order: order
      properties:
        usage_details:
          items:
            $ref: '#/components/schemas/UsageDetails'
          title: The collection of usage instances
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
        order:
          title: The order in the request
          type: string
      type: object
    GetOrganizationUsageReply:
      example:
        usage:
          organization_id: organization_id
          periods:
            key:
              ending_time: 2000-01-23T04:56:07.000+00:00
              starting_time: 2000-01-23T04:56:07.000+00:00
              apps:
              - app_name: app_name
                services:
                - regions:
                    key:
                      instances:
                        key:
                          duration_seconds: 0
                  service_name: service_name
                  service_id: service_id
                - regions:
                    key:
                      instances:
                        key:
                          duration_seconds: 0
                  service_name: service_name
                  service_id: service_id
                app_id: app_id
              - app_name: app_name
                services:
                - regions:
                    key:
                      instances:
                        key:
                          duration_seconds: 0
                  service_name: service_name
                  service_id: service_id
                - regions:
                    key:
                      instances:
                        key:
                          duration_seconds: 0
                  service_name: service_name
                  service_id: service_id
                app_id: app_id
      properties:
        usage:
          $ref: '#/components/schemas/Usage'
      type: object
    InstanceUsage:
      example:
        duration_seconds: 0
      properties:
        duration_seconds:
          format: int64
          type: integer
      type: object
    PeriodUsage:
      example:
        ending_time: 2000-01-23T04:56:07.000+00:00
        starting_time: 2000-01-23T04:56:07.000+00:00
        apps:
        - app_name: app_name
          services:
          - regions:
              key:
                instances:
                  key:
                    duration_seconds: 0
            service_name: service_name
            service_id: service_id
          - regions:
              key:
                instances:
                  key:
                    duration_seconds: 0
            service_name: service_name
            service_id: service_id
          app_id: app_id
        - app_name: app_name
          services:
          - regions:
              key:
                instances:
                  key:
                    duration_seconds: 0
            service_name: service_name
            service_id: service_id
          - regions:
              key:
                instances:
                  key:
                    duration_seconds: 0
            service_name: service_name
            service_id: service_id
          app_id: app_id
      properties:
        starting_time:
          format: date-time
          type: string
        ending_time:
          format: date-time
          type: string
        apps:
          items:
            $ref: '#/components/schemas/AppUsage'
          type: array
      type: object
    RegionUsage:
      example:
        instances:
          key:
            duration_seconds: 0
      properties:
        instances:
          additionalProperties:
            $ref: '#/components/schemas/InstanceUsage'
          type: object
      type: object
    ServiceUsage:
      example:
        regions:
          key:
            instances:
              key:
                duration_seconds: 0
        service_name: service_name
        service_id: service_id
      properties:
        service_id:
          type: string
        service_name:
          type: string
        regions:
          additionalProperties:
            $ref: '#/components/schemas/RegionUsage'
          type: object
      type: object
    Usage:
      example:
        organization_id: organization_id
        periods:
          key:
            ending_time: 2000-01-23T04:56:07.000+00:00
            starting_time: 2000-01-23T04:56:07.000+00:00
            apps:
            - app_name: app_name
              services:
              - regions:
                  key:
                    instances:
                      key:
                        duration_seconds: 0
                service_name: service_name
                service_id: service_id
              - regions:
                  key:
                    instances:
                      key:
                        duration_seconds: 0
                service_name: service_name
                service_id: service_id
              app_id: app_id
            - app_name: app_name
              services:
              - regions:
                  key:
                    instances:
                      key:
                        duration_seconds: 0
                service_name: service_name
                service_id: service_id
              - regions:
                  key:
                    instances:
                      key:
                        duration_seconds: 0
                service_name: service_name
                service_id: service_id
              app_id: app_id
      properties:
        organization_id:
          type: string
        periods:
          additionalProperties:
            $ref: '#/components/schemas/PeriodUsage'
          type: object
      type: object
    UsageDetails:
      example:
        regional_deployment_id: regional_deployment_id
        duration_seconds: 0
        service_name: service_name
        app_name: app_name
        instance_id: instance_id
        organization_id: organization_id
        service_id: service_id
        started_at: 2000-01-23T04:56:07.000+00:00
        deployment_id: deployment_id
        region: region
        app_id: app_id
        instance_type: instance_type
        terminated_at: 2000-01-23T04:56:07.000+00:00
      properties:
        organization_id:
          type: string
        instance_id:
          type: string
        app_id:
          type: string
        app_name:
          type: string
        service_id:
          type: string
        service_name:
          type: string
        regional_deployment_id:
          type: string
        region:
          type: string
        deployment_id:
          type: string
        instance_type:
          type: string
        duration_seconds:
          format: int64
          type: integer
        started_at:
          format: date-time
          type: string
        terminated_at:
          format: date-time
          type: string
      type: object
    CreateDomain:
      example:
        name: name
        koyeb:
          request_timeout_seconds: 0
        type: null
        cloudflare: "{}"
        app_id: app_id
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/Domain.Type'
        app_id:
          title: to auto-attach to an app. Optional
          type: string
        cloudflare:
          type: object
        koyeb:
          $ref: '#/components/schemas/Domain.LoadBalancerKoyeb'
      type: object
    CreateDomainReply:
      example:
        domain:
          created_at: 2000-01-23T04:56:07.000+00:00
          intended_cname: intended_cname
          koyeb:
            request_timeout_seconds: 0
          type: null
          cloudflare: "{}"
          version: version
          updated_at: 2000-01-23T04:56:07.000+00:00
          deployment_group: deployment_group
          verified_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          messages:
          - messages
          - messages
          id: id
          app_id: app_id
          status: null
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
      type: object
    DeleteDomainReply:
      type: object
    GetDomainReply:
      example:
        domain:
          created_at: 2000-01-23T04:56:07.000+00:00
          intended_cname: intended_cname
          koyeb:
            request_timeout_seconds: 0
          type: null
          cloudflare: "{}"
          version: version
          updated_at: 2000-01-23T04:56:07.000+00:00
          deployment_group: deployment_group
          verified_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          messages:
          - messages
          - messages
          id: id
          app_id: app_id
          status: null
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
      type: object
    ListDomainsReply:
      example:
        offset: 6
        limit: 0
        count: 1
        domains:
        - created_at: 2000-01-23T04:56:07.000+00:00
          intended_cname: intended_cname
          koyeb:
            request_timeout_seconds: 0
          type: null
          cloudflare: "{}"
          version: version
          updated_at: 2000-01-23T04:56:07.000+00:00
          deployment_group: deployment_group
          verified_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          messages:
          - messages
          - messages
          id: id
          app_id: app_id
          status: null
        - created_at: 2000-01-23T04:56:07.000+00:00
          intended_cname: intended_cname
          koyeb:
            request_timeout_seconds: 0
          type: null
          cloudflare: "{}"
          version: version
          updated_at: 2000-01-23T04:56:07.000+00:00
          deployment_group: deployment_group
          verified_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          messages:
          - messages
          - messages
          id: id
          app_id: app_id
          status: null
      properties:
        domains:
          items:
            $ref: '#/components/schemas/Domain'
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    RefreshDomainStatusReply:
      type: object
    UpdateDomain:
      example:
        subdomain: subdomain
        app_id: app_id
      properties:
        app_id:
          description: To attach or detach from an app for custom domain.
          type: string
        subdomain:
          description: To change subdomain for auto-assigned domain.
          type: string
      type: object
    UpdateDomainReply:
      example:
        domain:
          created_at: 2000-01-23T04:56:07.000+00:00
          intended_cname: intended_cname
          koyeb:
            request_timeout_seconds: 0
          type: null
          cloudflare: "{}"
          version: version
          updated_at: 2000-01-23T04:56:07.000+00:00
          deployment_group: deployment_group
          verified_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          name: name
          messages:
          - messages
          - messages
          id: id
          app_id: app_id
          status: null
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
      type: object
    Activity:
      example:
        actor:
          metadata: "{}"
          deleted: true
          name: name
          id: id
          type: type
        metadata: "{}"
        verb: verb
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        object:
          metadata: "{}"
          deleted: true
          name: name
          id: id
          type: type
      properties:
        id:
          type: string
        actor:
          $ref: '#/components/schemas/Object'
        object:
          $ref: '#/components/schemas/Object'
        verb:
          type: string
        metadata:
          properties: {}
          type: object
        created_at:
          format: date-time
          type: string
      type: object
    ActivityList:
      example:
        offset: 6
        activities:
        - actor:
            metadata: "{}"
            deleted: true
            name: name
            id: id
            type: type
          metadata: "{}"
          verb: verb
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          object:
            metadata: "{}"
            deleted: true
            name: name
            id: id
            type: type
        - actor:
            metadata: "{}"
            deleted: true
            name: name
            id: id
            type: type
          metadata: "{}"
          verb: verb
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          object:
            metadata: "{}"
            deleted: true
            name: name
            id: id
            type: type
        limit: 0
        has_next: true
      properties:
        activities:
          items:
            $ref: '#/components/schemas/Activity'
          type: array
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
        has_next:
          type: boolean
      type: object
    Notification:
      example:
        is_read: true
        activity:
          actor:
            metadata: "{}"
            deleted: true
            name: name
            id: id
            type: type
          metadata: "{}"
          verb: verb
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          object:
            metadata: "{}"
            deleted: true
            name: name
            id: id
            type: type
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        is_seen: true
      properties:
        id:
          type: string
        activity:
          $ref: '#/components/schemas/Activity'
        is_read:
          type: boolean
        is_seen:
          type: boolean
        created_at:
          format: date-time
          type: string
      type: object
    NotificationList:
      example:
        is_read: true
        offset: 6
        unread: 5
        limit: 0
        count: 1
        is_seen: true
        notifications:
        - is_read: true
          activity:
            actor:
              metadata: "{}"
              deleted: true
              name: name
              id: id
              type: type
            metadata: "{}"
            verb: verb
            created_at: 2000-01-23T04:56:07.000+00:00
            id: id
            object:
              metadata: "{}"
              deleted: true
              name: name
              id: id
              type: type
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          is_seen: true
        - is_read: true
          activity:
            actor:
              metadata: "{}"
              deleted: true
              name: name
              id: id
              type: type
            metadata: "{}"
            verb: verb
            created_at: 2000-01-23T04:56:07.000+00:00
            id: id
            object:
              metadata: "{}"
              deleted: true
              name: name
              id: id
              type: type
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          is_seen: true
        unseen: 5
      properties:
        notifications:
          items:
            $ref: '#/components/schemas/Notification'
          type: array
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
        count:
          format: int64
          type: integer
        is_read:
          type: boolean
        is_seen:
          type: boolean
        unread:
          format: int64
          type: integer
        unseen:
          format: int64
          type: integer
      type: object
    Object:
      example:
        metadata: "{}"
        deleted: true
        name: name
        id: id
        type: type
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        metadata:
          properties: {}
          type: object
        deleted:
          type: boolean
      type: object
    kgitproxy.Branch:
      example:
        provider: null
        organization_id: organization_id
        name: name
        repository_id: repository_id
        id: id
        is_default: true
        is_protected: true
      properties:
        id:
          type: string
        organization_id:
          type: string
        repository_id:
          type: string
        name:
          type: string
        is_default:
          type: boolean
        is_protected:
          type: boolean
        provider:
          $ref: '#/components/schemas/kgitproxy.RepositoryProvider'
      type: object
    kgitproxy.GitHubRepository:
      example:
        github_id: github_id
      properties:
        github_id:
          type: string
      type: object
    kgitproxy.ListBranchesReply:
      example:
        offset: 6
        limit: 0
        count: 1
        branches:
        - provider: null
          organization_id: organization_id
          name: name
          repository_id: repository_id
          id: id
          is_default: true
          is_protected: true
        - provider: null
          organization_id: organization_id
          name: name
          repository_id: repository_id
          id: id
          is_default: true
          is_protected: true
      properties:
        branches:
          description: The collection of branches.
          items:
            $ref: '#/components/schemas/kgitproxy.Branch'
          type: array
        limit:
          description: The limit in the request.
          format: int64
          type: integer
        offset:
          description: The offset in the request.
          format: int64
          type: integer
        count:
          description: The total number of items.
          format: int64
          type: integer
      type: object
    kgitproxy.ListRepositoriesReply:
      example:
        offset: 6
        repositories:
        - is_private: true
          github:
            github_id: github_id
          last_push_date: 2000-01-23T04:56:07.000+00:00
          provider: null
          organization_id: organization_id
          is_disabled: true
          name: name
          description: description
          default_branch: default_branch
          id: id
          url: url
        - is_private: true
          github:
            github_id: github_id
          last_push_date: 2000-01-23T04:56:07.000+00:00
          provider: null
          organization_id: organization_id
          is_disabled: true
          name: name
          description: description
          default_branch: default_branch
          id: id
          url: url
        limit: 0
        count: 1
      properties:
        repositories:
          description: The collection of repositories.
          items:
            $ref: '#/components/schemas/kgitproxy.Repository'
          type: array
        limit:
          description: The limit in the request.
          format: int64
          type: integer
        offset:
          description: The offset in the request.
          format: int64
          type: integer
        count:
          description: The total number of items.
          format: int64
          type: integer
      type: object
    kgitproxy.Repository:
      example:
        is_private: true
        github:
          github_id: github_id
        last_push_date: 2000-01-23T04:56:07.000+00:00
        provider: null
        organization_id: organization_id
        is_disabled: true
        name: name
        description: description
        default_branch: default_branch
        id: id
        url: url
      properties:
        id:
          type: string
        organization_id:
          type: string
        name:
          type: string
        url:
          type: string
        description:
          type: string
        is_private:
          type: boolean
        is_disabled:
          type: boolean
        default_branch:
          type: string
        provider:
          $ref: '#/components/schemas/kgitproxy.RepositoryProvider'
        last_push_date:
          format: date-time
          type: string
        github:
          $ref: '#/components/schemas/kgitproxy.GitHubRepository'
      type: object
    kgitproxy.RepositoryProvider:
      default: INVALID_PROVIDER
      enum:
      - INVALID_PROVIDER
      - GITHUB
      type: string
    kgitproxy.ResyncOrganizationReply:
      type: object
    ksearch.App:
      example:
        organization_id: organization_id
        name: name
        id: id
      properties:
        id:
          type: string
        organization_id:
          type: string
        name:
          type: string
      type: object
    ksearch.GlobalDeployment:
      example:
        organization_id: organization_id
        service_id: service_id
        id: id
        app_id: app_id
      properties:
        id:
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
      type: object
    ksearch.Instance:
      example:
        organization_id: organization_id
        service_id: service_id
        allocation_id: allocation_id
        id: id
        app_id: app_id
      properties:
        id:
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
        allocation_id:
          type: string
      type: object
    ksearch.Organization:
      example:
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    ksearch.RegionalDeployment:
      example:
        organization_id: organization_id
        service_id: service_id
        id: id
        region: region
        app_id: app_id
      properties:
        id:
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        service_id:
          type: string
        region:
          type: string
      type: object
    ksearch.SearchReply:
      example:
        global_deployments:
        - organization_id: organization_id
          service_id: service_id
          id: id
          app_id: app_id
        - organization_id: organization_id
          service_id: service_id
          id: id
          app_id: app_id
        instances:
        - organization_id: organization_id
          service_id: service_id
          allocation_id: allocation_id
          id: id
          app_id: app_id
        - organization_id: organization_id
          service_id: service_id
          allocation_id: allocation_id
          id: id
          app_id: app_id
        regional_deployments:
        - organization_id: organization_id
          service_id: service_id
          id: id
          region: region
          app_id: app_id
        - organization_id: organization_id
          service_id: service_id
          id: id
          region: region
          app_id: app_id
        organizations:
        - name: name
          id: id
        - name: name
          id: id
        services:
        - organization_id: organization_id
          name: name
          id: id
          app_id: app_id
        - organization_id: organization_id
          name: name
          id: id
          app_id: app_id
        users:
        - github_user: github_user
          name: name
          id: id
          email: email
        - github_user: github_user
          name: name
          id: id
          email: email
        apps:
        - organization_id: organization_id
          name: name
          id: id
        - organization_id: organization_id
          name: name
          id: id
      properties:
        organizations:
          items:
            $ref: '#/components/schemas/ksearch.Organization'
          type: array
        users:
          items:
            $ref: '#/components/schemas/ksearch.User'
          type: array
        apps:
          items:
            $ref: '#/components/schemas/ksearch.App'
          type: array
        services:
          items:
            $ref: '#/components/schemas/ksearch.Service'
          type: array
        global_deployments:
          items:
            $ref: '#/components/schemas/ksearch.GlobalDeployment'
          type: array
        regional_deployments:
          items:
            $ref: '#/components/schemas/ksearch.RegionalDeployment'
          type: array
        instances:
          items:
            $ref: '#/components/schemas/ksearch.Instance'
          type: array
      type: object
    ksearch.Service:
      example:
        organization_id: organization_id
        name: name
        id: id
        app_id: app_id
      properties:
        id:
          type: string
        organization_id:
          type: string
        app_id:
          type: string
        name:
          type: string
      type: object
    ksearch.User:
      example:
        github_user: github_user
        name: name
        id: id
        email: email
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        github_user:
          type: string
      type: object
    GetRegionReply:
      example:
        region:
          datacenters:
          - datacenters
          - datacenters
          volumes_enabled: true
          instances:
          - instances
          - instances
          scope: scope
          name: name
          coordinates:
          - coordinates
          - coordinates
          id: id
          status: status
      properties:
        region:
          $ref: '#/components/schemas/Region'
      type: object
    ListRegionsReply:
      example:
        regions:
        - datacenters:
          - datacenters
          - datacenters
          volumes_enabled: true
          instances:
          - instances
          - instances
          scope: scope
          name: name
          coordinates:
          - coordinates
          - coordinates
          id: id
          status: status
        - datacenters:
          - datacenters
          - datacenters
          volumes_enabled: true
          instances:
          - instances
          - instances
          scope: scope
          name: name
          coordinates:
          - coordinates
          - coordinates
          id: id
          status: status
        offset: 6
        limit: 0
        count: 1
      properties:
        regions:
          items:
            $ref: '#/components/schemas/RegionListItem'
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    Region:
      example:
        datacenters:
        - datacenters
        - datacenters
        volumes_enabled: true
        instances:
        - instances
        - instances
        scope: scope
        name: name
        coordinates:
        - coordinates
        - coordinates
        id: id
        status: status
      properties:
        id:
          title: The id of the region
          type: string
        name:
          title: The name of the region
          type: string
        coordinates:
          items:
            type: string
          title: The coordinates of the region (lat/long)
          type: array
        status:
          title: The status of the region
          type: string
        instances:
          items:
            type: string
          title: A list of instances available in this region
          type: array
        datacenters:
          items:
            type: string
          title: A list of datacenters available in this region
          type: array
        volumes_enabled:
          title: Are the volumes enabled for this instance type
          type: boolean
        scope:
          description: "The scope of the region, continent, metropolitan area, etc."
          type: string
      type: object
    RegionListItem:
      example:
        datacenters:
        - datacenters
        - datacenters
        volumes_enabled: true
        instances:
        - instances
        - instances
        scope: scope
        name: name
        coordinates:
        - coordinates
        - coordinates
        id: id
        status: status
      properties:
        id:
          title: The id of the region
          type: string
        name:
          title: The name of the region
          type: string
        coordinates:
          items:
            type: string
          title: The coordinates of the region (lat/long)
          type: array
        status:
          title: The status of the region
          type: string
        instances:
          items:
            type: string
          title: A list of instances available in this region
          type: array
        datacenters:
          items:
            type: string
          title: A list of datacenters available in this region
          type: array
        volumes_enabled:
          title: Are the volumes enabled for this instance type
          type: boolean
        scope:
          description: "The scope of the region, continent, metropolitan area, etc."
          type: string
      type: object
    DatacenterListItem:
      example:
        regions:
        - regions
        - regions
        use_gpu: true
        domain: domain
        region_id: region_id
        coordinates:
        - coordinates
        - coordinates
        id: id
      properties:
        id:
          title: e.g. "par1"
          type: string
        region_id:
          title: e.g. "par"
          type: string
        domain:
          title: e.g. "all-par1.infra.prod.koyeb.com"
          type: string
        coordinates:
          items:
            type: string
          title: "e.g. \"8.856614\" ,\"2.352221\"?"
          type: array
        use_gpu:
          title: e.g. true
          type: boolean
        regions:
          items:
            type: string
          title: "e.g. \"par\", \"fra\""
          type: array
      type: object
    ListDatacentersReply:
      example:
        datacenters:
        - regions:
          - regions
          - regions
          use_gpu: true
          domain: domain
          region_id: region_id
          coordinates:
          - coordinates
          - coordinates
          id: id
        - regions:
          - regions
          - regions
          use_gpu: true
          domain: domain
          region_id: region_id
          coordinates:
          - coordinates
          - coordinates
          id: id
      properties:
        datacenters:
          items:
            $ref: '#/components/schemas/DatacenterListItem'
          type: array
      type: object
    CatalogGPUDetails:
      example:
        memory: memory
        count: 1
        name: name
        brand: brand
      properties:
        count:
          format: int64
          title: The number of GPUs
          type: integer
        brand:
          title: The brand of GPU
          type: string
        memory:
          title: GPU memory
          type: string
        name:
          title: Name of GPU
          type: string
      type: object
    CatalogInstance:
      example:
        volumes_enabled: true
        memory: memory
        regions:
        - regions
        - regions
        aliases:
        - aliases
        - aliases
        vcpu: 0
        description: description
        display_name: display_name
        type: type
        gpu:
          memory: memory
          count: 1
          name: name
          brand: brand
        price_monthly: price_monthly
        require_plan:
        - require_plan
        - require_plan
        disk: disk
        service_types:
        - service_types
        - service_types
        id: id
        price_per_second: price_per_second
        vcpu_shares: 6.0274563
        price_hourly: price_hourly
        status: status
      properties:
        id:
          title: The name of the instance
          type: string
        description:
          title: A short description of the instance
          type: string
        vcpu:
          description: The number of cpus. Deprecated. Use vcpu_shares instead.
          format: int64
          type: integer
        memory:
          title: The memory in bytes in a format like 5MB
          type: string
        disk:
          title: The size of the disk in bytes in a format like 5MB
          type: string
        price_per_second:
          title: The price to pay per second
          type: string
        price_hourly:
          title: The price to pay per hour
          type: string
        price_monthly:
          title: The price to pay per month
          type: string
        regions:
          items:
            type: string
          title: The regions where this instance type is available
          type: array
        status:
          title: The status of the instance
          type: string
        require_plan:
          items:
            type: string
          title: The plan required to use instance
          type: array
        vcpu_shares:
          description: The number of vcpu shares reserved for the instance.
          format: float
          type: number
        display_name:
          title: The display name of the instance
          type: string
        aliases:
          items:
            type: string
          title: Aliases
          type: array
        type:
          title: The type of the instance (e.g. "gpu")
          type: string
        gpu:
          $ref: '#/components/schemas/CatalogGPUDetails'
        service_types:
          items:
            type: string
          title: "Allowed service types for this instance (e.g. [\"web\", \"worker\"\
            ])"
          type: array
        volumes_enabled:
          title: Are the volumes enabled for this instance type
          type: boolean
      type: object
    CatalogInstanceListItem:
      example:
        volumes_enabled: true
        memory: memory
        regions:
        - regions
        - regions
        aliases:
        - aliases
        - aliases
        vcpu: 0
        description: description
        display_name: display_name
        type: type
        gpu:
          memory: memory
          count: 1
          name: name
          brand: brand
        price_monthly: price_monthly
        require_plan:
        - require_plan
        - require_plan
        disk: disk
        service_types:
        - service_types
        - service_types
        id: id
        price_per_second: price_per_second
        vcpu_shares: 6.0274563
        price_hourly: price_hourly
        status: status
      properties:
        id:
          title: The name of the instance
          type: string
        description:
          title: A short description of the instance
          type: string
        vcpu:
          description: The number of cpus. Deprecated. Use vcpu_shares instead.
          format: int64
          type: integer
        memory:
          title: The memory in bytes in a format like 5MB
          type: string
        disk:
          title: The size of the disk in bytes in a format like 5MB
          type: string
        price_per_second:
          title: The price to pay per second
          type: string
        price_hourly:
          title: The price to pay per hour
          type: string
        price_monthly:
          title: The price to pay per month
          type: string
        regions:
          items:
            type: string
          title: The regions where this instance type is available
          type: array
        status:
          title: The status of the instance
          type: string
        require_plan:
          items:
            type: string
          title: The plan required to use instance
          type: array
        vcpu_shares:
          description: The number of vcpu shares reserved for the instance.
          format: float
          type: number
        display_name:
          title: The display name of the instance
          type: string
        aliases:
          items:
            type: string
          title: Aliases
          type: array
        type:
          title: The type of the instance (e.g. "gpu")
          type: string
        gpu:
          $ref: '#/components/schemas/CatalogGPUDetails'
        service_types:
          items:
            type: string
          title: "Allowed service types for this instance (e.g. [\"web\", \"worker\"\
            ])"
          type: array
        volumes_enabled:
          title: Are the volumes enabled for this instance type
          type: boolean
      type: object
    GetCatalogInstanceReply:
      example:
        instance:
          volumes_enabled: true
          memory: memory
          regions:
          - regions
          - regions
          aliases:
          - aliases
          - aliases
          vcpu: 0
          description: description
          display_name: display_name
          type: type
          gpu:
            memory: memory
            count: 1
            name: name
            brand: brand
          price_monthly: price_monthly
          require_plan:
          - require_plan
          - require_plan
          disk: disk
          service_types:
          - service_types
          - service_types
          id: id
          price_per_second: price_per_second
          vcpu_shares: 6.0274563
          price_hourly: price_hourly
          status: status
      properties:
        instance:
          $ref: '#/components/schemas/CatalogInstance'
      type: object
    ListCatalogInstancesReply:
      example:
        offset: 5
        instances:
        - volumes_enabled: true
          memory: memory
          regions:
          - regions
          - regions
          aliases:
          - aliases
          - aliases
          vcpu: 0
          description: description
          display_name: display_name
          type: type
          gpu:
            memory: memory
            count: 1
            name: name
            brand: brand
          price_monthly: price_monthly
          require_plan:
          - require_plan
          - require_plan
          disk: disk
          service_types:
          - service_types
          - service_types
          id: id
          price_per_second: price_per_second
          vcpu_shares: 6.0274563
          price_hourly: price_hourly
          status: status
        - volumes_enabled: true
          memory: memory
          regions:
          - regions
          - regions
          aliases:
          - aliases
          - aliases
          vcpu: 0
          description: description
          display_name: display_name
          type: type
          gpu:
            memory: memory
            count: 1
            name: name
            brand: brand
          price_monthly: price_monthly
          require_plan:
          - require_plan
          - require_plan
          disk: disk
          service_types:
          - service_types
          - service_types
          id: id
          price_per_second: price_per_second
          vcpu_shares: 6.0274563
          price_hourly: price_hourly
          status: status
        limit: 5
        count: 2
      properties:
        instances:
          items:
            $ref: '#/components/schemas/CatalogInstanceListItem'
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    CreateOrganizationInvitationReply:
      example:
        invitation:
          role: null
          expires_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          inviter_id: inviter_id
          inviter:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          id: id
          email: email
          invitee_id: invitee_id
          status: null
          invitee:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
      properties:
        invitation:
          $ref: '#/components/schemas/OrganizationInvitation'
      type: object
    CreateOrganizationInvitationRequest:
      example:
        email: email
      properties:
        email:
          title: The email of the person to invite
          type: string
      type: object
    DeleteOrganizationInvitationReply:
      type: object
    GetOrganizationInvitationReply:
      example:
        invitation:
          role: null
          expires_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          inviter_id: inviter_id
          inviter:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          id: id
          email: email
          invitee_id: invitee_id
          status: null
          invitee:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
      properties:
        invitation:
          $ref: '#/components/schemas/OrganizationInvitation'
      type: object
    ListOrganizationInvitationsReply:
      example:
        offset: 6
        invitations:
        - role: null
          expires_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          inviter_id: inviter_id
          inviter:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          id: id
          email: email
          invitee_id: invitee_id
          status: null
          invitee:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
        - role: null
          expires_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          inviter_id: inviter_id
          inviter:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          id: id
          email: email
          invitee_id: invitee_id
          status: null
          invitee:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
        limit: 0
        count: 1
      properties:
        invitations:
          items:
            $ref: '#/components/schemas/OrganizationInvitation'
          title: The collection of organization invitations
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    Organization.Status:
      default: WARNING
      enum:
      - WARNING
      - LOCKED
      - ACTIVE
      - DEACTIVATING
      - DEACTIVATED
      - DELETING
      - DELETED
      type: string
    OrganizationInvitation:
      example:
        role: null
        expires_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        organization:
          name: name
          id: id
          plan: null
          status: null
        inviter_id: inviter_id
        inviter:
          github_user: github_user
          avatar_url: avatar_url
          name: name
          github_id: github_id
          id: id
          email: email
        id: id
        email: email
        invitee_id: invitee_id
        status: null
        invitee:
          github_user: github_user
          avatar_url: avatar_url
          name: name
          github_id: github_id
          id: id
          email: email
      properties:
        id:
          type: string
        email:
          type: string
        role:
          $ref: '#/components/schemas/UserRole.Role'
        status:
          $ref: '#/components/schemas/OrganizationInvitation.Status'
        expires_at:
          format: date-time
          type: string
        organization_id:
          type: string
        organization:
          $ref: '#/components/schemas/PublicOrganization'
        invitee_id:
          type: string
        invitee:
          $ref: '#/components/schemas/PublicUser'
        inviter_id:
          type: string
        inviter:
          $ref: '#/components/schemas/PublicUser'
      type: object
    OrganizationInvitation.Status:
      default: INVALID
      enum:
      - INVALID
      - PENDING
      - ACCEPTED
      - REFUSED
      - EXPIRED
      type: string
    Plan:
      default: hobby
      enum:
      - hobby
      - starter
      - startup
      - business
      - enterprise
      - internal
      - hobby23
      - no_plan
      - pro
      - scale
      type: string
    PublicOrganization:
      example:
        name: name
        id: id
        plan: null
        status: null
      properties:
        id:
          type: string
        name:
          type: string
        plan:
          $ref: '#/components/schemas/Plan'
        status:
          $ref: '#/components/schemas/Organization.Status'
      type: object
    PublicUser:
      example:
        github_user: github_user
        avatar_url: avatar_url
        name: name
        github_id: github_id
        id: id
        email: email
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        avatar_url:
          type: string
        github_id:
          type: string
        github_user:
          type: string
      type: object
    ResendOrganizationInvitationReply:
      example:
        invitation:
          role: null
          expires_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          inviter_id: inviter_id
          inviter:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          id: id
          email: email
          invitee_id: invitee_id
          status: null
          invitee:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
      properties:
        invitation:
          $ref: '#/components/schemas/OrganizationInvitation'
      type: object
    UserRole.Role:
      default: INVALID
      enum:
      - INVALID
      - OWNER
      type: string
    AppsSummary:
      example:
        total: total
        by_status:
          key: by_status
      properties:
        total:
          format: int64
          title: Total number of apps
          type: string
        by_status:
          additionalProperties:
            format: int64
            type: string
          title: Number of apps grouped by status
          type: object
      type: object
    DomainsSummary:
      example:
        total: total
        by_status:
          key: by_status
      properties:
        total:
          format: int64
          title: Total number of domains
          type: string
        by_status:
          additionalProperties:
            format: int64
            type: string
          title: Number of domains grouped by status
          type: object
      type: object
    GetOrganizationSummaryReply:
      example:
        summary:
          instances:
            total: total
            by_type:
              key: by_type
          organization_id: organization_id
          members:
            total: total
            invitations_by_status:
              key: invitations_by_status
          domains:
            total: total
            by_status:
              key: by_status
          neon_postgres:
            total: total
            by_instance_type:
              key: by_instance_type
          services:
            key:
              total: total
              by_status:
                key: by_status
          secrets:
            total: total
            by_type:
              key: by_type
          apps:
            total: total
            by_status:
              key: by_status
      properties:
        summary:
          $ref: '#/components/schemas/OrganizationSummary'
      type: object
    InstancesSummary:
      example:
        total: total
        by_type:
          key: by_type
      properties:
        total:
          format: int64
          title: Total number of instances
          type: string
        by_type:
          additionalProperties:
            format: int64
            type: string
          title: Number of instances grouped by type
          type: object
      type: object
    MembersSummary:
      example:
        total: total
        invitations_by_status:
          key: invitations_by_status
      properties:
        total:
          format: int64
          title: Number of members
          type: string
        invitations_by_status:
          additionalProperties:
            format: int64
            type: string
          title: Number of invitations grouped by status
          type: object
      type: object
    NeonPostgresSummary:
      example:
        total: total
        by_instance_type:
          key: by_instance_type
      properties:
        total:
          format: int64
          title: Total number of databases
          type: string
        by_instance_type:
          additionalProperties:
            format: int64
            type: string
          title: Number of databases grouped by instance type
          type: object
      type: object
    OrganizationSummary:
      example:
        instances:
          total: total
          by_type:
            key: by_type
        organization_id: organization_id
        members:
          total: total
          invitations_by_status:
            key: invitations_by_status
        domains:
          total: total
          by_status:
            key: by_status
        neon_postgres:
          total: total
          by_instance_type:
            key: by_instance_type
        services:
          key:
            total: total
            by_status:
              key: by_status
        secrets:
          total: total
          by_type:
            key: by_type
        apps:
          total: total
          by_status:
            key: by_status
      properties:
        organization_id:
          type: string
        instances:
          $ref: '#/components/schemas/InstancesSummary'
        apps:
          $ref: '#/components/schemas/AppsSummary'
        services:
          additionalProperties:
            $ref: '#/components/schemas/ServiceSummary'
          title: Number of services grouped by type
          type: object
        domains:
          $ref: '#/components/schemas/DomainsSummary'
        secrets:
          $ref: '#/components/schemas/SecretsSummary'
        neon_postgres:
          $ref: '#/components/schemas/NeonPostgresSummary'
        members:
          $ref: '#/components/schemas/MembersSummary'
      type: object
    SecretsSummary:
      example:
        total: total
        by_type:
          key: by_type
      properties:
        total:
          format: int64
          title: Total number of secrets
          type: string
        by_type:
          additionalProperties:
            format: int64
            type: string
          title: Number of secrets grouped by type
          type: object
      type: object
    ServiceSummary:
      example:
        total: total
        by_status:
          key: by_status
      properties:
        total:
          format: int64
          title: Total number of services
          type: string
        by_status:
          additionalProperties:
            format: int64
            type: string
          title: Number of services grouped by status
          type: object
      type: object
    LoginReply:
      example:
        token:
          id: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          expires: 2022-09-08T14:00:00Z
          user_id: 996d7822-6b58-11e9-956f-32001b70f000
          organization_id: 9f33b2c6-6b58-11e9-883c-32001b70f000
      properties:
        token:
          $ref: '#/components/schemas/Token'
      type: object
    LoginRequest:
      example:
        email: john@snow.com
        password: '...'
      properties:
        email:
          title: User email
          type: string
        password:
          title: User password
          type: string
        organization_id:
          title: (Optional) Login into this organization
          type: string
      type: object
    LogoutReply:
      type: object
    Token:
      example:
        id: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expires: 2022-09-08T14:00:00Z
        user_id: 996d7822-6b58-11e9-956f-32001b70f000
        organization_id: 9f33b2c6-6b58-11e9-883c-32001b70f000
      properties:
        id:
          type: string
        user_id:
          type: string
        organization_id:
          type: string
        expires_at:
          format: date-time
          type: string
      type: object
    DomainLoadBalancerQuotas:
      example:
        max_koyeb: 5
      properties:
        max_koyeb:
          format: int64
          type: integer
      type: object
    GetQuotasReply:
      example:
        quotas:
          instance_types:
          - instance_types
          - instance_types
          regions:
          - regions
          - regions
          max_organization_members: max_organization_members
          custom_domains: custom_domains
          domains: domains
          services: services
          services_by_app: services_by_app
          service_provisioning_concurrency: service_provisioning_concurrency
          max_instances_by_type:
            key: max_instances_by_type
          persistent_volumes_by_region:
            key:
              max_volume_size: 6
              max_per_instance_size: 1
              max_total_size: 0
          memory_mb: memory_mb
          domains_load_balancer:
            max_koyeb: 5
          apps: apps
      properties:
        quotas:
          $ref: '#/components/schemas/Quotas'
      type: object
    PersistentVolumeQuotas:
      example:
        max_volume_size: 6
        max_per_instance_size: 1
        max_total_size: 0
      properties:
        max_total_size:
          description: MaxTotalSize for all volumes on a region (in Gigabyte / GB).
          format: int64
          type: integer
        max_volume_size:
          description: MaxVolumeSize for one volume (in Gigabyte / GB).
          format: int64
          type: integer
        max_per_instance_size:
          description: MaxPerInstanceSize for all volumes on an instance (in Gigabyte
            / GB).
          format: int64
          type: integer
      type: object
    Quotas:
      example:
        instance_types:
        - instance_types
        - instance_types
        regions:
        - regions
        - regions
        max_organization_members: max_organization_members
        custom_domains: custom_domains
        domains: domains
        services: services
        services_by_app: services_by_app
        service_provisioning_concurrency: service_provisioning_concurrency
        max_instances_by_type:
          key: max_instances_by_type
        persistent_volumes_by_region:
          key:
            max_volume_size: 6
            max_per_instance_size: 1
            max_total_size: 0
        memory_mb: memory_mb
        domains_load_balancer:
          max_koyeb: 5
        apps: apps
      properties:
        apps:
          format: int64
          type: string
        services:
          format: int64
          type: string
        domains:
          format: int64
          title: "Deprecated, use custom_domains instead"
          type: string
        services_by_app:
          format: int64
          type: string
        service_provisioning_concurrency:
          format: int64
          type: string
        memory_mb:
          format: int64
          type: string
        instance_types:
          items:
            type: string
          type: array
        regions:
          items:
            type: string
          type: array
        max_organization_members:
          format: int64
          type: string
        max_instances_by_type:
          additionalProperties:
            format: int64
            type: string
          type: object
        persistent_volumes_by_region:
          additionalProperties:
            $ref: '#/components/schemas/PersistentVolumeQuotas'
          type: object
        custom_domains:
          format: int64
          type: string
        domains_load_balancer:
          $ref: '#/components/schemas/DomainLoadBalancerQuotas'
      type: object
    GetIntercomProfileReply:
      example:
        hash: hash
      properties:
        hash:
          type: string
      type: object
    CreateCredential:
      example:
        organization_id: organization_id
        name: name
        description: description
        type: null
      properties:
        name:
          title: Credential name
          type: string
        description:
          title: Credential description
          type: string
        type:
          $ref: '#/components/schemas/Credential.Type'
        organization_id:
          title: Organization id for user credential
          type: string
      type: object
    CreateCredentialReply:
      example:
        credential:
          updated_at: 2000-01-23T04:56:07.000+00:00
          user_id: user_id
          organization_id: organization_id
          name: name
          description: description
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          type: null
          token: token
      properties:
        credential:
          $ref: '#/components/schemas/Credential'
      type: object
    Credential:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        user_id: user_id
        organization_id: organization_id
        name: name
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        type: null
        token: token
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/Credential.Type'
        name:
          type: string
        token:
          type: string
        description:
          type: string
        user_id:
          type: string
        organization_id:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
      type: object
    Credential.Type:
      default: INVALID
      enum:
      - INVALID
      - USER
      - ORGANIZATION
      type: string
    DeleteCredentialReply:
      type: object
    GetCredentialReply:
      example:
        credential:
          updated_at: 2000-01-23T04:56:07.000+00:00
          user_id: user_id
          organization_id: organization_id
          name: name
          description: description
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          type: null
          token: token
      properties:
        credential:
          $ref: '#/components/schemas/Credential'
      type: object
    ListCredentialsReply:
      example:
        offset: 6
        credentials:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          user_id: user_id
          organization_id: organization_id
          name: name
          description: description
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          type: null
          token: token
        - updated_at: 2000-01-23T04:56:07.000+00:00
          user_id: user_id
          organization_id: organization_id
          name: name
          description: description
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          type: null
          token: token
        limit: 0
        count: 1
      properties:
        credentials:
          items:
            $ref: '#/components/schemas/Credential'
          type: array
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
        count:
          format: int64
          type: integer
      type: object
    UpdateCredentialReply:
      example:
        credential:
          updated_at: 2000-01-23T04:56:07.000+00:00
          user_id: user_id
          organization_id: organization_id
          name: name
          description: description
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          type: null
          token: token
      properties:
        credential:
          $ref: '#/components/schemas/Credential'
      type: object
    ListOrganizationMembersReply:
      example:
        offset: 6
        members:
        - joined_at: 2000-01-23T04:56:07.000+00:00
          role: null
          user_id: user_id
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          id: id
          user:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          status: null
        - joined_at: 2000-01-23T04:56:07.000+00:00
          role: null
          user_id: user_id
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          id: id
          user:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          status: null
        limit: 0
        count: 1
      properties:
        members:
          items:
            $ref: '#/components/schemas/OrganizationMember'
          title: The collection of organization members
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    OrganizationMember:
      example:
        joined_at: 2000-01-23T04:56:07.000+00:00
        role: null
        user_id: user_id
        organization_id: organization_id
        organization:
          name: name
          id: id
          plan: null
          status: null
        id: id
        user:
          github_user: github_user
          avatar_url: avatar_url
          name: name
          github_id: github_id
          id: id
          email: email
        status: null
      properties:
        id:
          type: string
        organization_id:
          type: string
        user_id:
          type: string
        joined_at:
          format: date-time
          type: string
        role:
          $ref: '#/components/schemas/UserRole.Role'
        status:
          $ref: '#/components/schemas/OrganizationMember.Status'
        user:
          $ref: '#/components/schemas/PublicUser'
        organization:
          $ref: '#/components/schemas/PublicOrganization'
      type: object
    OrganizationMember.Status:
      default: INVALID
      enum:
      - INVALID
      - ACTIVE
      - DELETED
      type: string
    RemoveOrganizationMemberReply:
      example:
        member:
          joined_at: 2000-01-23T04:56:07.000+00:00
          role: null
          user_id: user_id
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          id: id
          user:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          status: null
      properties:
        member:
          $ref: '#/components/schemas/OrganizationMember'
      type: object
    GetSubscriptionReply:
      example:
        subscription:
          payment_failure:
            error_message: error_message
            attempt_count: attempt_count
            error_reason: error_reason
            error_type: error_type
            stripe_sdk:
              client_secret_key: client_secret_key
              raw_json: raw_json
            error_code: error_code
            failed_at: 2000-01-23T04:56:07.000+00:00
            next_attempt: 2000-01-23T04:56:07.000+00:00
            redirect_url: redirect_url
            payment_method_required: true
          amount_paid: amount_paid
          amount_remaining: amount_remaining
          terminate_at: 2000-01-23T04:56:07.000+00:00
          stripe_pending_invoice_id: stripe_pending_invoice_id
          canceled_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          trialing: true
          current_period_end: 2000-01-23T04:56:07.000+00:00
          version: version
          amount_payable: amount_payable
          updated_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          stripe_subscription_id: stripe_subscription_id
          messages:
          - messages
          - messages
          current_spend: current_spend
          currency: currency
          trial_ends_at: 2000-01-23T04:56:07.000+00:00
          trial_max_spend: trial_max_spend
          id: id
          terminated_at: 2000-01-23T04:56:07.000+00:00
          current_period_start: 2000-01-23T04:56:07.000+00:00
          status: null
          has_pending_update: true
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
      type: object
    Subscription:
      example:
        payment_failure:
          error_message: error_message
          attempt_count: attempt_count
          error_reason: error_reason
          error_type: error_type
          stripe_sdk:
            client_secret_key: client_secret_key
            raw_json: raw_json
          error_code: error_code
          failed_at: 2000-01-23T04:56:07.000+00:00
          next_attempt: 2000-01-23T04:56:07.000+00:00
          redirect_url: redirect_url
          payment_method_required: true
        amount_paid: amount_paid
        amount_remaining: amount_remaining
        terminate_at: 2000-01-23T04:56:07.000+00:00
        stripe_pending_invoice_id: stripe_pending_invoice_id
        canceled_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        trialing: true
        current_period_end: 2000-01-23T04:56:07.000+00:00
        version: version
        amount_payable: amount_payable
        updated_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        stripe_subscription_id: stripe_subscription_id
        messages:
        - messages
        - messages
        current_spend: current_spend
        currency: currency
        trial_ends_at: 2000-01-23T04:56:07.000+00:00
        trial_max_spend: trial_max_spend
        id: id
        terminated_at: 2000-01-23T04:56:07.000+00:00
        current_period_start: 2000-01-23T04:56:07.000+00:00
        status: null
        has_pending_update: true
      properties:
        id:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        version:
          format: uint64
          type: string
        organization_id:
          type: string
        stripe_subscription_id:
          type: string
        status:
          $ref: '#/components/schemas/Subscription.Status'
        messages:
          items:
            type: string
          type: array
        has_pending_update:
          type: boolean
        stripe_pending_invoice_id:
          type: string
        terminate_at:
          format: date-time
          type: string
        canceled_at:
          format: date-time
          type: string
        terminated_at:
          format: date-time
          type: string
        current_period_start:
          format: date-time
          type: string
        current_period_end:
          format: date-time
          type: string
        currency:
          type: string
        amount_payable:
          format: int64
          type: string
        amount_paid:
          format: int64
          type: string
        amount_remaining:
          format: int64
          type: string
        payment_failure:
          $ref: '#/components/schemas/Subscription.PaymentFailure'
        trialing:
          type: boolean
        trial_ends_at:
          format: date-time
          type: string
        trial_max_spend:
          format: int64
          type: string
        current_spend:
          format: int64
          type: string
      type: object
    Subscription.PaymentFailure:
      example:
        error_message: error_message
        attempt_count: attempt_count
        error_reason: error_reason
        error_type: error_type
        stripe_sdk:
          client_secret_key: client_secret_key
          raw_json: raw_json
        error_code: error_code
        failed_at: 2000-01-23T04:56:07.000+00:00
        next_attempt: 2000-01-23T04:56:07.000+00:00
        redirect_url: redirect_url
        payment_method_required: true
      properties:
        failed_at:
          format: date-time
          type: string
        next_attempt:
          format: date-time
          type: string
        attempt_count:
          format: int64
          type: string
        error_code:
          type: string
        error_reason:
          type: string
        error_type:
          type: string
        error_message:
          type: string
        payment_method_required:
          type: boolean
        redirect_url:
          type: string
        stripe_sdk:
          $ref: '#/components/schemas/Subscription.PaymentFailure.StripeSDK'
      type: object
    Subscription.PaymentFailure.StripeSDK:
      example:
        client_secret_key: client_secret_key
        raw_json: raw_json
      properties:
        client_secret_key:
          type: string
        raw_json:
          type: string
      type: object
    Subscription.Status:
      default: INVALID
      enum:
      - INVALID
      - CREATED
      - ACTIVE
      - WARNING
      - URGENT
      - CANCELING
      - CANCELED
      - TERMINATING
      - TERMINATED
      type: string
    ConfirmPaymentAuthorizationReply:
      example:
        payment_method:
          authorization_stripe_payment_intent_id: authorization_stripe_payment_intent_id
          authorization_canceled_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          type: type
          card_last_digits: card_last_digits
          version: version
          card_expiration_year: 6
          card_fingerprint: card_fingerprint
          updated_at: 2000-01-23T04:56:07.000+00:00
          provider: provider
          card_country: card_country
          organization_id: organization_id
          authorization_verified_at: 2000-01-23T04:56:07.000+00:00
          card_funding: card_funding
          card_brand: card_brand
          card_expiration_month: 0
          messages:
          - messages
          - messages
          id: id
          stripe_payment_method_id: stripe_payment_method_id
          authorization_stripe_payment_intent_client_secret: authorization_stripe_payment_intent_client_secret
          status: null
      properties:
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
      type: object
    CreatePaymentAuthorizationReply:
      example:
        payment_method:
          authorization_stripe_payment_intent_id: authorization_stripe_payment_intent_id
          authorization_canceled_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          type: type
          card_last_digits: card_last_digits
          version: version
          card_expiration_year: 6
          card_fingerprint: card_fingerprint
          updated_at: 2000-01-23T04:56:07.000+00:00
          provider: provider
          card_country: card_country
          organization_id: organization_id
          authorization_verified_at: 2000-01-23T04:56:07.000+00:00
          card_funding: card_funding
          card_brand: card_brand
          card_expiration_month: 0
          messages:
          - messages
          - messages
          id: id
          stripe_payment_method_id: stripe_payment_method_id
          authorization_stripe_payment_intent_client_secret: authorization_stripe_payment_intent_client_secret
          status: null
      properties:
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
      type: object
    CreatePaymentAuthorizationRequest:
      type: object
    DeletePaymentMethodReply:
      type: object
    GetPaymentMethodReply:
      example:
        payment_method:
          authorization_stripe_payment_intent_id: authorization_stripe_payment_intent_id
          authorization_canceled_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          type: type
          card_last_digits: card_last_digits
          version: version
          card_expiration_year: 6
          card_fingerprint: card_fingerprint
          updated_at: 2000-01-23T04:56:07.000+00:00
          provider: provider
          card_country: card_country
          organization_id: organization_id
          authorization_verified_at: 2000-01-23T04:56:07.000+00:00
          card_funding: card_funding
          card_brand: card_brand
          card_expiration_month: 0
          messages:
          - messages
          - messages
          id: id
          stripe_payment_method_id: stripe_payment_method_id
          authorization_stripe_payment_intent_client_secret: authorization_stripe_payment_intent_client_secret
          status: null
      properties:
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
      type: object
    ListPaymentMethodsReply:
      example:
        payment_methods:
        - authorization_stripe_payment_intent_id: authorization_stripe_payment_intent_id
          authorization_canceled_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          type: type
          card_last_digits: card_last_digits
          version: version
          card_expiration_year: 6
          card_fingerprint: card_fingerprint
          updated_at: 2000-01-23T04:56:07.000+00:00
          provider: provider
          card_country: card_country
          organization_id: organization_id
          authorization_verified_at: 2000-01-23T04:56:07.000+00:00
          card_funding: card_funding
          card_brand: card_brand
          card_expiration_month: 0
          messages:
          - messages
          - messages
          id: id
          stripe_payment_method_id: stripe_payment_method_id
          authorization_stripe_payment_intent_client_secret: authorization_stripe_payment_intent_client_secret
          status: null
        - authorization_stripe_payment_intent_id: authorization_stripe_payment_intent_id
          authorization_canceled_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          type: type
          card_last_digits: card_last_digits
          version: version
          card_expiration_year: 6
          card_fingerprint: card_fingerprint
          updated_at: 2000-01-23T04:56:07.000+00:00
          provider: provider
          card_country: card_country
          organization_id: organization_id
          authorization_verified_at: 2000-01-23T04:56:07.000+00:00
          card_funding: card_funding
          card_brand: card_brand
          card_expiration_month: 0
          messages:
          - messages
          - messages
          id: id
          stripe_payment_method_id: stripe_payment_method_id
          authorization_stripe_payment_intent_client_secret: authorization_stripe_payment_intent_client_secret
          status: null
        offset: 5
        limit: 1
        count: 5
      properties:
        payment_methods:
          items:
            $ref: '#/components/schemas/PaymentMethod'
          title: The collection of payment methods
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    PaymentMethod:
      example:
        authorization_stripe_payment_intent_id: authorization_stripe_payment_intent_id
        authorization_canceled_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        type: type
        card_last_digits: card_last_digits
        version: version
        card_expiration_year: 6
        card_fingerprint: card_fingerprint
        updated_at: 2000-01-23T04:56:07.000+00:00
        provider: provider
        card_country: card_country
        organization_id: organization_id
        authorization_verified_at: 2000-01-23T04:56:07.000+00:00
        card_funding: card_funding
        card_brand: card_brand
        card_expiration_month: 0
        messages:
        - messages
        - messages
        id: id
        stripe_payment_method_id: stripe_payment_method_id
        authorization_stripe_payment_intent_client_secret: authorization_stripe_payment_intent_client_secret
        status: null
      properties:
        id:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        version:
          format: uint64
          type: string
        organization_id:
          type: string
        type:
          type: string
        provider:
          type: string
        status:
          $ref: '#/components/schemas/PaymentMethod.Status'
        messages:
          items:
            type: string
          type: array
        stripe_payment_method_id:
          type: string
        authorization_verified_at:
          format: date-time
          type: string
        authorization_canceled_at:
          format: date-time
          type: string
        authorization_stripe_payment_intent_id:
          type: string
        authorization_stripe_payment_intent_client_secret:
          type: string
        card_brand:
          type: string
        card_country:
          type: string
        card_funding:
          type: string
        card_fingerprint:
          type: string
        card_last_digits:
          type: string
        card_expiration_month:
          format: int64
          type: integer
        card_expiration_year:
          format: int64
          type: integer
      type: object
    PaymentMethod.Status:
      default: INVALID
      enum:
      - INVALID
      - CREATED
      - AUTHORIZED
      - DECLINED
      - CANCELED
      - EXPIRED
      - UNCHECKED
      type: string
    DeleteUserReply:
      example:
        user:
          id: 78352123-a06f-4ec2-81ed-27a056725385
          email: john@snow.com
          name: John Snow
          avatar_url: https://www.gravatar.com/avatar/00000000000000000000000000000000
          is_admin: false
          is_test: true
          two_factor_authentication: false
          last_login: 0001-01-01T00:00:00Z
          last_login_id: 10.1.1.1
          updated_at: 0001-01-01T00:00:00Z
          created_at: 0001-01-01T00:00:00Z
          newsletter_subscribed: true
          email_validated: true
      properties:
        user:
          $ref: '#/components/schemas/User'
      type: object
    User:
      example:
        id: 78352123-a06f-4ec2-81ed-27a056725385
        email: john@snow.com
        name: John Snow
        avatar_url: https://www.gravatar.com/avatar/00000000000000000000000000000000
        is_admin: false
        is_test: true
        two_factor_authentication: false
        last_login: 0001-01-01T00:00:00Z
        last_login_id: 10.1.1.1
        updated_at: 0001-01-01T00:00:00Z
        created_at: 0001-01-01T00:00:00Z
        newsletter_subscribed: true
        email_validated: true
      properties:
        id:
          type: string
        email:
          type: string
        avatar_url:
          type: string
        two_factor_authentication:
          type: boolean
        last_login:
          format: date-time
          type: string
        last_login_ip:
          type: string
        updated_at:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        newsletter_subscribed:
          type: boolean
        github_id:
          type: string
        github_user:
          type: string
        flags:
          items:
            $ref: '#/components/schemas/UserFlags'
          type: array
        name:
          type: string
        email_validated:
          type: boolean
        trialed:
          type: boolean
      title: Represent a User
      type: object
    UserFlags:
      default: ADMIN
      enum:
      - ADMIN
      - TEST
      - RESTRICTED
      - ACTIVE
      - BETA
      title: |-
        - ADMIN: A user is an admin user
         - TEST: A user is a test user
         - RESTRICTED: Whether this account as restricted access
         - ACTIVE: Whether this account is active
         - BETA: Account in beta program
      type: string
    AcceptOrganizationInvitationReply:
      example:
        invitation:
          role: null
          expires_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          inviter_id: inviter_id
          inviter:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          id: id
          email: email
          invitee_id: invitee_id
          status: null
          invitee:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
      properties:
        invitation:
          $ref: '#/components/schemas/OrganizationInvitation'
      type: object
    Action:
      default: signin
      enum:
      - signin
      - signup
      - register
      type: string
    CannyAuthReply:
      example:
        token: token
      properties:
        token:
          type: string
      type: object
    CannyAuthRequest:
      type: object
    CreateAccountRequest:
      description: Create new account
      example:
        email: john@snow.com
        password: '...'
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
        captcha:
          type: string
      required:
      - email
      - password
      title: Create new account
      type: object
    CreateOrganizationReply:
      example:
        organization:
          status_message: null
          country: country
          city: city
          vat_number: vat_number
          plan_updated_at: 2000-01-23T04:56:07.000+00:00
          has_payment_method: true
          trialing: true
          subscription_id: subscription_id
          signup_qualification: "{}"
          reprocess_after: 2000-01-23T04:56:07.000+00:00
          billing_email: billing_email
          company: true
          id: id
          state: state
          plan: null
          current_subscription_id: current_subscription_id
          qualifies_for_hobby23: true
          address2: address2
          trial_starts_at: 2000-01-23T04:56:07.000+00:00
          address1: address1
          verified: true
          billing_name: billing_name
          deactivation_reason: null
          name: name
          latest_subscription_id: latest_subscription_id
          trial_ends_at: 2000-01-23T04:56:07.000+00:00
          postal_code: postal_code
          status: null
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
      type: object
    CreateOrganizationRequest:
      example:
        name: name
      properties:
        name:
          type: string
      type: object
    DeactivateOrganizationReply:
      example:
        organization:
          status_message: null
          country: country
          city: city
          vat_number: vat_number
          plan_updated_at: 2000-01-23T04:56:07.000+00:00
          has_payment_method: true
          trialing: true
          subscription_id: subscription_id
          signup_qualification: "{}"
          reprocess_after: 2000-01-23T04:56:07.000+00:00
          billing_email: billing_email
          company: true
          id: id
          state: state
          plan: null
          current_subscription_id: current_subscription_id
          qualifies_for_hobby23: true
          address2: address2
          trial_starts_at: 2000-01-23T04:56:07.000+00:00
          address1: address1
          verified: true
          billing_name: billing_name
          deactivation_reason: null
          name: name
          latest_subscription_id: latest_subscription_id
          trial_ends_at: 2000-01-23T04:56:07.000+00:00
          postal_code: postal_code
          status: null
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
      type: object
    DeclineOrganizationInvitationReply:
      example:
        invitation:
          role: null
          expires_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          inviter_id: inviter_id
          inviter:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          id: id
          email: email
          invitee_id: invitee_id
          status: null
          invitee:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
      properties:
        invitation:
          $ref: '#/components/schemas/OrganizationInvitation'
      type: object
    DeleteOrganizationReply:
      example:
        organization:
          status_message: null
          country: country
          city: city
          vat_number: vat_number
          plan_updated_at: 2000-01-23T04:56:07.000+00:00
          has_payment_method: true
          trialing: true
          subscription_id: subscription_id
          signup_qualification: "{}"
          reprocess_after: 2000-01-23T04:56:07.000+00:00
          billing_email: billing_email
          company: true
          id: id
          state: state
          plan: null
          current_subscription_id: current_subscription_id
          qualifies_for_hobby23: true
          address2: address2
          trial_starts_at: 2000-01-23T04:56:07.000+00:00
          address1: address1
          verified: true
          billing_name: billing_name
          deactivation_reason: null
          name: name
          latest_subscription_id: latest_subscription_id
          trial_ends_at: 2000-01-23T04:56:07.000+00:00
          postal_code: postal_code
          status: null
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
      type: object
    DiscourseAuthReply:
      example:
        sig: sig
        sso: sso
      properties:
        sso:
          type: string
        sig:
          type: string
      type: object
    DiscourseAuthRequest:
      example:
        sig: sig
        payload: payload
      properties:
        payload:
          type: string
        sig:
          type: string
      type: object
    GetGithubInstallationReply:
      example:
        indexing_status: null
        indexed_repositories: 0
        avatar_url: avatar_url
        installation_url: installation_url
        installed_at: 2000-01-23T04:56:07.000+00:00
        name: name
        installation_id: installation_id
        total_repositories: 6
        status: null
        suspended_at: 2000-01-23T04:56:07.000+00:00
      properties:
        installation_id:
          type: string
        installation_url:
          type: string
        name:
          type: string
        avatar_url:
          type: string
        status:
          $ref: '#/components/schemas/kgitproxy.GithubInstallation.Status'
        installed_at:
          format: date-time
          type: string
        suspended_at:
          format: date-time
          type: string
        indexing_status:
          $ref: '#/components/schemas/kgitproxy.IndexingStatus'
        indexed_repositories:
          format: int64
          type: integer
        total_repositories:
          format: int64
          type: integer
      type: object
    GetOAuthOptionsReply:
      description: A list of providers which you can use for single sign-on.
      example:
        oauth_providers:
        - id: id
          state: state
          url: url
        - id: id
          state: state
          url: url
      properties:
        oauth_providers:
          items:
            $ref: '#/components/schemas/OAuthProvider'
          type: array
      type: object
    GetOrganizationReply:
      example:
        organization:
          status_message: null
          country: country
          city: city
          vat_number: vat_number
          plan_updated_at: 2000-01-23T04:56:07.000+00:00
          has_payment_method: true
          trialing: true
          subscription_id: subscription_id
          signup_qualification: "{}"
          reprocess_after: 2000-01-23T04:56:07.000+00:00
          billing_email: billing_email
          company: true
          id: id
          state: state
          plan: null
          current_subscription_id: current_subscription_id
          qualifies_for_hobby23: true
          address2: address2
          trial_starts_at: 2000-01-23T04:56:07.000+00:00
          address1: address1
          verified: true
          billing_name: billing_name
          deactivation_reason: null
          name: name
          latest_subscription_id: latest_subscription_id
          trial_ends_at: 2000-01-23T04:56:07.000+00:00
          postal_code: postal_code
          status: null
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
      type: object
    GetUserOrganizationInvitationReply:
      example:
        invitation:
          role: null
          expires_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          inviter_id: inviter_id
          inviter:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          id: id
          email: email
          invitee_id: invitee_id
          status: null
          invitee:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
      properties:
        invitation:
          $ref: '#/components/schemas/OrganizationInvitation'
      type: object
    GithubInstallationReply:
      example:
        app_name: app_name
        state: state
        app_id: app_id
        url: url
      properties:
        app_name:
          title: The github app name
          type: string
        app_id:
          format: int64
          title: The github app id
          type: string
        url:
          title: The url to start the installation flow
          type: string
        state:
          title: "The state required by the protocol, it is only valid 10 minutes\
            \ and encodes information about the type of flow"
          type: string
      type: object
    GithubInstallationRequest:
      example:
        metadata: metadata
      properties:
        metadata:
          title: A small (limited to 400 characters) string of arbitrary metadata
            which will be encoded in the state
          type: string
      type: object
    HasUnpaidInvoicesReply:
      example:
        has_unpaid_invoices: true
      properties:
        has_unpaid_invoices:
          type: boolean
      type: object
    InviteUserRequest:
      example:
        name: name
        message: message
        email: email
      properties:
        email:
          type: string
        name:
          type: string
        message:
          type: string
      type: object
    ListUserOrganizationInvitationsReply:
      example:
        offset: 6
        invitations:
        - role: null
          expires_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          inviter_id: inviter_id
          inviter:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          id: id
          email: email
          invitee_id: invitee_id
          status: null
          invitee:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
        - role: null
          expires_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          organization:
            name: name
            id: id
            plan: null
            status: null
          inviter_id: inviter_id
          inviter:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
          id: id
          email: email
          invitee_id: invitee_id
          status: null
          invitee:
            github_user: github_user
            avatar_url: avatar_url
            name: name
            github_id: github_id
            id: id
            email: email
        limit: 0
        count: 1
      properties:
        invitations:
          items:
            $ref: '#/components/schemas/OrganizationInvitation'
          title: The collection of organization invitations
          type: array
        limit:
          format: int64
          title: The limit in the request
          type: integer
        offset:
          format: int64
          title: The offset in the request
          type: integer
        count:
          format: int64
          title: The total number of items
          type: integer
      type: object
    ManageReply:
      example:
        url: url
      properties:
        url:
          type: string
      type: object
    NextInvoiceReply:
      example:
        discounts:
        - amount: amount
          name: name
          type: null
        - amount: amount
          name: name
          type: null
        stripe_invoice: "{}"
        lines:
        - period:
            start: 2000-01-23T04:56:07.000+00:00
            end: 2000-01-23T04:56:07.000+00:00
          plan_nickname: plan_nickname
          quantity: 1
          price:
            unit_amount_decimal: 6.027456183070403
          amount_excluding_tax: 0
        - period:
            start: 2000-01-23T04:56:07.000+00:00
            end: 2000-01-23T04:56:07.000+00:00
          plan_nickname: plan_nickname
          quantity: 1
          price:
            unit_amount_decimal: 6.027456183070403
          amount_excluding_tax: 0
      properties:
        stripe_invoice:
          properties: {}
          type: object
        lines:
          items:
            $ref: '#/components/schemas/NextInvoiceReply.Line'
          type: array
        discounts:
          items:
            $ref: '#/components/schemas/NextInvoiceReply.Discount'
          type: array
      type: object
    NextInvoiceReply.Discount:
      example:
        amount: amount
        name: name
        type: null
      properties:
        type:
          $ref: '#/components/schemas/NextInvoiceReply.Discount.Type'
        name:
          type: string
        amount:
          format: int64
          type: string
      type: object
    NextInvoiceReply.Discount.Type:
      default: PERCENT_OFF
      enum:
      - PERCENT_OFF
      - AMOUNT_OFF
      type: string
    NextInvoiceReply.Line:
      example:
        period:
          start: 2000-01-23T04:56:07.000+00:00
          end: 2000-01-23T04:56:07.000+00:00
        plan_nickname: plan_nickname
        quantity: 1
        price:
          unit_amount_decimal: 6.027456183070403
        amount_excluding_tax: 0
      properties:
        amount_excluding_tax:
          format: int32
          type: integer
        period:
          $ref: '#/components/schemas/NextInvoiceReply.Line.Period'
        plan_nickname:
          type: string
        price:
          $ref: '#/components/schemas/NextInvoiceReply.Line.Price'
        quantity:
          format: int32
          type: integer
      type: object
    NextInvoiceReply.Line.Period:
      example:
        start: 2000-01-23T04:56:07.000+00:00
        end: 2000-01-23T04:56:07.000+00:00
      properties:
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
      type: object
    NextInvoiceReply.Line.Price:
      example:
        unit_amount_decimal: 6.027456183070403
      properties:
        unit_amount_decimal:
          format: double
          type: number
      type: object
    OAuthCallbackReply:
      example:
        token:
          id: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          expires: 2022-09-08T14:00:00Z
          user_id: 996d7822-6b58-11e9-956f-32001b70f000
          organization_id: 9f33b2c6-6b58-11e9-883c-32001b70f000
      properties:
        token:
          $ref: '#/components/schemas/Token'
      type: object
    OAuthCallbackRequest:
      example:
        setup_action: setup_action
        code: code
        installation_id: installation_id
        state: state
      properties:
        state:
          title: The state created at the origin of the OAuth flow
          type: string
        code:
          title: The code returned by the OAuth provider
          type: string
        setup_action:
          description: |-
            setup_action is populated in the context of a GitHub app installation request. For logins and
            signups, it is not set.
          type: string
        installation_id:
          description: |-
            installation_id is populated in the context of a GitHub app installation request. For logins and
            signups, it is not set.
          type: string
      type: object
    OAuthProvider:
      example:
        id: id
        state: state
        url: url
      properties:
        id:
          title: "The name of the provider (.e.g github, google)"
          type: string
        url:
          title: The URL to call to initiate the OAuth flow
          type: string
        state:
          title: "The OAuth state required by the protocol, it is only valid 10 minutes\
            \ and encodes information about the type of flow"
          type: string
      type: object
    Organization:
      example:
        status_message: null
        country: country
        city: city
        vat_number: vat_number
        plan_updated_at: 2000-01-23T04:56:07.000+00:00
        has_payment_method: true
        trialing: true
        subscription_id: subscription_id
        signup_qualification: "{}"
        reprocess_after: 2000-01-23T04:56:07.000+00:00
        billing_email: billing_email
        company: true
        id: id
        state: state
        plan: null
        current_subscription_id: current_subscription_id
        qualifies_for_hobby23: true
        address2: address2
        trial_starts_at: 2000-01-23T04:56:07.000+00:00
        address1: address1
        verified: true
        billing_name: billing_name
        deactivation_reason: null
        name: name
        latest_subscription_id: latest_subscription_id
        trial_ends_at: 2000-01-23T04:56:07.000+00:00
        postal_code: postal_code
        status: null
      properties:
        id:
          type: string
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        postal_code:
          type: string
        state:
          type: string
        country:
          type: string
        company:
          type: boolean
        vat_number:
          type: string
        billing_name:
          type: string
        billing_email:
          type: string
        name:
          type: string
        plan:
          $ref: '#/components/schemas/Plan'
        plan_updated_at:
          format: date-time
          type: string
        has_payment_method:
          type: boolean
        subscription_id:
          type: string
        current_subscription_id:
          type: string
        latest_subscription_id:
          type: string
        signup_qualification:
          properties: {}
          type: object
        status:
          $ref: '#/components/schemas/Organization.Status'
        status_message:
          $ref: '#/components/schemas/OrganizationDetailedStatus'
        deactivation_reason:
          $ref: '#/components/schemas/Organization.DeactivationReason'
        verified:
          type: boolean
        qualifies_for_hobby23:
          type: boolean
        reprocess_after:
          format: date-time
          type: string
        trialing:
          type: boolean
        trial_starts_at:
          format: date-time
          type: string
        trial_ends_at:
          format: date-time
          type: string
      title: Represent an Organization
      type: object
    Organization.DeactivationReason:
      default: INVALID
      enum:
      - INVALID
      - REQUESTED_BY_OWNER
      - SUBSCRIPTION_TERMINATION
      - LOCKED_BY_ADMIN
      - VERIFICATION_FAILED
      - TRIAL_DID_NOT_CONVERT
      type: string
    OrganizationDetailedStatus:
      default: NEW
      enum:
      - NEW
      - EMAIL_NOT_VALIDATED
      - BILLING_INFO_MISSING
      - LOCKED
      - PAYMENT_FAILURE
      - VALID
      - PENDING_VERIFICATION
      - VERIFICATION_FAILED
      - REVIEWING_ACCOUNT
      - PLAN_UPGRADE_REQUIRED
      type: string
    ReactivateOrganizationReply:
      example:
        organization:
          status_message: null
          country: country
          city: city
          vat_number: vat_number
          plan_updated_at: 2000-01-23T04:56:07.000+00:00
          has_payment_method: true
          trialing: true
          subscription_id: subscription_id
          signup_qualification: "{}"
          reprocess_after: 2000-01-23T04:56:07.000+00:00
          billing_email: billing_email
          company: true
          id: id
          state: state
          plan: null
          current_subscription_id: current_subscription_id
          qualifies_for_hobby23: true
          address2: address2
          trial_starts_at: 2000-01-23T04:56:07.000+00:00
          address1: address1
          verified: true
          billing_name: billing_name
          deactivation_reason: null
          name: name
          latest_subscription_id: latest_subscription_id
          trial_ends_at: 2000-01-23T04:56:07.000+00:00
          postal_code: postal_code
          status: null
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
      type: object
    ResendEmailValidationReply:
      type: object
    ResendEmailValidationRequest:
      type: object
    ResetPasswordReply:
      type: object
    ResetPasswordRequest:
      example:
        email: john@snow.com
      properties:
        email:
          type: string
      type: object
    UnscopeOrganizationTokenRequest:
      type: object
    UpdateOrganizationPlanReply:
      example:
        organization:
          status_message: null
          country: country
          city: city
          vat_number: vat_number
          plan_updated_at: 2000-01-23T04:56:07.000+00:00
          has_payment_method: true
          trialing: true
          subscription_id: subscription_id
          signup_qualification: "{}"
          reprocess_after: 2000-01-23T04:56:07.000+00:00
          billing_email: billing_email
          company: true
          id: id
          state: state
          plan: null
          current_subscription_id: current_subscription_id
          qualifies_for_hobby23: true
          address2: address2
          trial_starts_at: 2000-01-23T04:56:07.000+00:00
          address1: address1
          verified: true
          billing_name: billing_name
          deactivation_reason: null
          name: name
          latest_subscription_id: latest_subscription_id
          trial_ends_at: 2000-01-23T04:56:07.000+00:00
          postal_code: postal_code
          status: null
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
      type: object
    UpdateOrganizationReply:
      example:
        organization:
          status_message: null
          country: country
          city: city
          vat_number: vat_number
          plan_updated_at: 2000-01-23T04:56:07.000+00:00
          has_payment_method: true
          trialing: true
          subscription_id: subscription_id
          signup_qualification: "{}"
          reprocess_after: 2000-01-23T04:56:07.000+00:00
          billing_email: billing_email
          company: true
          id: id
          state: state
          plan: null
          current_subscription_id: current_subscription_id
          qualifies_for_hobby23: true
          address2: address2
          trial_starts_at: 2000-01-23T04:56:07.000+00:00
          address1: address1
          verified: true
          billing_name: billing_name
          deactivation_reason: null
          name: name
          latest_subscription_id: latest_subscription_id
          trial_ends_at: 2000-01-23T04:56:07.000+00:00
          postal_code: postal_code
          status: null
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
      type: object
    UpdatePasswordRequest:
      example:
        id: '...'
        password: '...'
      properties:
        id:
          type: string
        password:
          type: string
      type: object
    UpdateUserRequest.UserUpdateBody:
      properties:
        id:
          type: string
        email:
          type: string
        current_password:
          type: string
        password:
          type: string
        newsletter_subscribed:
          type: boolean
        name:
          type: string
      type: object
    UpsertSignupQualificationReply:
      example:
        organization:
          status_message: null
          country: country
          city: city
          vat_number: vat_number
          plan_updated_at: 2000-01-23T04:56:07.000+00:00
          has_payment_method: true
          trialing: true
          subscription_id: subscription_id
          signup_qualification: "{}"
          reprocess_after: 2000-01-23T04:56:07.000+00:00
          billing_email: billing_email
          company: true
          id: id
          state: state
          plan: null
          current_subscription_id: current_subscription_id
          qualifies_for_hobby23: true
          address2: address2
          trial_starts_at: 2000-01-23T04:56:07.000+00:00
          address1: address1
          verified: true
          billing_name: billing_name
          deactivation_reason: null
          name: name
          latest_subscription_id: latest_subscription_id
          trial_ends_at: 2000-01-23T04:56:07.000+00:00
          postal_code: postal_code
          status: null
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
      type: object
    UserReply:
      example:
        user:
          id: 78352123-a06f-4ec2-81ed-27a056725385
          email: john@snow.com
          name: John Snow
          avatar_url: https://www.gravatar.com/avatar/00000000000000000000000000000000
          is_admin: false
          is_test: true
          two_factor_authentication: false
          last_login: 0001-01-01T00:00:00Z
          last_login_id: 10.1.1.1
          updated_at: 0001-01-01T00:00:00Z
          created_at: 0001-01-01T00:00:00Z
          newsletter_subscribed: true
          email_validated: true
      properties:
        user:
          $ref: '#/components/schemas/User'
      type: object
    Empty:
      type: object
    kgitproxy.GithubInstallation.Status:
      default: INVALID
      enum:
      - INVALID
      - INSTALLED
      - SUSPENDED
      - DELETED
      type: string
    kgitproxy.IndexingStatus:
      default: INVALID_INDEXING_STATUS
      enum:
      - INVALID_INDEXING_STATUS
      - NOT_STARTED
      - IN_PROGRESS
      - COMPLETED
      type: string
    ConfirmOrganizationActionReply:
      type: object
    Stream_result_of_LogEntry:
      example:
        result:
          msg: msg
          created_at: 2000-01-23T04:56:07.000+00:00
          labels: "{}"
        error:
          code: 0
          details:
          - '@type': '@type'
          - '@type': '@type'
          message: message
      properties:
        result:
          $ref: '#/components/schemas/LogEntry'
        error:
          $ref: '#/components/schemas/google.rpc.Status'
      title: Stream result of LogEntry
      type: object
    Stream_result_of_ExecCommandReply:
      example:
        result:
          stdout:
            data: data
            close: true
          exited: true
          exit_code: 0
          stderr:
            data: data
            close: true
        error:
          code: 0
          details:
          - '@type': '@type'
          - '@type': '@type'
          message: message
      properties:
        result:
          $ref: '#/components/schemas/ExecCommandReply'
        error:
          $ref: '#/components/schemas/google.rpc.Status'
      title: Stream result of ExecCommandReply
      type: object
    UpdateSnapshot_request:
      properties:
        name:
          title: Change the name of the snapshot
          type: string
      type: object
    UpdatePersistentVolume_request:
      properties:
        name:
          title: (Optional) change the name of the volume
          type: string
        max_size:
          format: int64
          title: (Optional) increase the volume size (in Gigabyte / GB)
          type: integer
      type: object
    CreateStageAttempt_request:
      properties:
        secret:
          type: string
        status:
          $ref: '#/components/schemas/DeploymentProvisioningInfo.Stage.Status'
        started_at:
          format: date-time
          type: string
        messages:
          items:
            type: string
          type: array
        steps:
          items:
            type: string
          type: array
      type: object
    DeclareStageProgress_request:
      properties:
        secret:
          type: string
        status:
          $ref: '#/components/schemas/DeploymentProvisioningInfo.Stage.Status'
        finished_at:
          format: date-time
          type: string
        messages:
          items:
            type: string
          type: array
        image_pushed:
          type: boolean
        internal_failure:
          type: boolean
        retryable_failure:
          type: boolean
      type: object
    DeclareStepProgress_request:
      properties:
        secret:
          type: string
        status:
          $ref: '#/components/schemas/DeploymentProvisioningInfo.Stage.Status'
        started_at:
          format: date-time
          type: string
        finished_at:
          format: date-time
          type: string
        messages:
          items:
            type: string
          type: array
      type: object
    UpdateOrganizationPlan_request:
      properties:
        plan:
          $ref: '#/components/schemas/Plan'
      type: object
    UpsertSignupQualification_request:
      properties:
        signup_qualification:
          properties: {}
          type: object
      type: object
  securitySchemes:
    Bearer:
      in: header
      name: Authorization
      type: apiKey
x-tagGroups:
- name: Introduction
  tags:
  - intro
- name: API
  tags:
  - profile
  - Sessions
  - Users
  - organization
  - OrganizationMembers
  - OrganizationInvitations
  - OrganizationConfirmations
  - Subscriptions
  - Credentials
  - Secrets
  - activity
  - Apps
  - Services
  - Deployments
  - RegionalDeployments
  - Instances
  - Domains
  - PersistentVolumes
  - Snapshots
  - Repositories
  - Logs
  - Metrics
  - Catalog
  - CatalogRegions
  - CatalogInstances
  - Usages
  - Summary
  - DockerHelper
x-original-swagger-version: "2.0"
