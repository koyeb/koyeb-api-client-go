/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the GetOrganizationReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetOrganizationReply{}

// GetOrganizationReply struct for GetOrganizationReply
type GetOrganizationReply struct {
	Organization *Organization `json:"organization,omitempty"`
}

// NewGetOrganizationReply instantiates a new GetOrganizationReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetOrganizationReply() *GetOrganizationReply {
	this := GetOrganizationReply{}
	return &this
}

// NewGetOrganizationReplyWithDefaults instantiates a new GetOrganizationReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetOrganizationReplyWithDefaults() *GetOrganizationReply {
	this := GetOrganizationReply{}
	return &this
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *GetOrganizationReply) GetOrganization() Organization {
	if o == nil || IsNil(o.Organization) {
		var ret Organization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationReply) GetOrganizationOk() (*Organization, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *GetOrganizationReply) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given Organization and assigns it to the Organization field.
func (o *GetOrganizationReply) SetOrganization(v Organization) {
	o.Organization = &v
}

func (o GetOrganizationReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetOrganizationReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	return toSerialize, nil
}

type NullableGetOrganizationReply struct {
	value *GetOrganizationReply
	isSet bool
}

func (v NullableGetOrganizationReply) Get() *GetOrganizationReply {
	return v.value
}

func (v *NullableGetOrganizationReply) Set(val *GetOrganizationReply) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOrganizationReply) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOrganizationReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOrganizationReply(val *GetOrganizationReply) *NullableGetOrganizationReply {
	return &NullableGetOrganizationReply{value: val, isSet: true}
}

func (v NullableGetOrganizationReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOrganizationReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


