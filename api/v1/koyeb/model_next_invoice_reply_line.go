/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// NextInvoiceReplyLine struct for NextInvoiceReplyLine
type NextInvoiceReplyLine struct {
	AmountExcludingTax *int32 `json:"amount_excluding_tax,omitempty"`
	Period *NextInvoiceReplyLinePeriod `json:"period,omitempty"`
	PlanNickname *string `json:"plan_nickname,omitempty"`
	Price *NextInvoiceReplyLinePrice `json:"price,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`
}

// NewNextInvoiceReplyLine instantiates a new NextInvoiceReplyLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNextInvoiceReplyLine() *NextInvoiceReplyLine {
	this := NextInvoiceReplyLine{}
	return &this
}

// NewNextInvoiceReplyLineWithDefaults instantiates a new NextInvoiceReplyLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextInvoiceReplyLineWithDefaults() *NextInvoiceReplyLine {
	this := NextInvoiceReplyLine{}
	return &this
}

// GetAmountExcludingTax returns the AmountExcludingTax field value if set, zero value otherwise.
func (o *NextInvoiceReplyLine) GetAmountExcludingTax() int32 {
	if o == nil || isNil(o.AmountExcludingTax) {
		var ret int32
		return ret
	}
	return *o.AmountExcludingTax
}

// GetAmountExcludingTaxOk returns a tuple with the AmountExcludingTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextInvoiceReplyLine) GetAmountExcludingTaxOk() (*int32, bool) {
	if o == nil || isNil(o.AmountExcludingTax) {
    return nil, false
	}
	return o.AmountExcludingTax, true
}

// HasAmountExcludingTax returns a boolean if a field has been set.
func (o *NextInvoiceReplyLine) HasAmountExcludingTax() bool {
	if o != nil && !isNil(o.AmountExcludingTax) {
		return true
	}

	return false
}

// SetAmountExcludingTax gets a reference to the given int32 and assigns it to the AmountExcludingTax field.
func (o *NextInvoiceReplyLine) SetAmountExcludingTax(v int32) {
	o.AmountExcludingTax = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *NextInvoiceReplyLine) GetPeriod() NextInvoiceReplyLinePeriod {
	if o == nil || isNil(o.Period) {
		var ret NextInvoiceReplyLinePeriod
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextInvoiceReplyLine) GetPeriodOk() (*NextInvoiceReplyLinePeriod, bool) {
	if o == nil || isNil(o.Period) {
    return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *NextInvoiceReplyLine) HasPeriod() bool {
	if o != nil && !isNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given NextInvoiceReplyLinePeriod and assigns it to the Period field.
func (o *NextInvoiceReplyLine) SetPeriod(v NextInvoiceReplyLinePeriod) {
	o.Period = &v
}

// GetPlanNickname returns the PlanNickname field value if set, zero value otherwise.
func (o *NextInvoiceReplyLine) GetPlanNickname() string {
	if o == nil || isNil(o.PlanNickname) {
		var ret string
		return ret
	}
	return *o.PlanNickname
}

// GetPlanNicknameOk returns a tuple with the PlanNickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextInvoiceReplyLine) GetPlanNicknameOk() (*string, bool) {
	if o == nil || isNil(o.PlanNickname) {
    return nil, false
	}
	return o.PlanNickname, true
}

// HasPlanNickname returns a boolean if a field has been set.
func (o *NextInvoiceReplyLine) HasPlanNickname() bool {
	if o != nil && !isNil(o.PlanNickname) {
		return true
	}

	return false
}

// SetPlanNickname gets a reference to the given string and assigns it to the PlanNickname field.
func (o *NextInvoiceReplyLine) SetPlanNickname(v string) {
	o.PlanNickname = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *NextInvoiceReplyLine) GetPrice() NextInvoiceReplyLinePrice {
	if o == nil || isNil(o.Price) {
		var ret NextInvoiceReplyLinePrice
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextInvoiceReplyLine) GetPriceOk() (*NextInvoiceReplyLinePrice, bool) {
	if o == nil || isNil(o.Price) {
    return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *NextInvoiceReplyLine) HasPrice() bool {
	if o != nil && !isNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NextInvoiceReplyLinePrice and assigns it to the Price field.
func (o *NextInvoiceReplyLine) SetPrice(v NextInvoiceReplyLinePrice) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *NextInvoiceReplyLine) GetQuantity() int32 {
	if o == nil || isNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextInvoiceReplyLine) GetQuantityOk() (*int32, bool) {
	if o == nil || isNil(o.Quantity) {
    return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *NextInvoiceReplyLine) HasQuantity() bool {
	if o != nil && !isNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *NextInvoiceReplyLine) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o NextInvoiceReplyLine) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AmountExcludingTax) {
		toSerialize["amount_excluding_tax"] = o.AmountExcludingTax
	}
	if !isNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !isNil(o.PlanNickname) {
		toSerialize["plan_nickname"] = o.PlanNickname
	}
	if !isNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !isNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return json.Marshal(toSerialize)
}

type NullableNextInvoiceReplyLine struct {
	value *NextInvoiceReplyLine
	isSet bool
}

func (v NullableNextInvoiceReplyLine) Get() *NextInvoiceReplyLine {
	return v.value
}

func (v *NullableNextInvoiceReplyLine) Set(val *NextInvoiceReplyLine) {
	v.value = val
	v.isSet = true
}

func (v NullableNextInvoiceReplyLine) IsSet() bool {
	return v.isSet
}

func (v *NullableNextInvoiceReplyLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextInvoiceReplyLine(val *NextInvoiceReplyLine) *NullableNextInvoiceReplyLine {
	return &NullableNextInvoiceReplyLine{value: val, isSet: true}
}

func (v NullableNextInvoiceReplyLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextInvoiceReplyLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


