/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// DeploymentMetadata struct for DeploymentMetadata
type DeploymentMetadata struct {
	Trigger *TriggerDeploymentMetadata `json:"trigger,omitempty"`
	Database *DatabaseDeploymentMetadata `json:"database,omitempty"`
	Git *GitDeploymentMetadata `json:"git,omitempty"`
	Archive *ArchiveDeploymentMetadata `json:"archive,omitempty"`
	ProxyPorts []DeploymentProxyPortMetadata `json:"proxy_ports,omitempty"`
}

// NewDeploymentMetadata instantiates a new DeploymentMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentMetadata() *DeploymentMetadata {
	this := DeploymentMetadata{}
	return &this
}

// NewDeploymentMetadataWithDefaults instantiates a new DeploymentMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentMetadataWithDefaults() *DeploymentMetadata {
	this := DeploymentMetadata{}
	return &this
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *DeploymentMetadata) GetTrigger() TriggerDeploymentMetadata {
	if o == nil || isNil(o.Trigger) {
		var ret TriggerDeploymentMetadata
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentMetadata) GetTriggerOk() (*TriggerDeploymentMetadata, bool) {
	if o == nil || isNil(o.Trigger) {
    return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *DeploymentMetadata) HasTrigger() bool {
	if o != nil && !isNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given TriggerDeploymentMetadata and assigns it to the Trigger field.
func (o *DeploymentMetadata) SetTrigger(v TriggerDeploymentMetadata) {
	o.Trigger = &v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *DeploymentMetadata) GetDatabase() DatabaseDeploymentMetadata {
	if o == nil || isNil(o.Database) {
		var ret DatabaseDeploymentMetadata
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentMetadata) GetDatabaseOk() (*DatabaseDeploymentMetadata, bool) {
	if o == nil || isNil(o.Database) {
    return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *DeploymentMetadata) HasDatabase() bool {
	if o != nil && !isNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given DatabaseDeploymentMetadata and assigns it to the Database field.
func (o *DeploymentMetadata) SetDatabase(v DatabaseDeploymentMetadata) {
	o.Database = &v
}

// GetGit returns the Git field value if set, zero value otherwise.
func (o *DeploymentMetadata) GetGit() GitDeploymentMetadata {
	if o == nil || isNil(o.Git) {
		var ret GitDeploymentMetadata
		return ret
	}
	return *o.Git
}

// GetGitOk returns a tuple with the Git field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentMetadata) GetGitOk() (*GitDeploymentMetadata, bool) {
	if o == nil || isNil(o.Git) {
    return nil, false
	}
	return o.Git, true
}

// HasGit returns a boolean if a field has been set.
func (o *DeploymentMetadata) HasGit() bool {
	if o != nil && !isNil(o.Git) {
		return true
	}

	return false
}

// SetGit gets a reference to the given GitDeploymentMetadata and assigns it to the Git field.
func (o *DeploymentMetadata) SetGit(v GitDeploymentMetadata) {
	o.Git = &v
}

// GetArchive returns the Archive field value if set, zero value otherwise.
func (o *DeploymentMetadata) GetArchive() ArchiveDeploymentMetadata {
	if o == nil || isNil(o.Archive) {
		var ret ArchiveDeploymentMetadata
		return ret
	}
	return *o.Archive
}

// GetArchiveOk returns a tuple with the Archive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentMetadata) GetArchiveOk() (*ArchiveDeploymentMetadata, bool) {
	if o == nil || isNil(o.Archive) {
    return nil, false
	}
	return o.Archive, true
}

// HasArchive returns a boolean if a field has been set.
func (o *DeploymentMetadata) HasArchive() bool {
	if o != nil && !isNil(o.Archive) {
		return true
	}

	return false
}

// SetArchive gets a reference to the given ArchiveDeploymentMetadata and assigns it to the Archive field.
func (o *DeploymentMetadata) SetArchive(v ArchiveDeploymentMetadata) {
	o.Archive = &v
}

// GetProxyPorts returns the ProxyPorts field value if set, zero value otherwise.
func (o *DeploymentMetadata) GetProxyPorts() []DeploymentProxyPortMetadata {
	if o == nil || isNil(o.ProxyPorts) {
		var ret []DeploymentProxyPortMetadata
		return ret
	}
	return o.ProxyPorts
}

// GetProxyPortsOk returns a tuple with the ProxyPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentMetadata) GetProxyPortsOk() ([]DeploymentProxyPortMetadata, bool) {
	if o == nil || isNil(o.ProxyPorts) {
    return nil, false
	}
	return o.ProxyPorts, true
}

// HasProxyPorts returns a boolean if a field has been set.
func (o *DeploymentMetadata) HasProxyPorts() bool {
	if o != nil && !isNil(o.ProxyPorts) {
		return true
	}

	return false
}

// SetProxyPorts gets a reference to the given []DeploymentProxyPortMetadata and assigns it to the ProxyPorts field.
func (o *DeploymentMetadata) SetProxyPorts(v []DeploymentProxyPortMetadata) {
	o.ProxyPorts = v
}

func (o DeploymentMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !isNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !isNil(o.Git) {
		toSerialize["git"] = o.Git
	}
	if !isNil(o.Archive) {
		toSerialize["archive"] = o.Archive
	}
	if !isNil(o.ProxyPorts) {
		toSerialize["proxy_ports"] = o.ProxyPorts
	}
	return json.Marshal(toSerialize)
}

type NullableDeploymentMetadata struct {
	value *DeploymentMetadata
	isSet bool
}

func (v NullableDeploymentMetadata) Get() *DeploymentMetadata {
	return v.value
}

func (v *NullableDeploymentMetadata) Set(val *DeploymentMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentMetadata(val *DeploymentMetadata) *NullableDeploymentMetadata {
	return &NullableDeploymentMetadata{value: val, isSet: true}
}

func (v NullableDeploymentMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


