/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the UpdateServiceReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateServiceReply{}

// UpdateServiceReply struct for UpdateServiceReply
type UpdateServiceReply struct {
	Service *Service `json:"service,omitempty"`
}

// NewUpdateServiceReply instantiates a new UpdateServiceReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateServiceReply() *UpdateServiceReply {
	this := UpdateServiceReply{}
	return &this
}

// NewUpdateServiceReplyWithDefaults instantiates a new UpdateServiceReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateServiceReplyWithDefaults() *UpdateServiceReply {
	this := UpdateServiceReply{}
	return &this
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *UpdateServiceReply) GetService() Service {
	if o == nil || IsNil(o.Service) {
		var ret Service
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServiceReply) GetServiceOk() (*Service, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *UpdateServiceReply) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given Service and assigns it to the Service field.
func (o *UpdateServiceReply) SetService(v Service) {
	o.Service = &v
}

func (o UpdateServiceReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateServiceReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	return toSerialize, nil
}

type NullableUpdateServiceReply struct {
	value *UpdateServiceReply
	isSet bool
}

func (v NullableUpdateServiceReply) Get() *UpdateServiceReply {
	return v.value
}

func (v *NullableUpdateServiceReply) Set(val *UpdateServiceReply) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateServiceReply) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateServiceReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateServiceReply(val *UpdateServiceReply) *NullableUpdateServiceReply {
	return &NullableUpdateServiceReply{value: val, isSet: true}
}

func (v NullableUpdateServiceReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateServiceReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


