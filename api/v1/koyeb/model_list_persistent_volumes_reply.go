/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// ListPersistentVolumesReply struct for ListPersistentVolumesReply
type ListPersistentVolumesReply struct {
	Volumes []PersistentVolume `json:"volumes,omitempty"`
	Limit *int64 `json:"limit,omitempty"`
	Offset *int64 `json:"offset,omitempty"`
}

// NewListPersistentVolumesReply instantiates a new ListPersistentVolumesReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPersistentVolumesReply() *ListPersistentVolumesReply {
	this := ListPersistentVolumesReply{}
	return &this
}

// NewListPersistentVolumesReplyWithDefaults instantiates a new ListPersistentVolumesReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPersistentVolumesReplyWithDefaults() *ListPersistentVolumesReply {
	this := ListPersistentVolumesReply{}
	return &this
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *ListPersistentVolumesReply) GetVolumes() []PersistentVolume {
	if o == nil || isNil(o.Volumes) {
		var ret []PersistentVolume
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPersistentVolumesReply) GetVolumesOk() ([]PersistentVolume, bool) {
	if o == nil || isNil(o.Volumes) {
    return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *ListPersistentVolumesReply) HasVolumes() bool {
	if o != nil && !isNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []PersistentVolume and assigns it to the Volumes field.
func (o *ListPersistentVolumesReply) SetVolumes(v []PersistentVolume) {
	o.Volumes = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ListPersistentVolumesReply) GetLimit() int64 {
	if o == nil || isNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPersistentVolumesReply) GetLimitOk() (*int64, bool) {
	if o == nil || isNil(o.Limit) {
    return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ListPersistentVolumesReply) HasLimit() bool {
	if o != nil && !isNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *ListPersistentVolumesReply) SetLimit(v int64) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ListPersistentVolumesReply) GetOffset() int64 {
	if o == nil || isNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPersistentVolumesReply) GetOffsetOk() (*int64, bool) {
	if o == nil || isNil(o.Offset) {
    return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ListPersistentVolumesReply) HasOffset() bool {
	if o != nil && !isNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *ListPersistentVolumesReply) SetOffset(v int64) {
	o.Offset = &v
}

func (o ListPersistentVolumesReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	if !isNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !isNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return json.Marshal(toSerialize)
}

type NullableListPersistentVolumesReply struct {
	value *ListPersistentVolumesReply
	isSet bool
}

func (v NullableListPersistentVolumesReply) Get() *ListPersistentVolumesReply {
	return v.value
}

func (v *NullableListPersistentVolumesReply) Set(val *ListPersistentVolumesReply) {
	v.value = val
	v.isSet = true
}

func (v NullableListPersistentVolumesReply) IsSet() bool {
	return v.isSet
}

func (v *NullableListPersistentVolumesReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPersistentVolumesReply(val *ListPersistentVolumesReply) *NullableListPersistentVolumesReply {
	return &NullableListPersistentVolumesReply{value: val, isSet: true}
}

func (v NullableListPersistentVolumesReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPersistentVolumesReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


