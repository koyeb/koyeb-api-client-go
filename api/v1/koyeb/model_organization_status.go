/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// OrganizationStatus the model 'OrganizationStatus'
type OrganizationStatus string

// List of Organization.Status
const (
	ORGANIZATIONSTATUS_WARNING OrganizationStatus = "WARNING"
	ORGANIZATIONSTATUS_LOCKED OrganizationStatus = "LOCKED"
	ORGANIZATIONSTATUS_ACTIVE OrganizationStatus = "ACTIVE"
	ORGANIZATIONSTATUS_DEACTIVATING OrganizationStatus = "DEACTIVATING"
	ORGANIZATIONSTATUS_DEACTIVATED OrganizationStatus = "DEACTIVATED"
	ORGANIZATIONSTATUS_DELETING OrganizationStatus = "DELETING"
	ORGANIZATIONSTATUS_DELETED OrganizationStatus = "DELETED"
)

// All allowed values of OrganizationStatus enum
var AllowedOrganizationStatusEnumValues = []OrganizationStatus{
	"WARNING",
	"LOCKED",
	"ACTIVE",
	"DEACTIVATING",
	"DEACTIVATED",
	"DELETING",
	"DELETED",
}

func (v *OrganizationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationStatus(value)
	for _, existing := range AllowedOrganizationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationStatus", value)
}

// NewOrganizationStatusFromValue returns a pointer to a valid OrganizationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationStatusFromValue(v string) (*OrganizationStatus, error) {
	ev := OrganizationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationStatus: valid values are %v", v, AllowedOrganizationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationStatus) IsValid() bool {
	for _, existing := range AllowedOrganizationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Organization.Status value
func (v OrganizationStatus) Ptr() *OrganizationStatus {
	return &v
}

type NullableOrganizationStatus struct {
	value *OrganizationStatus
	isSet bool
}

func (v NullableOrganizationStatus) Get() *OrganizationStatus {
	return v.value
}

func (v *NullableOrganizationStatus) Set(val *OrganizationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationStatus(val *OrganizationStatus) *NullableOrganizationStatus {
	return &NullableOrganizationStatus{value: val, isSet: true}
}

func (v NullableOrganizationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

