/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// KgitproxyRepositoryProvider the model 'KgitproxyRepositoryProvider'
type KgitproxyRepositoryProvider string

// List of kgitproxy.RepositoryProvider
const (
	KGITPROXYREPOSITORYPROVIDER_INVALID_PROVIDER KgitproxyRepositoryProvider = "INVALID_PROVIDER"
	KGITPROXYREPOSITORYPROVIDER_GITHUB KgitproxyRepositoryProvider = "GITHUB"
)

var allowedKgitproxyRepositoryProviderEnumValues = []KgitproxyRepositoryProvider{
	"INVALID_PROVIDER",
	"GITHUB",
}

func (v *KgitproxyRepositoryProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KgitproxyRepositoryProvider(value)
	for _, existing := range allowedKgitproxyRepositoryProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KgitproxyRepositoryProvider", value)
}

// NewKgitproxyRepositoryProviderFromValue returns a pointer to a valid KgitproxyRepositoryProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKgitproxyRepositoryProviderFromValue(v string) (*KgitproxyRepositoryProvider, error) {
	ev := KgitproxyRepositoryProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KgitproxyRepositoryProvider: valid values are %v", v, allowedKgitproxyRepositoryProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KgitproxyRepositoryProvider) IsValid() bool {
	for _, existing := range allowedKgitproxyRepositoryProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to kgitproxy.RepositoryProvider value
func (v KgitproxyRepositoryProvider) Ptr() *KgitproxyRepositoryProvider {
	return &v
}

type NullableKgitproxyRepositoryProvider struct {
	value *KgitproxyRepositoryProvider
	isSet bool
}

func (v NullableKgitproxyRepositoryProvider) Get() *KgitproxyRepositoryProvider {
	return v.value
}

func (v *NullableKgitproxyRepositoryProvider) Set(val *KgitproxyRepositoryProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableKgitproxyRepositoryProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableKgitproxyRepositoryProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKgitproxyRepositoryProvider(val *KgitproxyRepositoryProvider) *NullableKgitproxyRepositoryProvider {
	return &NullableKgitproxyRepositoryProvider{value: val, isSet: true}
}

func (v NullableKgitproxyRepositoryProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKgitproxyRepositoryProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

