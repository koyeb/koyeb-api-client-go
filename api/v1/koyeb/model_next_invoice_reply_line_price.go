/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// NextInvoiceReplyLinePrice struct for NextInvoiceReplyLinePrice
type NextInvoiceReplyLinePrice struct {
	UnitAmountDecimal *float64 `json:"unit_amount_decimal,omitempty"`
}

// NewNextInvoiceReplyLinePrice instantiates a new NextInvoiceReplyLinePrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNextInvoiceReplyLinePrice() *NextInvoiceReplyLinePrice {
	this := NextInvoiceReplyLinePrice{}
	return &this
}

// NewNextInvoiceReplyLinePriceWithDefaults instantiates a new NextInvoiceReplyLinePrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextInvoiceReplyLinePriceWithDefaults() *NextInvoiceReplyLinePrice {
	this := NextInvoiceReplyLinePrice{}
	return &this
}

// GetUnitAmountDecimal returns the UnitAmountDecimal field value if set, zero value otherwise.
func (o *NextInvoiceReplyLinePrice) GetUnitAmountDecimal() float64 {
	if o == nil || isNil(o.UnitAmountDecimal) {
		var ret float64
		return ret
	}
	return *o.UnitAmountDecimal
}

// GetUnitAmountDecimalOk returns a tuple with the UnitAmountDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextInvoiceReplyLinePrice) GetUnitAmountDecimalOk() (*float64, bool) {
	if o == nil || isNil(o.UnitAmountDecimal) {
    return nil, false
	}
	return o.UnitAmountDecimal, true
}

// HasUnitAmountDecimal returns a boolean if a field has been set.
func (o *NextInvoiceReplyLinePrice) HasUnitAmountDecimal() bool {
	if o != nil && !isNil(o.UnitAmountDecimal) {
		return true
	}

	return false
}

// SetUnitAmountDecimal gets a reference to the given float64 and assigns it to the UnitAmountDecimal field.
func (o *NextInvoiceReplyLinePrice) SetUnitAmountDecimal(v float64) {
	o.UnitAmountDecimal = &v
}

func (o NextInvoiceReplyLinePrice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.UnitAmountDecimal) {
		toSerialize["unit_amount_decimal"] = o.UnitAmountDecimal
	}
	return json.Marshal(toSerialize)
}

type NullableNextInvoiceReplyLinePrice struct {
	value *NextInvoiceReplyLinePrice
	isSet bool
}

func (v NullableNextInvoiceReplyLinePrice) Get() *NextInvoiceReplyLinePrice {
	return v.value
}

func (v *NullableNextInvoiceReplyLinePrice) Set(val *NextInvoiceReplyLinePrice) {
	v.value = val
	v.isSet = true
}

func (v NullableNextInvoiceReplyLinePrice) IsSet() bool {
	return v.isSet
}

func (v *NullableNextInvoiceReplyLinePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextInvoiceReplyLinePrice(val *NextInvoiceReplyLinePrice) *NullableNextInvoiceReplyLinePrice {
	return &NullableNextInvoiceReplyLinePrice{value: val, isSet: true}
}

func (v NullableNextInvoiceReplyLinePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextInvoiceReplyLinePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


