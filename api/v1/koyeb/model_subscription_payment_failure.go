/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"time"
)

// checks if the SubscriptionPaymentFailure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPaymentFailure{}

// SubscriptionPaymentFailure struct for SubscriptionPaymentFailure
type SubscriptionPaymentFailure struct {
	FailedAt *time.Time `json:"failed_at,omitempty"`
	NextAttempt *time.Time `json:"next_attempt,omitempty"`
	AttemptCount *string `json:"attempt_count,omitempty"`
	ErrorCode *string `json:"error_code,omitempty"`
	ErrorReason *string `json:"error_reason,omitempty"`
	ErrorType *string `json:"error_type,omitempty"`
	ErrorMessage *string `json:"error_message,omitempty"`
	PaymentMethodRequired *bool `json:"payment_method_required,omitempty"`
	RedirectUrl *string `json:"redirect_url,omitempty"`
	StripeSdk *SubscriptionPaymentFailureStripeSDK `json:"stripe_sdk,omitempty"`
}

// NewSubscriptionPaymentFailure instantiates a new SubscriptionPaymentFailure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPaymentFailure() *SubscriptionPaymentFailure {
	this := SubscriptionPaymentFailure{}
	return &this
}

// NewSubscriptionPaymentFailureWithDefaults instantiates a new SubscriptionPaymentFailure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPaymentFailureWithDefaults() *SubscriptionPaymentFailure {
	this := SubscriptionPaymentFailure{}
	return &this
}

// GetFailedAt returns the FailedAt field value if set, zero value otherwise.
func (o *SubscriptionPaymentFailure) GetFailedAt() time.Time {
	if o == nil || IsNil(o.FailedAt) {
		var ret time.Time
		return ret
	}
	return *o.FailedAt
}

// GetFailedAtOk returns a tuple with the FailedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPaymentFailure) GetFailedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FailedAt) {
		return nil, false
	}
	return o.FailedAt, true
}

// HasFailedAt returns a boolean if a field has been set.
func (o *SubscriptionPaymentFailure) HasFailedAt() bool {
	if o != nil && !IsNil(o.FailedAt) {
		return true
	}

	return false
}

// SetFailedAt gets a reference to the given time.Time and assigns it to the FailedAt field.
func (o *SubscriptionPaymentFailure) SetFailedAt(v time.Time) {
	o.FailedAt = &v
}

// GetNextAttempt returns the NextAttempt field value if set, zero value otherwise.
func (o *SubscriptionPaymentFailure) GetNextAttempt() time.Time {
	if o == nil || IsNil(o.NextAttempt) {
		var ret time.Time
		return ret
	}
	return *o.NextAttempt
}

// GetNextAttemptOk returns a tuple with the NextAttempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPaymentFailure) GetNextAttemptOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextAttempt) {
		return nil, false
	}
	return o.NextAttempt, true
}

// HasNextAttempt returns a boolean if a field has been set.
func (o *SubscriptionPaymentFailure) HasNextAttempt() bool {
	if o != nil && !IsNil(o.NextAttempt) {
		return true
	}

	return false
}

// SetNextAttempt gets a reference to the given time.Time and assigns it to the NextAttempt field.
func (o *SubscriptionPaymentFailure) SetNextAttempt(v time.Time) {
	o.NextAttempt = &v
}

// GetAttemptCount returns the AttemptCount field value if set, zero value otherwise.
func (o *SubscriptionPaymentFailure) GetAttemptCount() string {
	if o == nil || IsNil(o.AttemptCount) {
		var ret string
		return ret
	}
	return *o.AttemptCount
}

// GetAttemptCountOk returns a tuple with the AttemptCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPaymentFailure) GetAttemptCountOk() (*string, bool) {
	if o == nil || IsNil(o.AttemptCount) {
		return nil, false
	}
	return o.AttemptCount, true
}

// HasAttemptCount returns a boolean if a field has been set.
func (o *SubscriptionPaymentFailure) HasAttemptCount() bool {
	if o != nil && !IsNil(o.AttemptCount) {
		return true
	}

	return false
}

// SetAttemptCount gets a reference to the given string and assigns it to the AttemptCount field.
func (o *SubscriptionPaymentFailure) SetAttemptCount(v string) {
	o.AttemptCount = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *SubscriptionPaymentFailure) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPaymentFailure) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *SubscriptionPaymentFailure) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *SubscriptionPaymentFailure) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErrorReason returns the ErrorReason field value if set, zero value otherwise.
func (o *SubscriptionPaymentFailure) GetErrorReason() string {
	if o == nil || IsNil(o.ErrorReason) {
		var ret string
		return ret
	}
	return *o.ErrorReason
}

// GetErrorReasonOk returns a tuple with the ErrorReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPaymentFailure) GetErrorReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorReason) {
		return nil, false
	}
	return o.ErrorReason, true
}

// HasErrorReason returns a boolean if a field has been set.
func (o *SubscriptionPaymentFailure) HasErrorReason() bool {
	if o != nil && !IsNil(o.ErrorReason) {
		return true
	}

	return false
}

// SetErrorReason gets a reference to the given string and assigns it to the ErrorReason field.
func (o *SubscriptionPaymentFailure) SetErrorReason(v string) {
	o.ErrorReason = &v
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *SubscriptionPaymentFailure) GetErrorType() string {
	if o == nil || IsNil(o.ErrorType) {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPaymentFailure) GetErrorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorType) {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *SubscriptionPaymentFailure) HasErrorType() bool {
	if o != nil && !IsNil(o.ErrorType) {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *SubscriptionPaymentFailure) SetErrorType(v string) {
	o.ErrorType = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *SubscriptionPaymentFailure) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPaymentFailure) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *SubscriptionPaymentFailure) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *SubscriptionPaymentFailure) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetPaymentMethodRequired returns the PaymentMethodRequired field value if set, zero value otherwise.
func (o *SubscriptionPaymentFailure) GetPaymentMethodRequired() bool {
	if o == nil || IsNil(o.PaymentMethodRequired) {
		var ret bool
		return ret
	}
	return *o.PaymentMethodRequired
}

// GetPaymentMethodRequiredOk returns a tuple with the PaymentMethodRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPaymentFailure) GetPaymentMethodRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.PaymentMethodRequired) {
		return nil, false
	}
	return o.PaymentMethodRequired, true
}

// HasPaymentMethodRequired returns a boolean if a field has been set.
func (o *SubscriptionPaymentFailure) HasPaymentMethodRequired() bool {
	if o != nil && !IsNil(o.PaymentMethodRequired) {
		return true
	}

	return false
}

// SetPaymentMethodRequired gets a reference to the given bool and assigns it to the PaymentMethodRequired field.
func (o *SubscriptionPaymentFailure) SetPaymentMethodRequired(v bool) {
	o.PaymentMethodRequired = &v
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise.
func (o *SubscriptionPaymentFailure) GetRedirectUrl() string {
	if o == nil || IsNil(o.RedirectUrl) {
		var ret string
		return ret
	}
	return *o.RedirectUrl
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPaymentFailure) GetRedirectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectUrl) {
		return nil, false
	}
	return o.RedirectUrl, true
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *SubscriptionPaymentFailure) HasRedirectUrl() bool {
	if o != nil && !IsNil(o.RedirectUrl) {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given string and assigns it to the RedirectUrl field.
func (o *SubscriptionPaymentFailure) SetRedirectUrl(v string) {
	o.RedirectUrl = &v
}

// GetStripeSdk returns the StripeSdk field value if set, zero value otherwise.
func (o *SubscriptionPaymentFailure) GetStripeSdk() SubscriptionPaymentFailureStripeSDK {
	if o == nil || IsNil(o.StripeSdk) {
		var ret SubscriptionPaymentFailureStripeSDK
		return ret
	}
	return *o.StripeSdk
}

// GetStripeSdkOk returns a tuple with the StripeSdk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPaymentFailure) GetStripeSdkOk() (*SubscriptionPaymentFailureStripeSDK, bool) {
	if o == nil || IsNil(o.StripeSdk) {
		return nil, false
	}
	return o.StripeSdk, true
}

// HasStripeSdk returns a boolean if a field has been set.
func (o *SubscriptionPaymentFailure) HasStripeSdk() bool {
	if o != nil && !IsNil(o.StripeSdk) {
		return true
	}

	return false
}

// SetStripeSdk gets a reference to the given SubscriptionPaymentFailureStripeSDK and assigns it to the StripeSdk field.
func (o *SubscriptionPaymentFailure) SetStripeSdk(v SubscriptionPaymentFailureStripeSDK) {
	o.StripeSdk = &v
}

func (o SubscriptionPaymentFailure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPaymentFailure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FailedAt) {
		toSerialize["failed_at"] = o.FailedAt
	}
	if !IsNil(o.NextAttempt) {
		toSerialize["next_attempt"] = o.NextAttempt
	}
	if !IsNil(o.AttemptCount) {
		toSerialize["attempt_count"] = o.AttemptCount
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	if !IsNil(o.ErrorReason) {
		toSerialize["error_reason"] = o.ErrorReason
	}
	if !IsNil(o.ErrorType) {
		toSerialize["error_type"] = o.ErrorType
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if !IsNil(o.PaymentMethodRequired) {
		toSerialize["payment_method_required"] = o.PaymentMethodRequired
	}
	if !IsNil(o.RedirectUrl) {
		toSerialize["redirect_url"] = o.RedirectUrl
	}
	if !IsNil(o.StripeSdk) {
		toSerialize["stripe_sdk"] = o.StripeSdk
	}
	return toSerialize, nil
}

type NullableSubscriptionPaymentFailure struct {
	value *SubscriptionPaymentFailure
	isSet bool
}

func (v NullableSubscriptionPaymentFailure) Get() *SubscriptionPaymentFailure {
	return v.value
}

func (v *NullableSubscriptionPaymentFailure) Set(val *SubscriptionPaymentFailure) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPaymentFailure) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPaymentFailure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPaymentFailure(val *SubscriptionPaymentFailure) *NullableSubscriptionPaymentFailure {
	return &NullableSubscriptionPaymentFailure{value: val, isSet: true}
}

func (v NullableSubscriptionPaymentFailure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPaymentFailure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


