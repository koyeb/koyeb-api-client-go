/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the OAuthProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuthProvider{}

// OAuthProvider struct for OAuthProvider
type OAuthProvider struct {
	Id *string `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewOAuthProvider instantiates a new OAuthProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthProvider() *OAuthProvider {
	this := OAuthProvider{}
	return &this
}

// NewOAuthProviderWithDefaults instantiates a new OAuthProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthProviderWithDefaults() *OAuthProvider {
	this := OAuthProvider{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OAuthProvider) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthProvider) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OAuthProvider) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OAuthProvider) SetId(v string) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *OAuthProvider) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthProvider) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *OAuthProvider) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *OAuthProvider) SetUrl(v string) {
	o.Url = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *OAuthProvider) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthProvider) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *OAuthProvider) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *OAuthProvider) SetState(v string) {
	o.State = &v
}

func (o OAuthProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuthProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableOAuthProvider struct {
	value *OAuthProvider
	isSet bool
}

func (v NullableOAuthProvider) Get() *OAuthProvider {
	return v.value
}

func (v *NullableOAuthProvider) Set(val *OAuthProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthProvider(val *OAuthProvider) *NullableOAuthProvider {
	return &NullableOAuthProvider{value: val, isSet: true}
}

func (v NullableOAuthProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


