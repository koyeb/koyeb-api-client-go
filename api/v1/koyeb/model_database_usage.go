/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// DatabaseUsage struct for DatabaseUsage
type DatabaseUsage struct {
	ServiceId *string `json:"service_id,omitempty"`
	ServiceName *string `json:"service_name,omitempty"`
	ComputeTimeSeconds *int64 `json:"compute_time_seconds,omitempty"`
	DataStorageMegabytesHours *int64 `json:"data_storage_megabytes_hours,omitempty"`
}

// NewDatabaseUsage instantiates a new DatabaseUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseUsage() *DatabaseUsage {
	this := DatabaseUsage{}
	return &this
}

// NewDatabaseUsageWithDefaults instantiates a new DatabaseUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseUsageWithDefaults() *DatabaseUsage {
	this := DatabaseUsage{}
	return &this
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *DatabaseUsage) GetServiceId() string {
	if o == nil || isNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseUsage) GetServiceIdOk() (*string, bool) {
	if o == nil || isNil(o.ServiceId) {
    return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *DatabaseUsage) HasServiceId() bool {
	if o != nil && !isNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *DatabaseUsage) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *DatabaseUsage) GetServiceName() string {
	if o == nil || isNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseUsage) GetServiceNameOk() (*string, bool) {
	if o == nil || isNil(o.ServiceName) {
    return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *DatabaseUsage) HasServiceName() bool {
	if o != nil && !isNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *DatabaseUsage) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetComputeTimeSeconds returns the ComputeTimeSeconds field value if set, zero value otherwise.
func (o *DatabaseUsage) GetComputeTimeSeconds() int64 {
	if o == nil || isNil(o.ComputeTimeSeconds) {
		var ret int64
		return ret
	}
	return *o.ComputeTimeSeconds
}

// GetComputeTimeSecondsOk returns a tuple with the ComputeTimeSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseUsage) GetComputeTimeSecondsOk() (*int64, bool) {
	if o == nil || isNil(o.ComputeTimeSeconds) {
    return nil, false
	}
	return o.ComputeTimeSeconds, true
}

// HasComputeTimeSeconds returns a boolean if a field has been set.
func (o *DatabaseUsage) HasComputeTimeSeconds() bool {
	if o != nil && !isNil(o.ComputeTimeSeconds) {
		return true
	}

	return false
}

// SetComputeTimeSeconds gets a reference to the given int64 and assigns it to the ComputeTimeSeconds field.
func (o *DatabaseUsage) SetComputeTimeSeconds(v int64) {
	o.ComputeTimeSeconds = &v
}

// GetDataStorageMegabytesHours returns the DataStorageMegabytesHours field value if set, zero value otherwise.
func (o *DatabaseUsage) GetDataStorageMegabytesHours() int64 {
	if o == nil || isNil(o.DataStorageMegabytesHours) {
		var ret int64
		return ret
	}
	return *o.DataStorageMegabytesHours
}

// GetDataStorageMegabytesHoursOk returns a tuple with the DataStorageMegabytesHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseUsage) GetDataStorageMegabytesHoursOk() (*int64, bool) {
	if o == nil || isNil(o.DataStorageMegabytesHours) {
    return nil, false
	}
	return o.DataStorageMegabytesHours, true
}

// HasDataStorageMegabytesHours returns a boolean if a field has been set.
func (o *DatabaseUsage) HasDataStorageMegabytesHours() bool {
	if o != nil && !isNil(o.DataStorageMegabytesHours) {
		return true
	}

	return false
}

// SetDataStorageMegabytesHours gets a reference to the given int64 and assigns it to the DataStorageMegabytesHours field.
func (o *DatabaseUsage) SetDataStorageMegabytesHours(v int64) {
	o.DataStorageMegabytesHours = &v
}

func (o DatabaseUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ServiceId) {
		toSerialize["service_id"] = o.ServiceId
	}
	if !isNil(o.ServiceName) {
		toSerialize["service_name"] = o.ServiceName
	}
	if !isNil(o.ComputeTimeSeconds) {
		toSerialize["compute_time_seconds"] = o.ComputeTimeSeconds
	}
	if !isNil(o.DataStorageMegabytesHours) {
		toSerialize["data_storage_megabytes_hours"] = o.DataStorageMegabytesHours
	}
	return json.Marshal(toSerialize)
}

type NullableDatabaseUsage struct {
	value *DatabaseUsage
	isSet bool
}

func (v NullableDatabaseUsage) Get() *DatabaseUsage {
	return v.value
}

func (v *NullableDatabaseUsage) Set(val *DatabaseUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseUsage(val *DatabaseUsage) *NullableDatabaseUsage {
	return &NullableDatabaseUsage{value: val, isSet: true}
}

func (v NullableDatabaseUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


