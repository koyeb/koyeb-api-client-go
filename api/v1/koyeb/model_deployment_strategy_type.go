/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// DeploymentStrategyType  - DEPLOYMENT_STRATEGY_TYPE_INVALID: Invalid / Zero value.  - DEPLOYMENT_STRATEGY_TYPE_CANARY: Use canary strategy.  - DEPLOYMENT_STRATEGY_TYPE_ROLLING: Use rolling strategy.  - DEPLOYMENT_STRATEGY_TYPE_BLUE_GREEN: Use blue green strategy.  - DEPLOYMENT_STRATEGY_TYPE_IMMEDIATE: Use immediate strategy.
type DeploymentStrategyType string

// List of DeploymentStrategyType
const (
	DEPLOYMENTSTRATEGYTYPE_INVALID DeploymentStrategyType = "DEPLOYMENT_STRATEGY_TYPE_INVALID"
	DEPLOYMENTSTRATEGYTYPE_CANARY DeploymentStrategyType = "DEPLOYMENT_STRATEGY_TYPE_CANARY"
	DEPLOYMENTSTRATEGYTYPE_ROLLING DeploymentStrategyType = "DEPLOYMENT_STRATEGY_TYPE_ROLLING"
	DEPLOYMENTSTRATEGYTYPE_BLUE_GREEN DeploymentStrategyType = "DEPLOYMENT_STRATEGY_TYPE_BLUE_GREEN"
	DEPLOYMENTSTRATEGYTYPE_IMMEDIATE DeploymentStrategyType = "DEPLOYMENT_STRATEGY_TYPE_IMMEDIATE"
)

// All allowed values of DeploymentStrategyType enum
var AllowedDeploymentStrategyTypeEnumValues = []DeploymentStrategyType{
	"DEPLOYMENT_STRATEGY_TYPE_INVALID",
	"DEPLOYMENT_STRATEGY_TYPE_CANARY",
	"DEPLOYMENT_STRATEGY_TYPE_ROLLING",
	"DEPLOYMENT_STRATEGY_TYPE_BLUE_GREEN",
	"DEPLOYMENT_STRATEGY_TYPE_IMMEDIATE",
}

func (v *DeploymentStrategyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentStrategyType(value)
	for _, existing := range AllowedDeploymentStrategyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentStrategyType", value)
}

// NewDeploymentStrategyTypeFromValue returns a pointer to a valid DeploymentStrategyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentStrategyTypeFromValue(v string) (*DeploymentStrategyType, error) {
	ev := DeploymentStrategyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentStrategyType: valid values are %v", v, AllowedDeploymentStrategyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentStrategyType) IsValid() bool {
	for _, existing := range AllowedDeploymentStrategyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentStrategyType value
func (v DeploymentStrategyType) Ptr() *DeploymentStrategyType {
	return &v
}

type NullableDeploymentStrategyType struct {
	value *DeploymentStrategyType
	isSet bool
}

func (v NullableDeploymentStrategyType) Get() *DeploymentStrategyType {
	return v.value
}

func (v *NullableDeploymentStrategyType) Set(val *DeploymentStrategyType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentStrategyType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentStrategyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentStrategyType(val *DeploymentStrategyType) *NullableDeploymentStrategyType {
	return &NullableDeploymentStrategyType{value: val, isSet: true}
}

func (v NullableDeploymentStrategyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentStrategyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

