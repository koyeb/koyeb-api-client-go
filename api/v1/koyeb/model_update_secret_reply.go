/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the UpdateSecretReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSecretReply{}

// UpdateSecretReply struct for UpdateSecretReply
type UpdateSecretReply struct {
	Secret *Secret `json:"secret,omitempty"`
}

// NewUpdateSecretReply instantiates a new UpdateSecretReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSecretReply() *UpdateSecretReply {
	this := UpdateSecretReply{}
	return &this
}

// NewUpdateSecretReplyWithDefaults instantiates a new UpdateSecretReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSecretReplyWithDefaults() *UpdateSecretReply {
	this := UpdateSecretReply{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *UpdateSecretReply) GetSecret() Secret {
	if o == nil || IsNil(o.Secret) {
		var ret Secret
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSecretReply) GetSecretOk() (*Secret, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *UpdateSecretReply) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given Secret and assigns it to the Secret field.
func (o *UpdateSecretReply) SetSecret(v Secret) {
	o.Secret = &v
}

func (o UpdateSecretReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSecretReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableUpdateSecretReply struct {
	value *UpdateSecretReply
	isSet bool
}

func (v NullableUpdateSecretReply) Get() *UpdateSecretReply {
	return v.value
}

func (v *NullableUpdateSecretReply) Set(val *UpdateSecretReply) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSecretReply) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSecretReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSecretReply(val *UpdateSecretReply) *NullableUpdateSecretReply {
	return &NullableUpdateSecretReply{value: val, isSet: true}
}

func (v NullableUpdateSecretReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSecretReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


