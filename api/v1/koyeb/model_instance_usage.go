/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the InstanceUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceUsage{}

// InstanceUsage struct for InstanceUsage
type InstanceUsage struct {
	DurationSeconds *int64 `json:"duration_seconds,omitempty"`
}

// NewInstanceUsage instantiates a new InstanceUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceUsage() *InstanceUsage {
	this := InstanceUsage{}
	return &this
}

// NewInstanceUsageWithDefaults instantiates a new InstanceUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceUsageWithDefaults() *InstanceUsage {
	this := InstanceUsage{}
	return &this
}

// GetDurationSeconds returns the DurationSeconds field value if set, zero value otherwise.
func (o *InstanceUsage) GetDurationSeconds() int64 {
	if o == nil || IsNil(o.DurationSeconds) {
		var ret int64
		return ret
	}
	return *o.DurationSeconds
}

// GetDurationSecondsOk returns a tuple with the DurationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceUsage) GetDurationSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.DurationSeconds) {
		return nil, false
	}
	return o.DurationSeconds, true
}

// HasDurationSeconds returns a boolean if a field has been set.
func (o *InstanceUsage) HasDurationSeconds() bool {
	if o != nil && !IsNil(o.DurationSeconds) {
		return true
	}

	return false
}

// SetDurationSeconds gets a reference to the given int64 and assigns it to the DurationSeconds field.
func (o *InstanceUsage) SetDurationSeconds(v int64) {
	o.DurationSeconds = &v
}

func (o InstanceUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DurationSeconds) {
		toSerialize["duration_seconds"] = o.DurationSeconds
	}
	return toSerialize, nil
}

type NullableInstanceUsage struct {
	value *InstanceUsage
	isSet bool
}

func (v NullableInstanceUsage) Get() *InstanceUsage {
	return v.value
}

func (v *NullableInstanceUsage) Set(val *InstanceUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceUsage(val *InstanceUsage) *NullableInstanceUsage {
	return &NullableInstanceUsage{value: val, isSet: true}
}

func (v NullableInstanceUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


