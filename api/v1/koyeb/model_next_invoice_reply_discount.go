/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// NextInvoiceReplyDiscount struct for NextInvoiceReplyDiscount
type NextInvoiceReplyDiscount struct {
	Type *NextInvoiceReplyDiscountType `json:"type,omitempty"`
	Name *string `json:"name,omitempty"`
	Amount *string `json:"amount,omitempty"`
}

// NewNextInvoiceReplyDiscount instantiates a new NextInvoiceReplyDiscount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNextInvoiceReplyDiscount() *NextInvoiceReplyDiscount {
	this := NextInvoiceReplyDiscount{}
	var type_ NextInvoiceReplyDiscountType = NEXTINVOICEREPLYDISCOUNTTYPE_PERCENT_OFF
	this.Type = &type_
	return &this
}

// NewNextInvoiceReplyDiscountWithDefaults instantiates a new NextInvoiceReplyDiscount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextInvoiceReplyDiscountWithDefaults() *NextInvoiceReplyDiscount {
	this := NextInvoiceReplyDiscount{}
	var type_ NextInvoiceReplyDiscountType = NEXTINVOICEREPLYDISCOUNTTYPE_PERCENT_OFF
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NextInvoiceReplyDiscount) GetType() NextInvoiceReplyDiscountType {
	if o == nil || isNil(o.Type) {
		var ret NextInvoiceReplyDiscountType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextInvoiceReplyDiscount) GetTypeOk() (*NextInvoiceReplyDiscountType, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NextInvoiceReplyDiscount) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NextInvoiceReplyDiscountType and assigns it to the Type field.
func (o *NextInvoiceReplyDiscount) SetType(v NextInvoiceReplyDiscountType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NextInvoiceReplyDiscount) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextInvoiceReplyDiscount) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NextInvoiceReplyDiscount) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NextInvoiceReplyDiscount) SetName(v string) {
	o.Name = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *NextInvoiceReplyDiscount) GetAmount() string {
	if o == nil || isNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextInvoiceReplyDiscount) GetAmountOk() (*string, bool) {
	if o == nil || isNil(o.Amount) {
    return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *NextInvoiceReplyDiscount) HasAmount() bool {
	if o != nil && !isNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *NextInvoiceReplyDiscount) SetAmount(v string) {
	o.Amount = &v
}

func (o NextInvoiceReplyDiscount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullableNextInvoiceReplyDiscount struct {
	value *NextInvoiceReplyDiscount
	isSet bool
}

func (v NullableNextInvoiceReplyDiscount) Get() *NextInvoiceReplyDiscount {
	return v.value
}

func (v *NullableNextInvoiceReplyDiscount) Set(val *NextInvoiceReplyDiscount) {
	v.value = val
	v.isSet = true
}

func (v NullableNextInvoiceReplyDiscount) IsSet() bool {
	return v.isSet
}

func (v *NullableNextInvoiceReplyDiscount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextInvoiceReplyDiscount(val *NextInvoiceReplyDiscount) *NullableNextInvoiceReplyDiscount {
	return &NullableNextInvoiceReplyDiscount{value: val, isSet: true}
}

func (v NullableNextInvoiceReplyDiscount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextInvoiceReplyDiscount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


