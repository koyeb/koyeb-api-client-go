/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// UserFlags the model 'UserFlags'
type UserFlags string

// List of UserFlags
const (
	USERFLAGS_ADMIN UserFlags = "ADMIN"
	USERFLAGS_TEST UserFlags = "TEST"
	USERFLAGS_RESTRICTED UserFlags = "RESTRICTED"
	USERFLAGS_ACTIVE UserFlags = "ACTIVE"
	USERFLAGS_BETA UserFlags = "BETA"
	USERFLAGS_MAX_ORGANIZATIONS_25 UserFlags = "MAX_ORGANIZATIONS_25"
	USERFLAGS_MAX_ORGANIZATIONS_100 UserFlags = "MAX_ORGANIZATIONS_100"
	USERFLAGS_MAX_ORGANIZATIONS_1000 UserFlags = "MAX_ORGANIZATIONS_1000"
	USERFLAGS_MAX_ORGANIZATIONS_10000 UserFlags = "MAX_ORGANIZATIONS_10000"
	USERFLAGS_MAX_ORGANIZATIONS_100000 UserFlags = "MAX_ORGANIZATIONS_100000"
	USERFLAGS_MAX_ORGANIZATIONS_1000000 UserFlags = "MAX_ORGANIZATIONS_1000000"
	USERFLAGS_PARTNER_CSP UserFlags = "PARTNER_CSP"
	USERFLAGS_IGNORE_ORGANIZATION_NAME_RESERVATION_RULE_NEON_PREFIX UserFlags = "IGNORE_ORGANIZATION_NAME_RESERVATION_RULE_NEON_PREFIX"
)

// All allowed values of UserFlags enum
var AllowedUserFlagsEnumValues = []UserFlags{
	"ADMIN",
	"TEST",
	"RESTRICTED",
	"ACTIVE",
	"BETA",
	"MAX_ORGANIZATIONS_25",
	"MAX_ORGANIZATIONS_100",
	"MAX_ORGANIZATIONS_1000",
	"MAX_ORGANIZATIONS_10000",
	"MAX_ORGANIZATIONS_100000",
	"MAX_ORGANIZATIONS_1000000",
	"PARTNER_CSP",
	"IGNORE_ORGANIZATION_NAME_RESERVATION_RULE_NEON_PREFIX",
}

func (v *UserFlags) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserFlags(value)
	for _, existing := range AllowedUserFlagsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserFlags", value)
}

// NewUserFlagsFromValue returns a pointer to a valid UserFlags
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserFlagsFromValue(v string) (*UserFlags, error) {
	ev := UserFlags(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserFlags: valid values are %v", v, AllowedUserFlagsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserFlags) IsValid() bool {
	for _, existing := range AllowedUserFlagsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserFlags value
func (v UserFlags) Ptr() *UserFlags {
	return &v
}

type NullableUserFlags struct {
	value *UserFlags
	isSet bool
}

func (v NullableUserFlags) Get() *UserFlags {
	return v.value
}

func (v *NullableUserFlags) Set(val *UserFlags) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFlags) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFlags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFlags(val *UserFlags) *NullableUserFlags {
	return &NullableUserFlags{value: val, isSet: true}
}

func (v NullableUserFlags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFlags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

