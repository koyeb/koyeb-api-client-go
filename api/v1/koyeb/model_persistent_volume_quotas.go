/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// PersistentVolumeQuotas struct for PersistentVolumeQuotas
type PersistentVolumeQuotas struct {
	// MaxTotalSize for all volumes on a region (in Gigabyte / GB).
	MaxTotalSize *int64 `json:"max_total_size,omitempty"`
	// MaxVolumeSize for one volume (in Gigabyte / GB).
	MaxVolumeSize *int64 `json:"max_volume_size,omitempty"`
	// MaxPerInstanceSize for all volumes on an instance (in Gigabyte / GB).
	MaxPerInstanceSize *int64 `json:"max_per_instance_size,omitempty"`
}

// NewPersistentVolumeQuotas instantiates a new PersistentVolumeQuotas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersistentVolumeQuotas() *PersistentVolumeQuotas {
	this := PersistentVolumeQuotas{}
	return &this
}

// NewPersistentVolumeQuotasWithDefaults instantiates a new PersistentVolumeQuotas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersistentVolumeQuotasWithDefaults() *PersistentVolumeQuotas {
	this := PersistentVolumeQuotas{}
	return &this
}

// GetMaxTotalSize returns the MaxTotalSize field value if set, zero value otherwise.
func (o *PersistentVolumeQuotas) GetMaxTotalSize() int64 {
	if o == nil || isNil(o.MaxTotalSize) {
		var ret int64
		return ret
	}
	return *o.MaxTotalSize
}

// GetMaxTotalSizeOk returns a tuple with the MaxTotalSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersistentVolumeQuotas) GetMaxTotalSizeOk() (*int64, bool) {
	if o == nil || isNil(o.MaxTotalSize) {
    return nil, false
	}
	return o.MaxTotalSize, true
}

// HasMaxTotalSize returns a boolean if a field has been set.
func (o *PersistentVolumeQuotas) HasMaxTotalSize() bool {
	if o != nil && !isNil(o.MaxTotalSize) {
		return true
	}

	return false
}

// SetMaxTotalSize gets a reference to the given int64 and assigns it to the MaxTotalSize field.
func (o *PersistentVolumeQuotas) SetMaxTotalSize(v int64) {
	o.MaxTotalSize = &v
}

// GetMaxVolumeSize returns the MaxVolumeSize field value if set, zero value otherwise.
func (o *PersistentVolumeQuotas) GetMaxVolumeSize() int64 {
	if o == nil || isNil(o.MaxVolumeSize) {
		var ret int64
		return ret
	}
	return *o.MaxVolumeSize
}

// GetMaxVolumeSizeOk returns a tuple with the MaxVolumeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersistentVolumeQuotas) GetMaxVolumeSizeOk() (*int64, bool) {
	if o == nil || isNil(o.MaxVolumeSize) {
    return nil, false
	}
	return o.MaxVolumeSize, true
}

// HasMaxVolumeSize returns a boolean if a field has been set.
func (o *PersistentVolumeQuotas) HasMaxVolumeSize() bool {
	if o != nil && !isNil(o.MaxVolumeSize) {
		return true
	}

	return false
}

// SetMaxVolumeSize gets a reference to the given int64 and assigns it to the MaxVolumeSize field.
func (o *PersistentVolumeQuotas) SetMaxVolumeSize(v int64) {
	o.MaxVolumeSize = &v
}

// GetMaxPerInstanceSize returns the MaxPerInstanceSize field value if set, zero value otherwise.
func (o *PersistentVolumeQuotas) GetMaxPerInstanceSize() int64 {
	if o == nil || isNil(o.MaxPerInstanceSize) {
		var ret int64
		return ret
	}
	return *o.MaxPerInstanceSize
}

// GetMaxPerInstanceSizeOk returns a tuple with the MaxPerInstanceSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersistentVolumeQuotas) GetMaxPerInstanceSizeOk() (*int64, bool) {
	if o == nil || isNil(o.MaxPerInstanceSize) {
    return nil, false
	}
	return o.MaxPerInstanceSize, true
}

// HasMaxPerInstanceSize returns a boolean if a field has been set.
func (o *PersistentVolumeQuotas) HasMaxPerInstanceSize() bool {
	if o != nil && !isNil(o.MaxPerInstanceSize) {
		return true
	}

	return false
}

// SetMaxPerInstanceSize gets a reference to the given int64 and assigns it to the MaxPerInstanceSize field.
func (o *PersistentVolumeQuotas) SetMaxPerInstanceSize(v int64) {
	o.MaxPerInstanceSize = &v
}

func (o PersistentVolumeQuotas) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.MaxTotalSize) {
		toSerialize["max_total_size"] = o.MaxTotalSize
	}
	if !isNil(o.MaxVolumeSize) {
		toSerialize["max_volume_size"] = o.MaxVolumeSize
	}
	if !isNil(o.MaxPerInstanceSize) {
		toSerialize["max_per_instance_size"] = o.MaxPerInstanceSize
	}
	return json.Marshal(toSerialize)
}

type NullablePersistentVolumeQuotas struct {
	value *PersistentVolumeQuotas
	isSet bool
}

func (v NullablePersistentVolumeQuotas) Get() *PersistentVolumeQuotas {
	return v.value
}

func (v *NullablePersistentVolumeQuotas) Set(val *PersistentVolumeQuotas) {
	v.value = val
	v.isSet = true
}

func (v NullablePersistentVolumeQuotas) IsSet() bool {
	return v.isSet
}

func (v *NullablePersistentVolumeQuotas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersistentVolumeQuotas(val *PersistentVolumeQuotas) *NullablePersistentVolumeQuotas {
	return &NullablePersistentVolumeQuotas{value: val, isSet: true}
}

func (v NullablePersistentVolumeQuotas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersistentVolumeQuotas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


