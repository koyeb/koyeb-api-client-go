/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the ErrorWithFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorWithFields{}

// ErrorWithFields struct for ErrorWithFields
type ErrorWithFields struct {
	Status *int32 `json:"status,omitempty"`
	Code *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Fields []ErrorField `json:"fields,omitempty"`
}

// NewErrorWithFields instantiates a new ErrorWithFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorWithFields() *ErrorWithFields {
	this := ErrorWithFields{}
	return &this
}

// NewErrorWithFieldsWithDefaults instantiates a new ErrorWithFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithFieldsWithDefaults() *ErrorWithFields {
	this := ErrorWithFields{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ErrorWithFields) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorWithFields) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ErrorWithFields) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *ErrorWithFields) SetStatus(v int32) {
	o.Status = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorWithFields) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorWithFields) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorWithFields) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ErrorWithFields) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorWithFields) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorWithFields) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorWithFields) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorWithFields) SetMessage(v string) {
	o.Message = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ErrorWithFields) GetFields() []ErrorField {
	if o == nil || IsNil(o.Fields) {
		var ret []ErrorField
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorWithFields) GetFieldsOk() ([]ErrorField, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ErrorWithFields) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []ErrorField and assigns it to the Fields field.
func (o *ErrorWithFields) SetFields(v []ErrorField) {
	o.Fields = v
}

func (o ErrorWithFields) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorWithFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	return toSerialize, nil
}

type NullableErrorWithFields struct {
	value *ErrorWithFields
	isSet bool
}

func (v NullableErrorWithFields) Get() *ErrorWithFields {
	return v.value
}

func (v *NullableErrorWithFields) Set(val *ErrorWithFields) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorWithFields) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorWithFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorWithFields(val *ErrorWithFields) *NullableErrorWithFields {
	return &NullableErrorWithFields{value: val, isSet: true}
}

func (v NullableErrorWithFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorWithFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


