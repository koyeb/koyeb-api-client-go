/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"time"
)

// checks if the OrganizationMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationMember{}

// OrganizationMember struct for OrganizationMember
type OrganizationMember struct {
	Id *string `json:"id,omitempty"`
	OrganizationId *string `json:"organization_id,omitempty"`
	UserId *string `json:"user_id,omitempty"`
	JoinedAt *time.Time `json:"joined_at,omitempty"`
	Role *UserRoleRole `json:"role,omitempty"`
	Status *OrganizationMemberStatus `json:"status,omitempty"`
	User *PublicUser `json:"user,omitempty"`
	Organization *PublicOrganization `json:"organization,omitempty"`
}

// NewOrganizationMember instantiates a new OrganizationMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationMember() *OrganizationMember {
	this := OrganizationMember{}
	var role UserRoleRole = USERROLEROLE_INVALID
	this.Role = &role
	var status OrganizationMemberStatus = ORGANIZATIONMEMBERSTATUS_INVALID
	this.Status = &status
	return &this
}

// NewOrganizationMemberWithDefaults instantiates a new OrganizationMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationMemberWithDefaults() *OrganizationMember {
	this := OrganizationMember{}
	var role UserRoleRole = USERROLEROLE_INVALID
	this.Role = &role
	var status OrganizationMemberStatus = ORGANIZATIONMEMBERSTATUS_INVALID
	this.Status = &status
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrganizationMember) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMember) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrganizationMember) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrganizationMember) SetId(v string) {
	o.Id = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *OrganizationMember) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMember) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *OrganizationMember) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *OrganizationMember) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *OrganizationMember) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMember) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *OrganizationMember) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *OrganizationMember) SetUserId(v string) {
	o.UserId = &v
}

// GetJoinedAt returns the JoinedAt field value if set, zero value otherwise.
func (o *OrganizationMember) GetJoinedAt() time.Time {
	if o == nil || IsNil(o.JoinedAt) {
		var ret time.Time
		return ret
	}
	return *o.JoinedAt
}

// GetJoinedAtOk returns a tuple with the JoinedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMember) GetJoinedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.JoinedAt) {
		return nil, false
	}
	return o.JoinedAt, true
}

// HasJoinedAt returns a boolean if a field has been set.
func (o *OrganizationMember) HasJoinedAt() bool {
	if o != nil && !IsNil(o.JoinedAt) {
		return true
	}

	return false
}

// SetJoinedAt gets a reference to the given time.Time and assigns it to the JoinedAt field.
func (o *OrganizationMember) SetJoinedAt(v time.Time) {
	o.JoinedAt = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *OrganizationMember) GetRole() UserRoleRole {
	if o == nil || IsNil(o.Role) {
		var ret UserRoleRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMember) GetRoleOk() (*UserRoleRole, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *OrganizationMember) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given UserRoleRole and assigns it to the Role field.
func (o *OrganizationMember) SetRole(v UserRoleRole) {
	o.Role = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OrganizationMember) GetStatus() OrganizationMemberStatus {
	if o == nil || IsNil(o.Status) {
		var ret OrganizationMemberStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMember) GetStatusOk() (*OrganizationMemberStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OrganizationMember) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given OrganizationMemberStatus and assigns it to the Status field.
func (o *OrganizationMember) SetStatus(v OrganizationMemberStatus) {
	o.Status = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *OrganizationMember) GetUser() PublicUser {
	if o == nil || IsNil(o.User) {
		var ret PublicUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMember) GetUserOk() (*PublicUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *OrganizationMember) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given PublicUser and assigns it to the User field.
func (o *OrganizationMember) SetUser(v PublicUser) {
	o.User = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *OrganizationMember) GetOrganization() PublicOrganization {
	if o == nil || IsNil(o.Organization) {
		var ret PublicOrganization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMember) GetOrganizationOk() (*PublicOrganization, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *OrganizationMember) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given PublicOrganization and assigns it to the Organization field.
func (o *OrganizationMember) SetOrganization(v PublicOrganization) {
	o.Organization = &v
}

func (o OrganizationMember) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.JoinedAt) {
		toSerialize["joined_at"] = o.JoinedAt
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	return toSerialize, nil
}

type NullableOrganizationMember struct {
	value *OrganizationMember
	isSet bool
}

func (v NullableOrganizationMember) Get() *OrganizationMember {
	return v.value
}

func (v *NullableOrganizationMember) Set(val *OrganizationMember) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationMember) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationMember(val *OrganizationMember) *NullableOrganizationMember {
	return &NullableOrganizationMember{value: val, isSet: true}
}

func (v NullableOrganizationMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


