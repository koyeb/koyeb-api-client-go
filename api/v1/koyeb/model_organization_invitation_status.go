/*
 * Koyeb Rest API
 *
 * The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// OrganizationInvitationStatus the model 'OrganizationInvitationStatus'
type OrganizationInvitationStatus string

// List of OrganizationInvitation.Status
const (
	ORGANIZATIONINVITATIONSTATUS_INVALID OrganizationInvitationStatus = "INVALID"
	ORGANIZATIONINVITATIONSTATUS_PENDING OrganizationInvitationStatus = "PENDING"
	ORGANIZATIONINVITATIONSTATUS_ACCEPTED OrganizationInvitationStatus = "ACCEPTED"
	ORGANIZATIONINVITATIONSTATUS_REFUSED OrganizationInvitationStatus = "REFUSED"
	ORGANIZATIONINVITATIONSTATUS_EXPIRED OrganizationInvitationStatus = "EXPIRED"
)

var allowedOrganizationInvitationStatusEnumValues = []OrganizationInvitationStatus{
	"INVALID",
	"PENDING",
	"ACCEPTED",
	"REFUSED",
	"EXPIRED",
}

func (v *OrganizationInvitationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationInvitationStatus(value)
	for _, existing := range allowedOrganizationInvitationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationInvitationStatus", value)
}

// NewOrganizationInvitationStatusFromValue returns a pointer to a valid OrganizationInvitationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationInvitationStatusFromValue(v string) (*OrganizationInvitationStatus, error) {
	ev := OrganizationInvitationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationInvitationStatus: valid values are %v", v, allowedOrganizationInvitationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationInvitationStatus) IsValid() bool {
	for _, existing := range allowedOrganizationInvitationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationInvitation.Status value
func (v OrganizationInvitationStatus) Ptr() *OrganizationInvitationStatus {
	return &v
}

type NullableOrganizationInvitationStatus struct {
	value *OrganizationInvitationStatus
	isSet bool
}

func (v NullableOrganizationInvitationStatus) Get() *OrganizationInvitationStatus {
	return v.value
}

func (v *NullableOrganizationInvitationStatus) Set(val *OrganizationInvitationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationInvitationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationInvitationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationInvitationStatus(val *OrganizationInvitationStatus) *NullableOrganizationInvitationStatus {
	return &NullableOrganizationInvitationStatus{value: val, isSet: true}
}

func (v NullableOrganizationInvitationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationInvitationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

