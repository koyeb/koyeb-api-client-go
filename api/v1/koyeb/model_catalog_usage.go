/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// CatalogUsage struct for CatalogUsage
type CatalogUsage struct {
	Instances *map[string]InstanceAvailability `json:"instances,omitempty"`
}

// NewCatalogUsage instantiates a new CatalogUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogUsage() *CatalogUsage {
	this := CatalogUsage{}
	return &this
}

// NewCatalogUsageWithDefaults instantiates a new CatalogUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogUsageWithDefaults() *CatalogUsage {
	this := CatalogUsage{}
	return &this
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *CatalogUsage) GetInstances() map[string]InstanceAvailability {
	if o == nil || isNil(o.Instances) {
		var ret map[string]InstanceAvailability
		return ret
	}
	return *o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogUsage) GetInstancesOk() (*map[string]InstanceAvailability, bool) {
	if o == nil || isNil(o.Instances) {
    return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *CatalogUsage) HasInstances() bool {
	if o != nil && !isNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given map[string]InstanceAvailability and assigns it to the Instances field.
func (o *CatalogUsage) SetInstances(v map[string]InstanceAvailability) {
	o.Instances = &v
}

func (o CatalogUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogUsage struct {
	value *CatalogUsage
	isSet bool
}

func (v NullableCatalogUsage) Get() *CatalogUsage {
	return v.value
}

func (v *NullableCatalogUsage) Set(val *CatalogUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogUsage(val *CatalogUsage) *NullableCatalogUsage {
	return &NullableCatalogUsage{value: val, isSet: true}
}

func (v NullableCatalogUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


