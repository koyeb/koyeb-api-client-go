/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// AppUsage struct for AppUsage
type AppUsage struct {
	AppId *string `json:"app_id,omitempty"`
	AppName *string `json:"app_name,omitempty"`
	Services []ServiceUsage `json:"services,omitempty"`
	Databases []DatabaseUsage `json:"databases,omitempty"`
}

// NewAppUsage instantiates a new AppUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppUsage() *AppUsage {
	this := AppUsage{}
	return &this
}

// NewAppUsageWithDefaults instantiates a new AppUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppUsageWithDefaults() *AppUsage {
	this := AppUsage{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *AppUsage) GetAppId() string {
	if o == nil || isNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsage) GetAppIdOk() (*string, bool) {
	if o == nil || isNil(o.AppId) {
    return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *AppUsage) HasAppId() bool {
	if o != nil && !isNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *AppUsage) SetAppId(v string) {
	o.AppId = &v
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *AppUsage) GetAppName() string {
	if o == nil || isNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsage) GetAppNameOk() (*string, bool) {
	if o == nil || isNil(o.AppName) {
    return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *AppUsage) HasAppName() bool {
	if o != nil && !isNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *AppUsage) SetAppName(v string) {
	o.AppName = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *AppUsage) GetServices() []ServiceUsage {
	if o == nil || isNil(o.Services) {
		var ret []ServiceUsage
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsage) GetServicesOk() ([]ServiceUsage, bool) {
	if o == nil || isNil(o.Services) {
    return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *AppUsage) HasServices() bool {
	if o != nil && !isNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []ServiceUsage and assigns it to the Services field.
func (o *AppUsage) SetServices(v []ServiceUsage) {
	o.Services = v
}

// GetDatabases returns the Databases field value if set, zero value otherwise.
func (o *AppUsage) GetDatabases() []DatabaseUsage {
	if o == nil || isNil(o.Databases) {
		var ret []DatabaseUsage
		return ret
	}
	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsage) GetDatabasesOk() ([]DatabaseUsage, bool) {
	if o == nil || isNil(o.Databases) {
    return nil, false
	}
	return o.Databases, true
}

// HasDatabases returns a boolean if a field has been set.
func (o *AppUsage) HasDatabases() bool {
	if o != nil && !isNil(o.Databases) {
		return true
	}

	return false
}

// SetDatabases gets a reference to the given []DatabaseUsage and assigns it to the Databases field.
func (o *AppUsage) SetDatabases(v []DatabaseUsage) {
	o.Databases = v
}

func (o AppUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AppId) {
		toSerialize["app_id"] = o.AppId
	}
	if !isNil(o.AppName) {
		toSerialize["app_name"] = o.AppName
	}
	if !isNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !isNil(o.Databases) {
		toSerialize["databases"] = o.Databases
	}
	return json.Marshal(toSerialize)
}

type NullableAppUsage struct {
	value *AppUsage
	isSet bool
}

func (v NullableAppUsage) Get() *AppUsage {
	return v.value
}

func (v *NullableAppUsage) Set(val *AppUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableAppUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableAppUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppUsage(val *AppUsage) *NullableAppUsage {
	return &NullableAppUsage{value: val, isSet: true}
}

func (v NullableAppUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


