/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the GetSubscriptionReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSubscriptionReply{}

// GetSubscriptionReply struct for GetSubscriptionReply
type GetSubscriptionReply struct {
	Subscription *Subscription `json:"subscription,omitempty"`
}

// NewGetSubscriptionReply instantiates a new GetSubscriptionReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSubscriptionReply() *GetSubscriptionReply {
	this := GetSubscriptionReply{}
	return &this
}

// NewGetSubscriptionReplyWithDefaults instantiates a new GetSubscriptionReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSubscriptionReplyWithDefaults() *GetSubscriptionReply {
	this := GetSubscriptionReply{}
	return &this
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *GetSubscriptionReply) GetSubscription() Subscription {
	if o == nil || IsNil(o.Subscription) {
		var ret Subscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSubscriptionReply) GetSubscriptionOk() (*Subscription, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *GetSubscriptionReply) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given Subscription and assigns it to the Subscription field.
func (o *GetSubscriptionReply) SetSubscription(v Subscription) {
	o.Subscription = &v
}

func (o GetSubscriptionReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSubscriptionReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}
	return toSerialize, nil
}

type NullableGetSubscriptionReply struct {
	value *GetSubscriptionReply
	isSet bool
}

func (v NullableGetSubscriptionReply) Get() *GetSubscriptionReply {
	return v.value
}

func (v *NullableGetSubscriptionReply) Set(val *GetSubscriptionReply) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSubscriptionReply) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSubscriptionReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSubscriptionReply(val *GetSubscriptionReply) *NullableGetSubscriptionReply {
	return &NullableGetSubscriptionReply{value: val, isSet: true}
}

func (v NullableGetSubscriptionReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSubscriptionReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


