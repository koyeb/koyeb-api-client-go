{
  "swagger": "2.0",
  "info": {
    "title": "Koyeb Rest API",
    "description": "The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests.\n",
    "version": "1.0.0"
  },
  "host": "app.koyeb.com",
  "schemes": [
    "https"
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [
    {
      "name": "intro",
      "x-displayName": "Introduction",
      "x-traitTag": true,
      "description": "Welcome to the Koyeb API documentation.\n\nThe Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests.\nThe API has predictable resource-oriented URLs, allowing you to request, retrieve and execute actions on resources efficiently.\n\nThe API returns JSON-encoded responses and uses standard HTTP response codes, and verbs.\n\nAll of the functionality available in the Koyeb Control Panel is also available via the API, allowing you to automate repetitive and complex actions as required.\n\nAll production API requests are made to:\n\n- https://app.koyeb.com/<version>\n\nAll data is sent and received as JSON.\n\n## Constructing Requests\n\nRequests are made of three components:\n\n- Base URL: `https://app.koyeb.com`\n- API Version: `v1`\n- Resource path: `apps`\n\nTo construct a proper request, you need to format the URL as follows:\n\n`https://app.koyeb.com/{version}/{resource}`\n\nExample: `https://app.koyeb.com/v1/apps`\n\nThe following code is an example request to retrieve the list of Apps.\n\n```\n%curl -H 'Authorization: Bearer 1111-1111-1111-1111-1111' https://app.koyeb.com/v1/apps\n{\n  \"apps\": [\n    {\n      \"id\": \"e267e09d-a2ef-4672-95c7-bf88d787a274\",\n      \"name\": \"demo\",\n      \"organization_id\": \"c402bcad-d06d-4fd6-8af2-08b790c0e249\",\n      \"updated_at\": \"2021-04-26T08:28:59.221274Z\",\n      \"created_at\": \"2021-04-26T08:28:59.221274Z\",\n      \"domains\": [\n        {\n          \"name\": \"demo-koyeb.koyeb.app\",\n          \"deployment_group\": \"prod\"\n        }\n      ]\n    },\n    {\n      \"id\": \"e38caea5-5acb-4fec-aa65-81749546b470\",\n      \"name\": \"www\",\n      \"organization_id\": \"c402bcad-d06d-4fd6-8af2-08b790c0e249\",\n      \"updated_at\": \"2021-05-04T08:56:40.557792Z\",\n      \"created_at\": \"2021-05-04T08:56:40.557792Z\",\n      \"domains\": [\n        {\n          \"name\": \"www-koyeb.koyeb.app\",\n          \"deployment_group\": \"prod\"\n        }\n      ]\n    }\n  ],\n  \"limit\": 20,\n  \"offset\": 0,\n  \"count\": 2\n}\n```\n\n# Authentication\n\nThe Koyeb API uses API keys to authenticate requests. You can view and manage your API keys in the Koyeb Control Panel.\n\nYour API keys carry many privileges. Take care to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, Slack, client-side code, and so forth.\n\nTo make an authenticated request, include a bearer-type Authorization header containing your API key.\n\nAll API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.\n\n# Errors\n\nWe use conventional HTTP response codes to indicate the success or failure of an API request.\n\nIn general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that resulted from the provided information (e.g., a required parameter is missing, resource not found), and codes in the 5xx range indicate an error with our servers.\n\n## HTTP Status Code Summary\n\n- `200 OK` - Everything worked as expected.\n- `400 Bad Request` - Often missing a required parameter.\n- `401 Unauthorized` - No valid API key provided.\n- `402 Request Failed` - Parameters were valid, but the request failed.\n- `403 Forbidden` - Insufficient privileges to access the requested resource.\n- `404 Not Found` - The requested item doesn't exist.\n- `50x` Server errors - Something went wrong on the API domain's end.\n\nInput and output data must be valid JSON with the appropriate Content-Type header set.\n\n## Attributes\n\n- code:\n\n  - `invalid_argument`: Occur when your request has invalid parameters.\n  - `unknown_resource`: Occur when the resource doesn't exist.\n  - `authentication_error`: Arise when there is a problem with authentication.\n  - `rate_limit_error`: Too many requests hit the API too quickly.\n  - `authorization_required`: You don't have sufficient right to access the resource.\n  - `api_error`: API errors use in case of a problem with api domain's servers (extremely uncommon).\n\n- message:\n\n  - A human-readable error giving more details about the error\n\n- status:\n\n  - The HTTP code returned by the server.\n\n- fields (Optional):\n\n  - An array of parameters with a human-readable message giving more details about the error.\n\n## Errors responses example\n\nResponse 400 (application/json)\n\n```\n{\n  \"status\": 400,\n  \"code\": \"invalid_argument\",\n  \"message\": \"Invalid argument\",\n  \"fields\": [\n    {\n      \"field\": \"definition.docker.image\",\n      \"description\": \"cannot be blank\"\n    }\n  ]\n}\n```\n\nResponse 401 (application/json)\n\n```\n{\n  \"status\": 401,\n  \"code\": \"authentication_error\",\n  \"message\": \"Request unauthenticated with bearer\"\n}\n```\n\nResponse 403 (application/json)\n\n```\n{\n  \"status\": 403,\n  \"code\": \"authentication_required\",\n  \"message\": \"You don't have the requested permission to access to resource.\"\n}\n```\n\n\nResponse 404 (application/json)\n\n```\n{\n  \"status\": 404,\n  \"code\": \"unknown_resource\",\n  \"message\": \"App not found\"\n}\n```\n\n# Pagination\n\nAll top-level API resources receive a paginated response. For instance, list Apps, list Services, and others share a standard structure, taking two parameters: limit and offset.\n\n**Paginated request**\n\nRequests against paginated endpoints accept two query string arguments:\n\n* *limit*, a positive integer lower or equal to 100 to select the number of items to display.\n* *offset*, an integer to indicate the position to start at.\n\nPaginated endpoints usually also accept filters to search and sort results.\nThese filters are documented along with each endpoint documentation.\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Introduction",
      "tags": [
        "intro"
      ]
    },
    {
      "name": "API",
      "tags": [
        "profile",
        "Sessions",
        "organization",
        "OrganizationMembers",
        "OrganizationInvitations",
        "OrganizationConfirmations",
        "Subscriptions",
        "Credentials",
        "Secrets",
        "activity",
        "Apps",
        "Services",
        "Deployments",
        "RegionalDeployments",
        "Instances",
        "Domains",
        "Repositories",
        "Logs",
        "Metrics",
        "Catalog",
        "CatalogRegions",
        "CatalogInstances"
      ]
    }
  ],
  "paths": {
    "/v1/account/login": {
      "post": {
        "summary": "Login user",
        "operationId": "Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          },
          {
            "name": "seon-fp",
            "description": "Seon Fingerprint",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Sessions"
        ]
      }
    },
    "/v1/account/logout": {
      "delete": {
        "summary": "Logout user",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LogoutReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/v1/account/refresh": {
      "put": {
        "summary": "Refresh token",
        "operationId": "RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/v1/organization_invitations": {
      "get": {
        "operationId": "ListOrganizationInvitations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListOrganizationInvitationsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "description": "(Optional) Filter on organization invitation statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INVALID",
                "PENDING",
                "ACCEPTED",
                "REFUSED",
                "EXPIRED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user_id",
            "description": "(Optional) Filter on invitee ID. Will match both invitations sent to\nthat user_id and invitations sent to the email of that user_id.\nThe only valid value is the requester's user_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationInvitations"
        ]
      },
      "post": {
        "operationId": "CreateOrganizationInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateOrganizationInvitationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOrganizationInvitationRequest"
            }
          }
        ],
        "tags": [
          "OrganizationInvitations"
        ]
      }
    },
    "/v1/organization_invitations/{id}": {
      "get": {
        "operationId": "GetOrganizationInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetOrganizationInvitationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the invitation to get",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationInvitations"
        ]
      },
      "delete": {
        "operationId": "DeleteOrganizationInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteOrganizationInvitationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the organization invitation to delete",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationInvitations"
        ]
      }
    },
    "/v1/organization_invitations/{id}/resend": {
      "post": {
        "operationId": "ResendOrganizationInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ResendOrganizationInvitationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the organization invitation to resend",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "OrganizationInvitations"
        ]
      }
    },
    "/v1/payment_methods": {
      "get": {
        "summary": "List payment methods",
        "operationId": "ListPaymentMethods",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListPaymentMethodsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "description": "(Optional) Filter on payment method statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INVALID",
                "CREATED",
                "AUTHORIZED",
                "DECLINED",
                "CANCELED",
                "EXPIRED",
                "UNCHECKED"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      },
      "post": {
        "summary": "Create payment authorization",
        "operationId": "CreatePaymentAuthorization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreatePaymentAuthorizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePaymentAuthorizationRequest"
            }
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      }
    },
    "/v1/payment_methods/{id}": {
      "get": {
        "summary": "Get payment method",
        "operationId": "GetPaymentMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetPaymentMethodReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      },
      "delete": {
        "summary": "Delete payment method",
        "operationId": "DeletePaymentMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeletePaymentMethodReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      }
    },
    "/v1/payment_methods/{id}/confirm": {
      "post": {
        "summary": "Confirm payment authorization",
        "operationId": "ConfirmPaymentAuthorization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ConfirmPaymentAuthorizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      }
    },
    "/v1/account/activities": {
      "get": {
        "operationId": "GetAccountActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/account/invite": {
      "post": {
        "operationId": "CreateInvite",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InviteUserRequest"
            }
          }
        ],
        "tags": [
          "invite"
        ]
      }
    },
    "/v1/account/oauth": {
      "get": {
        "summary": "Get OAuth Providers",
        "operationId": "GetOAuthOptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetOAuthOptionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "action",
            "description": "Which authentication flow is being initiated",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "signin",
              "signup",
              "register"
            ],
            "default": "signin"
          },
          {
            "name": "metadata",
            "description": "A small (limited to 400 characters) string of arbitrary metadata which will be encoded in the state",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      },
      "post": {
        "summary": "Authenticate using OAuth",
        "operationId": "OAuthCallback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/OAuthCallbackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuthCallbackRequest"
            }
          },
          {
            "name": "seon-fp",
            "description": "Seon Fingerprint",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/organization": {
      "get": {
        "operationId": "GetCurrentOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/organization_invitations": {
      "get": {
        "operationId": "ListUserOrganizationInvitations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListUserOrganizationInvitationsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "description": "(Optional) Filter on organization invitation statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INVALID",
                "PENDING",
                "ACCEPTED",
                "REFUSED",
                "EXPIRED"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/organization_invitations/{id}": {
      "get": {
        "operationId": "GetUserOrganizationInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetUserOrganizationInvitationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the organization invitation to get",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/organization_invitations/{id}/accept": {
      "post": {
        "operationId": "AcceptOrganizationInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AcceptOrganizationInvitationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the organization invitation to accept",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/organization_invitations/{id}/decline": {
      "post": {
        "operationId": "DeclineOrganizationInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeclineOrganizationInvitationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the organization invitation to decline",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/profile": {
      "get": {
        "operationId": "GetCurrentUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "profile"
        ]
      },
      "delete": {
        "operationId": "DeleteAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteAccountReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "profile"
        ]
      },
      "put": {
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest.UserUpdateBody"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      },
      "patch": {
        "operationId": "UpdateUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest.UserUpdateBody"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/resend_validation": {
      "post": {
        "operationId": "ResendEmailValidation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ResendEmailValidationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResendEmailValidationRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/reset_password": {
      "post": {
        "operationId": "ResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ResetPasswordReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/signup": {
      "post": {
        "operationId": "Signup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Create new account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccountRequest"
            }
          },
          {
            "name": "seon-fp",
            "description": "Seon Fingerprint",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/update_password": {
      "post": {
        "operationId": "UpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequest"
            }
          },
          {
            "name": "seon-fp",
            "description": "Seon Fingerprint",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/validate/{id}": {
      "post": {
        "operationId": "Validate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "seon-fp",
            "description": "Seon Fingerprint",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/billing/manage": {
      "get": {
        "operationId": "Manage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ManageReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "billing"
        ]
      }
    },
    "/v1/github/installation": {
      "get": {
        "summary": "Fetch github installation configuration",
        "operationId": "GetGithubInstallation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetGithubInstallationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "organization"
        ]
      },
      "post": {
        "summary": "Start github installation",
        "operationId": "GithubInstallation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GithubInstallationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GithubInstallationRequest"
            }
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/github/installation/callback": {
      "post": {
        "summary": "Github callback for app installation",
        "operationId": "GithubInstallationCallback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GithubInstallationCallbackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GithubInstallationCallbackRequest"
            }
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/organizations": {
      "post": {
        "summary": "Create organization",
        "operationId": "CreateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOrganizationRequest"
            }
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/organizations/{id}": {
      "get": {
        "summary": "Get organization",
        "operationId": "GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      },
      "put": {
        "summary": "Update organization",
        "operationId": "UpdateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      },
      "patch": {
        "summary": "Update organization",
        "operationId": "UpdateOrganization2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/organizations/{id}/deactivate": {
      "post": {
        "summary": "Deactivate organization",
        "operationId": "DeactivateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeactivateOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/organizations/{id}/plan": {
      "post": {
        "summary": "Update organization plan",
        "operationId": "UpdateOrganizationPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateOrganizationPlanReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "plan": {
                  "$ref": "#/definitions/Plan"
                }
              }
            }
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/organizations/{id}/signup_qualification": {
      "post": {
        "summary": "Upsert organization's signup qualification",
        "operationId": "UpsertSignupQualification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpsertSignupQualificationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "signup_qualification": {
                  "type": "object"
                }
              }
            }
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/organizations/{id}/switch": {
      "post": {
        "summary": "Switch organization context",
        "operationId": "SwitchOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "seon-fp",
            "description": "Seon Fingerprint",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/sso/canny": {
      "post": {
        "operationId": "CannyAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CannyAuthReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CannyAuthRequest"
            }
          }
        ],
        "tags": [
          "sso"
        ]
      }
    },
    "/v1/sso/discourse": {
      "post": {
        "operationId": "DiscourseAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DiscourseAuthReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscourseAuthRequest"
            }
          }
        ],
        "tags": [
          "sso"
        ]
      }
    },
    "/v1/organization_confirmations/{id}": {
      "post": {
        "summary": "Confirm organization action",
        "operationId": "ConfirmOrganizationAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ConfirmOrganizationActionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationConfirmations"
        ]
      }
    },
    "/v1/organization_members": {
      "get": {
        "summary": "List organization members",
        "operationId": "ListOrganizationMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListOrganizationMembersReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization_id",
            "description": "(Optional) Filter for an organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_id",
            "description": "(Optional) Filter for an user",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationMembers"
        ]
      }
    },
    "/v1/organization_members/{id}": {
      "delete": {
        "summary": "Remove an organization member",
        "operationId": "RemoveOrganizationMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RemoveOrganizationMemberReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationMembers"
        ]
      }
    },
    "/v1/credentials": {
      "get": {
        "summary": "List credentials",
        "operationId": "ListCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListCredentialsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Credentials"
        ]
      },
      "post": {
        "summary": "Create credential",
        "operationId": "CreateCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateCredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "credential",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCredential"
            }
          }
        ],
        "tags": [
          "Credentials"
        ]
      }
    },
    "/v1/credentials/{id}": {
      "get": {
        "summary": "Get credential",
        "operationId": "GetCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetCredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Credentials"
        ]
      },
      "delete": {
        "summary": "Delete credential",
        "operationId": "DeleteCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteCredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Credentials"
        ]
      },
      "put": {
        "summary": "Update credential",
        "operationId": "UpdateCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateCredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "credential",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Credentials"
        ]
      },
      "patch": {
        "summary": "Update credential",
        "operationId": "UpdateCredential2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateCredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "credential",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Credentials"
        ]
      }
    },
    "/v1/subscriptions/{id}": {
      "get": {
        "summary": "Get Subscription",
        "operationId": "GetSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetSubscriptionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the instance",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/v1/search": {
      "get": {
        "summary": "Search",
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ksearch.SearchReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "description": "(Optional) Search query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Search"
        ]
      }
    },
    "/v1/streams/logs/tail": {
      "get": {
        "summary": "Tails logs",
        "operationId": "TailLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/LogEntry"
                },
                "error": {
                  "$ref": "#/definitions/google.rpc.Status"
                }
              },
              "title": "Stream result of LogEntry"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "app_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "service_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deployment_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "regional_deployment_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "stream",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Logs"
        ]
      }
    },
    "/v1/streams/instances/exec": {
      "get": {
        "summary": "Exec Command",
        "description": "This endpoint opens a websocket. Once open, all frames going through the websocket should be formatted in JSON. Input frames should match the format specified below. Output frames will match the response schema.",
        "operationId": "ExecCommand",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/ExecCommandReply"
                },
                "error": {
                  "$ref": "#/definitions/google.rpc.Status"
                }
              },
              "title": "Stream result of ExecCommandReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the instance to exec on. Mandatory in the first frame sent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "body.command",
            "description": "Command to exec. Mandatory in the first frame sent",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "body.tty_size.height",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body.tty_size.width",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body.stdin.data",
            "description": "Data is base64 encoded",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Instances"
        ]
      }
    },
    "/v1/streams/metrics": {
      "get": {
        "operationId": "GetMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetMetricsReply"
            }
          },
          "400": {
            "description": "Validation error.",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "service_id",
            "description": "ID of the service to query instances metrics for. Ignored if instance_id is set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "instance_id",
            "description": "ID of the instance to query metrics for.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Metric to query.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "CPU_TOTAL_PERCENT",
              "MEM_RSS",
              "HTTP_THROUGHPUT",
              "HTTP_RESPONSE_TIME_50P",
              "HTTP_RESPONSE_TIME_90P",
              "HTTP_RESPONSE_TIME_99P",
              "HTTP_RESPONSE_TIME_MAX",
              "PUBLIC_DATA_TRANSFER_IN",
              "PUBLIC_DATA_TRANSFER_OUT"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "start",
            "description": "(Optional) Defaults to an hour prior to end.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end",
            "description": "(Optional) Defaults to now.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "step",
            "description": "(Optional) Must be a valid duration in hours (h) or minutes (m). Defaulst to 5m.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Metrics"
        ]
      }
    },
    "/v1/git/branches": {
      "get": {
        "operationId": "ListBranches",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/kgitproxy.ListBranchesReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "repository_id",
            "description": "(Optional) Filter on one repository.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "(Optional) Filter on branch name using a fuzzy search.\nRepository filter is required to enable this filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Repositories"
        ]
      }
    },
    "/v1/git/repositories": {
      "get": {
        "operationId": "ListRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/kgitproxy.ListRepositoriesReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "(Optional) Filter on repository name using a fuzzy search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Repositories"
        ]
      }
    },
    "/v1/git/sync/organization/{organization_id}": {
      "post": {
        "operationId": "ResyncOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/kgitproxy.ResyncOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Repositories"
        ]
      }
    },
    "/v1/activities": {
      "get": {
        "operationId": "ListActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/notifications": {
      "get": {
        "operationId": "ListNotifications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/NotificationList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mark_read",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mark_seen",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "unread",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "unseen",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/regional_deployments": {
      "get": {
        "summary": "Experimental: List regional deployments\nUse at your own risk",
        "operationId": "ListRegionalDeployments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListRegionalDeploymentsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "deployment_id",
            "description": "(Optional) Filter on deployment id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RegionalDeployments"
        ]
      }
    },
    "/v1/regional_deployments/{id}": {
      "get": {
        "summary": "Experimental: Get regional deployment\nUse at your own risk",
        "operationId": "GetRegionalDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetRegionalDeploymentReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the regional deployment",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RegionalDeployments"
        ]
      }
    },
    "/v1/apps": {
      "get": {
        "summary": "List App",
        "operationId": "ListApps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListAppsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "(Optional) A filter for regions",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "post": {
        "summary": "Create App",
        "operationId": "CreateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApp"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/apps/{id}": {
      "get": {
        "summary": "Get App",
        "operationId": "GetApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the App",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "delete": {
        "summary": "Delete App\nApp deletion is allowed for all status.",
        "operationId": "DeleteApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the App to delete",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "put": {
        "summary": "Update App",
        "operationId": "UpdateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the app to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "app.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "patch": {
        "summary": "Update App",
        "operationId": "UpdateApp2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the app to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "app",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateApp"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/apps/{id}/pause": {
      "post": {
        "summary": "Pause App\nApp pause action is allowed for the following status:\n - starting\n - healthy\n - degraded\n - unhealthy\n - resuming",
        "operationId": "PauseApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/PauseAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the app to pause.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/apps/{id}/resume": {
      "post": {
        "summary": "Resume App\nApp resume action is allowed for the following status:\n - paused",
        "operationId": "ResumeApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ResumeAppReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the app to resume.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/usages": {
      "get": {
        "summary": "Get organization usage",
        "operationId": "GetOrganizationUsage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetOrganizationUsageReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "starting_time",
            "description": "The starting time of the period to get data from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ending_time",
            "description": "The ending time of the period to get date from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "Usages"
        ]
      }
    },
    "/v1/usages/details": {
      "get": {
        "summary": "Get organization usage details",
        "operationId": "GetOrganizationUsageDetails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetOrganizationUsageDetailsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "starting_time",
            "description": "The starting time of the period to get data from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "ending_time",
            "description": "The ending time of the period to get date from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "description": "(Optional) Sorts the list in the ascending or the descending order",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Usages"
        ]
      }
    },
    "/v1/domains": {
      "get": {
        "operationId": "ListDomains",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListDomainsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "description": "(Optional) A filter for types\n\n - AUTOASSIGNED: Domain like <appName>-<orgName>.koyeb.app",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "AUTOASSIGNED",
                "CUSTOM"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statuses",
            "description": "(Optional) A filter for statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PENDING",
                "ACTIVE",
                "ERROR",
                "DELETING",
                "DELETED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "app_ids",
            "description": "(Optional) A filter for apps",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "description": "(Optional) A filter for name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "post": {
        "operationId": "CreateDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateDomainReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDomain"
            }
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/v1/domains/{id}": {
      "get": {
        "operationId": "GetDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetDomainReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "delete": {
        "operationId": "DeleteDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteDomainReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "patch": {
        "operationId": "UpdateDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateDomainReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDomain"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/v1/domains/{id}/refresh": {
      "post": {
        "operationId": "RefreshDomainStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RefreshDomainStatusReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/v1/quotas/capacity": {
      "post": {
        "summary": "Review Organization Capacity",
        "operationId": "ReviewOrganizationCapacity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ReviewOrganizationCapacityReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewOrganizationCapacityRequest"
            }
          }
        ],
        "tags": [
          "Quotas"
        ]
      }
    },
    "/v1/instances": {
      "get": {
        "summary": "List Instances",
        "operationId": "ListInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListInstancesReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id",
            "description": "(Optional) Filter on application id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "service_id",
            "description": "(Optional) Filter on service id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deployment_id",
            "description": "(Optional) Filter on deployment id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "regional_deployment_id",
            "description": "(Optional) Filter on regional deployment id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "allocation_id",
            "description": "(Optional) Filter on allocation id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "description": "(Optional) Filter on instance statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ALLOCATING",
                "STARTING",
                "HEALTHY",
                "UNHEALTHY",
                "STOPPING",
                "STOPPED",
                "ERROR"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "description": "(Optional) Sorts the list in the ascending or the descending order",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Instances"
        ]
      }
    },
    "/v1/instances/{id}": {
      "get": {
        "summary": "Get Instance",
        "operationId": "GetInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetInstanceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the instance",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instances"
        ]
      }
    },
    "/v1/deployments": {
      "get": {
        "summary": "List Deployments",
        "operationId": "ListDeployments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListDeploymentsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id",
            "description": "(Optional) Filter on application id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "service_id",
            "description": "(Optional) Filter on service id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "description": "(Optional) Filter on statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PENDING",
                "PROVISIONING",
                "SCHEDULED",
                "CANCELING",
                "CANCELED",
                "ALLOCATING",
                "STARTING",
                "HEALTHY",
                "DEGRADED",
                "UNHEALTHY",
                "STOPPING",
                "STOPPED",
                "ERRORING",
                "ERROR"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Deployments"
        ]
      }
    },
    "/v1/deployments/{id}": {
      "get": {
        "summary": "Get Deployment",
        "operationId": "GetDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetDeploymentReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the deployment",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Deployments"
        ]
      }
    },
    "/v1/deployments/{id}/cancel": {
      "post": {
        "summary": "Cancel Deployment\nDeployment cancellation is allowed for the following status:\n - pending\n - provisioning\n - scheduled",
        "operationId": "CancelDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CancelDeploymentReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the deployment to cancel.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Deployments"
        ]
      }
    },
    "/v1/services": {
      "get": {
        "summary": "List Service",
        "operationId": "ListServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListServicesReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id",
            "description": "(Optional) The id of the app",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "(Optional) A filter for name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "post": {
        "summary": "Create Service",
        "operationId": "CreateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateService"
            }
          },
          {
            "name": "dry_run",
            "description": "If set only run validation",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/{id}": {
      "get": {
        "summary": "Get Service",
        "operationId": "GetService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the Service",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "delete": {
        "summary": "Delete Service\nService deletion is allowed for all status.",
        "operationId": "DeleteService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the entity to delete",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "put": {
        "summary": "Update Service",
        "operationId": "UpdateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the entity to update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateService"
            }
          },
          {
            "name": "dry_run",
            "description": "If set, run validation and check that the service exists",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "patch": {
        "summary": "Update Service",
        "operationId": "UpdateService2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the entity to update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateService"
            }
          },
          {
            "name": "dry_run",
            "description": "If set, run validation and check that the service exists",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/{id}/pause": {
      "post": {
        "summary": "Pause Service\nService pause action is allowed for the following status:\n - starting\n - healthy\n - degraded\n - unhealthy\n - resuming",
        "operationId": "PauseService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/PauseServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the service to pause.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/{id}/redeploy": {
      "post": {
        "summary": "ReDeploy Service",
        "operationId": "ReDeploy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RedeployReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "info",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedeployRequest.Info"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/{id}/resume": {
      "post": {
        "summary": "Resume Service\nService resume action is allowed for the following status:\n - paused",
        "operationId": "ResumeService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ResumeServiceReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the service to pause.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/secrets": {
      "get": {
        "operationId": "ListSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListSecretsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "description": "Filter by secret types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SIMPLE",
                "REGISTRY"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "post": {
        "operationId": "CreateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "secret",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSecret"
            }
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/v1/secrets/{id}": {
      "get": {
        "operationId": "GetSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "delete": {
        "operationId": "DeleteSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "put": {
        "operationId": "UpdateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "secret",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "patch": {
        "operationId": "UpdateSecret2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "secret",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/v1/secrets/{id}/activities": {
      "get": {
        "summary": "View stack activities",
        "operationId": "GetSecretActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/v1/catalog/regions": {
      "get": {
        "summary": "List Region",
        "operationId": "ListRegions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListRegionsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "(Optional) A filter for regions",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CatalogRegions"
        ]
      }
    },
    "/v1/catalog/regions/{id}": {
      "get": {
        "summary": "Get Region",
        "operationId": "GetRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetRegionReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The name of the region",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CatalogRegions"
        ]
      }
    },
    "/v1/catalog/instances": {
      "get": {
        "summary": "List Instance",
        "operationId": "ListCatalogInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListCatalogInstancesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "(Optional) A filter for instances",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CatalogInstances"
        ]
      }
    },
    "/v1/catalog/instances/{id}": {
      "get": {
        "summary": "Get Instance",
        "operationId": "GetCatalogInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetCatalogInstanceReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The name of the instance",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CatalogInstances"
        ]
      }
    },
    "/v1/catalog/datacenters": {
      "get": {
        "summary": "List datacenters",
        "operationId": "ListDatacenters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListDatacentersReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "tags": [
          "CatalogDatacenters"
        ]
      }
    }
  },
  "definitions": {
    "GetMetricsReply.Metric": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": [
                "string",
                "number"
              ]
            }
          }
        }
      }
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "google.rpc.Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    },
    "LoginReply": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/Token"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com",
        "password": "..."
      },
      "properties": {
        "email": {
          "type": "string",
          "title": "User email"
        },
        "password": {
          "type": "string",
          "title": "User password"
        },
        "organization_id": {
          "type": "string",
          "title": "(Optional) Login into this organization"
        }
      }
    },
    "LogoutReply": {
      "type": "object"
    },
    "Token": {
      "type": "object",
      "example": {
        "id": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        "expires": "2022-09-08T14:00:00Z",
        "user_id": "996d7822-6b58-11e9-956f-32001b70f000",
        "organization_id": "9f33b2c6-6b58-11e9-883c-32001b70f000"
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ErrorField": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ErrorWithFields": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorField"
          }
        }
      }
    },
    "CreateOrganizationInvitationReply": {
      "type": "object",
      "properties": {
        "invitation": {
          "$ref": "#/definitions/OrganizationInvitation",
          "title": "The organization invitation sent"
        }
      }
    },
    "CreateOrganizationInvitationRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "The email of the person to invite"
        }
      }
    },
    "DeleteOrganizationInvitationReply": {
      "type": "object"
    },
    "GetOrganizationInvitationReply": {
      "type": "object",
      "properties": {
        "invitation": {
          "$ref": "#/definitions/OrganizationInvitation"
        }
      }
    },
    "ListOrganizationInvitationsReply": {
      "type": "object",
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationInvitation"
          },
          "title": "The collection of organization invitations"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "Organization.Status": {
      "type": "string",
      "enum": [
        "WARNING",
        "LOCKED",
        "ACTIVE",
        "DEACTIVATING",
        "DEACTIVATED",
        "DELETING",
        "DELETED"
      ],
      "default": "WARNING"
    },
    "OrganizationInvitation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/UserRole.Role"
        },
        "status": {
          "$ref": "#/definitions/OrganizationInvitation.Status"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        },
        "organization_id": {
          "type": "string"
        },
        "organization": {
          "$ref": "#/definitions/PublicOrganization"
        },
        "invitee_id": {
          "type": "string"
        },
        "invitee": {
          "$ref": "#/definitions/PublicUser"
        },
        "inviter_id": {
          "type": "string"
        },
        "inviter": {
          "$ref": "#/definitions/PublicUser"
        }
      }
    },
    "OrganizationInvitation.Status": {
      "type": "string",
      "enum": [
        "INVALID",
        "PENDING",
        "ACCEPTED",
        "REFUSED",
        "EXPIRED"
      ],
      "default": "INVALID"
    },
    "Plan": {
      "type": "string",
      "enum": [
        "hobby",
        "starter",
        "startup",
        "business",
        "enterprise"
      ],
      "default": "hobby"
    },
    "PublicOrganization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        },
        "status": {
          "$ref": "#/definitions/Organization.Status"
        }
      }
    },
    "PublicUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "github_id": {
          "type": "string"
        },
        "github_user": {
          "type": "string"
        }
      }
    },
    "ResendOrganizationInvitationReply": {
      "type": "object",
      "properties": {
        "invitation": {
          "$ref": "#/definitions/OrganizationInvitation",
          "title": "The organization invitation resent"
        }
      }
    },
    "UserRole.Role": {
      "type": "string",
      "enum": [
        "INVALID",
        "OWNER"
      ],
      "default": "INVALID"
    },
    "ConfirmPaymentAuthorizationReply": {
      "type": "object",
      "properties": {
        "payment_method": {
          "$ref": "#/definitions/PaymentMethod"
        }
      }
    },
    "CreatePaymentAuthorizationReply": {
      "type": "object",
      "properties": {
        "payment_method": {
          "$ref": "#/definitions/PaymentMethod"
        }
      }
    },
    "CreatePaymentAuthorizationRequest": {
      "type": "object"
    },
    "DeletePaymentMethodReply": {
      "type": "object"
    },
    "GetPaymentMethodReply": {
      "type": "object",
      "properties": {
        "payment_method": {
          "$ref": "#/definitions/PaymentMethod"
        }
      }
    },
    "ListPaymentMethodsReply": {
      "type": "object",
      "properties": {
        "payment_methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentMethod"
          },
          "title": "The collection of payment methods"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "PaymentMethod": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "organization_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/PaymentMethod.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stripe_payment_method_id": {
          "type": "string"
        },
        "authorization_verified_at": {
          "type": "string",
          "format": "date-time"
        },
        "authorization_canceled_at": {
          "type": "string",
          "format": "date-time"
        },
        "authorization_stripe_payment_intent_id": {
          "type": "string"
        },
        "authorization_stripe_payment_intent_client_secret": {
          "type": "string"
        },
        "card_brand": {
          "type": "string"
        },
        "card_country": {
          "type": "string"
        },
        "card_funding": {
          "type": "string"
        },
        "card_fingerprint": {
          "type": "string"
        },
        "card_last_digits": {
          "type": "string"
        },
        "card_expiration_month": {
          "type": "integer",
          "format": "int64"
        },
        "card_expiration_year": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PaymentMethod.Status": {
      "type": "string",
      "enum": [
        "INVALID",
        "CREATED",
        "AUTHORIZED",
        "DECLINED",
        "CANCELED",
        "EXPIRED",
        "UNCHECKED"
      ],
      "default": "INVALID"
    },
    "google.protobuf.NullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "AcceptOrganizationInvitationReply": {
      "type": "object",
      "properties": {
        "invitation": {
          "$ref": "#/definitions/OrganizationInvitation",
          "title": "The organization invitation accepted"
        }
      }
    },
    "Action": {
      "type": "string",
      "enum": [
        "signin",
        "signup",
        "register"
      ],
      "default": "signin"
    },
    "CannyAuthReply": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "CannyAuthRequest": {
      "type": "object"
    },
    "CreateAccountRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com",
        "password": "..."
      },
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "captcha": {
          "type": "string"
        },
        "use_v2": {
          "type": "boolean"
        }
      },
      "description": "Create new account",
      "title": "Create new account",
      "required": [
        "email",
        "password"
      ]
    },
    "CreateOrganizationReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "CreateOrganizationRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "DeactivateOrganizationReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "DeclineOrganizationInvitationReply": {
      "type": "object",
      "properties": {
        "invitation": {
          "$ref": "#/definitions/OrganizationInvitation",
          "title": "The organization invitation declined"
        }
      }
    },
    "DeleteAccountReply": {
      "type": "object"
    },
    "DiscourseAuthReply": {
      "type": "object",
      "properties": {
        "sso": {
          "type": "string"
        },
        "sig": {
          "type": "string"
        }
      }
    },
    "DiscourseAuthRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string"
        },
        "sig": {
          "type": "string"
        }
      }
    },
    "GetGithubInstallationReply": {
      "type": "object",
      "properties": {
        "installation_id": {
          "type": "string"
        },
        "installation_url": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/kgitproxy.GithubInstallation.Status"
        },
        "installed_at": {
          "type": "string",
          "format": "date-time"
        },
        "suspended_at": {
          "type": "string",
          "format": "date-time"
        },
        "indexing_status": {
          "$ref": "#/definitions/kgitproxy.IndexingStatus"
        },
        "indexed_repositories": {
          "type": "integer",
          "format": "int64"
        },
        "total_repositories": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GetOAuthOptionsReply": {
      "type": "object",
      "properties": {
        "oauth_providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OAuthProvider"
          }
        }
      },
      "description": "A list of providers which you can use for single sign-on."
    },
    "GetOrganizationReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "GetUserOrganizationInvitationReply": {
      "type": "object",
      "properties": {
        "invitation": {
          "$ref": "#/definitions/OrganizationInvitation"
        }
      }
    },
    "GithubInstallationCallbackReply": {
      "type": "object"
    },
    "GithubInstallationCallbackRequest": {
      "type": "object",
      "properties": {
        "installation_id": {
          "type": "string"
        },
        "setup_action": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "GithubInstallationReply": {
      "type": "object",
      "properties": {
        "app_name": {
          "type": "string",
          "title": "The github app name"
        },
        "app_id": {
          "type": "string",
          "format": "int64",
          "title": "The github app id"
        },
        "url": {
          "type": "string",
          "title": "The url to start the installation flow"
        },
        "state": {
          "type": "string",
          "title": "The state required by the protocol, it is only valid 10 minutes and encodes information about the type of flow"
        }
      }
    },
    "GithubInstallationRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "string",
          "title": "A small (limited to 400 characters) string of arbitrary metadata which will be encoded in the state"
        }
      }
    },
    "InviteUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ListUserOrganizationInvitationsReply": {
      "type": "object",
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationInvitation"
          },
          "title": "The collection of organization invitations"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "ManageReply": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "OAuthCallbackReply": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/Token",
          "title": "A jwt token to be used for session"
        }
      }
    },
    "OAuthCallbackRequest": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "title": "The state created at the origin of the OAuth flow"
        },
        "code": {
          "type": "string",
          "title": "The code returned by the OAuth provider"
        }
      }
    },
    "OAuthProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The name of the provider (.e.g github, google)"
        },
        "url": {
          "type": "string",
          "title": "The URL to call to initiate the OAuth flow"
        },
        "state": {
          "type": "string",
          "title": "The OAuth state required by the protocol, it is only valid 10 minutes and encodes information about the type of flow"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "company": {
          "type": "boolean"
        },
        "vat_number": {
          "type": "string"
        },
        "billing_name": {
          "type": "string"
        },
        "billing_email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        },
        "plan_updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "has_payment_method": {
          "type": "boolean"
        },
        "subscription_id": {
          "type": "string"
        },
        "signup_qualification": {
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/Organization.Status"
        },
        "status_message": {
          "$ref": "#/definitions/OrganizationDetailedStatus"
        },
        "verified": {
          "type": "boolean"
        }
      },
      "title": "Represent an Organization"
    },
    "OrganizationDetailedStatus": {
      "type": "string",
      "enum": [
        "NEW",
        "EMAIL_NOT_VALIDATED",
        "BILLING_INFO_MISSING",
        "LOCKED",
        "PAYMENT_FAILURE",
        "VALID",
        "PENDING_VERIFICATION",
        "VERIFICATION_FAILED",
        "REVIEWING_ACCOUNT",
        "PLAN_UPGRADE_REQUIRED"
      ],
      "default": "NEW"
    },
    "ResendEmailValidationReply": {
      "type": "object"
    },
    "ResendEmailValidationRequest": {
      "type": "object"
    },
    "ResetPasswordReply": {
      "type": "object"
    },
    "ResetPasswordRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com"
      },
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "UpdateOrganizationPlanReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "UpdateOrganizationReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "UpdatePasswordRequest": {
      "type": "object",
      "example": {
        "id": "...",
        "password": "..."
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UpdateUserRequest.UserUpdateBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "current_password": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "newsletter_subscribed": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "UpsertSignupQualificationReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      }
    },
    "User": {
      "type": "object",
      "example": {
        "id": "78352123-a06f-4ec2-81ed-27a056725385",
        "email": "john@snow.com",
        "name": "John Snow",
        "avatar_url": "https://www.gravatar.com/avatar/00000000000000000000000000000000",
        "is_admin": false,
        "is_test": true,
        "two_factor_authentication": false,
        "last_login": "0001-01-01T00:00:00Z",
        "last_login_id": "10.1.1.1",
        "updated_at": "0001-01-01T00:00:00Z",
        "created_at": "0001-01-01T00:00:00Z",
        "newsletter_subscribed": true,
        "email_validated": true
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "two_factor_authentication": {
          "type": "boolean"
        },
        "last_login": {
          "type": "string",
          "format": "date-time"
        },
        "last_login_ip": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "newsletter_subscribed": {
          "type": "boolean"
        },
        "github_id": {
          "type": "string"
        },
        "github_user": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserFlags"
          }
        },
        "name": {
          "type": "string"
        },
        "email_validated": {
          "type": "boolean"
        }
      },
      "title": "Represent a User"
    },
    "UserFlags": {
      "type": "string",
      "enum": [
        "ADMIN",
        "TEST",
        "RESTRICTED",
        "ACTIVE",
        "BETA"
      ],
      "default": "ADMIN",
      "title": "- ADMIN: A user is an admin user\n - TEST: A user is a test user\n - RESTRICTED: Whether this account as restricted access\n - ACTIVE: Whether this account is active\n - BETA: Account in beta program"
    },
    "UserReply": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Activity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "actor": {
          "$ref": "#/definitions/Object"
        },
        "object": {
          "$ref": "#/definitions/Object"
        },
        "verb": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ActivityList": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Activity"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "Empty": {
      "type": "object"
    },
    "kgitproxy.GithubInstallation.Status": {
      "type": "string",
      "enum": [
        "INVALID",
        "INSTALLED",
        "SUSPENDED",
        "DELETED"
      ],
      "default": "INVALID"
    },
    "kgitproxy.IndexingStatus": {
      "type": "string",
      "enum": [
        "INVALID_INDEXING_STATUS",
        "NOT_STARTED",
        "IN_PROGRESS",
        "COMPLETED"
      ],
      "default": "INVALID_INDEXING_STATUS"
    },
    "ConfirmOrganizationActionReply": {
      "type": "object"
    },
    "ListOrganizationMembersReply": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationMember"
          },
          "title": "The collection of organization members"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "OrganizationMember": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "joined_at": {
          "type": "string",
          "format": "date-time"
        },
        "role": {
          "$ref": "#/definitions/UserRole.Role"
        },
        "status": {
          "$ref": "#/definitions/OrganizationMember.Status"
        },
        "user": {
          "$ref": "#/definitions/PublicUser"
        },
        "organization": {
          "$ref": "#/definitions/PublicOrganization"
        }
      }
    },
    "OrganizationMember.Status": {
      "type": "string",
      "enum": [
        "INVALID",
        "ACTIVE",
        "DELETED"
      ],
      "default": "INVALID"
    },
    "RemoveOrganizationMemberReply": {
      "type": "object",
      "properties": {
        "member": {
          "$ref": "#/definitions/OrganizationMember"
        }
      }
    },
    "CreateCredential": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "CreateCredentialReply": {
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/Credential"
        }
      }
    },
    "Credential": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DeleteCredentialReply": {
      "type": "object"
    },
    "GetCredentialReply": {
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/Credential"
        }
      }
    },
    "ListCredentialsReply": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Credential"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UpdateCredentialReply": {
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/Credential"
        }
      }
    },
    "GetSubscriptionReply": {
      "type": "object",
      "properties": {
        "subscription": {
          "$ref": "#/definitions/Subscription"
        }
      }
    },
    "Subscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "organization_id": {
          "type": "string"
        },
        "stripe_subscription_id": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Subscription.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "terminate_at": {
          "type": "string",
          "format": "date-time"
        },
        "canceled_at": {
          "type": "string",
          "format": "date-time"
        },
        "terminated_at": {
          "type": "string",
          "format": "date-time"
        },
        "current_period_start": {
          "type": "string",
          "format": "date-time"
        },
        "current_period_end": {
          "type": "string",
          "format": "date-time"
        },
        "currency": {
          "type": "string"
        },
        "amount_payable": {
          "type": "string",
          "format": "int64"
        },
        "amount_paid": {
          "type": "string",
          "format": "int64"
        },
        "amount_remaining": {
          "type": "string",
          "format": "int64"
        },
        "payment_failure": {
          "$ref": "#/definitions/Subscription.PaymentFailure"
        }
      }
    },
    "Subscription.PaymentFailure": {
      "type": "object",
      "properties": {
        "failed_at": {
          "type": "string",
          "format": "date-time"
        },
        "next_attempt": {
          "type": "string",
          "format": "date-time"
        },
        "attempt_count": {
          "type": "string",
          "format": "int64"
        },
        "error_code": {
          "type": "string"
        },
        "error_reason": {
          "type": "string"
        },
        "error_type": {
          "type": "string"
        },
        "error_message": {
          "type": "string"
        },
        "payment_method_required": {
          "type": "boolean"
        },
        "redirect_url": {
          "type": "string"
        },
        "stripe_sdk": {
          "$ref": "#/definitions/Subscription.PaymentFailure.StripeSDK"
        }
      }
    },
    "Subscription.PaymentFailure.StripeSDK": {
      "type": "object",
      "properties": {
        "client_secret_key": {
          "type": "string"
        },
        "raw_json": {
          "type": "string"
        }
      }
    },
    "Subscription.Status": {
      "type": "string",
      "enum": [
        "INVALID",
        "CREATED",
        "ACTIVE",
        "WARNING",
        "URGENT",
        "CANCELING",
        "CANCELED",
        "TERMINATING",
        "TERMINATED"
      ],
      "default": "INVALID"
    },
    "ksearch.App": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ksearch.GlobalDeployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        }
      }
    },
    "ksearch.Instance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "allocation_id": {
          "type": "string"
        }
      }
    },
    "ksearch.Organization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ksearch.RegionalDeployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "ksearch.SearchReply": {
      "type": "object",
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ksearch.Organization"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ksearch.User"
          }
        },
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ksearch.App"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ksearch.Service"
          }
        },
        "global_deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ksearch.GlobalDeployment"
          }
        },
        "regional_deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ksearch.RegionalDeployment"
          }
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ksearch.Instance"
          }
        }
      }
    },
    "ksearch.Service": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ksearch.User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "github_user": {
          "type": "string"
        }
      }
    },
    "LogEntry": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "labels": {
          "type": "object"
        }
      }
    },
    "ExecCommandIO": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "Data is base64 encoded"
        }
      }
    },
    "ExecCommandReply": {
      "type": "object",
      "properties": {
        "stdout": {
          "$ref": "#/definitions/ExecCommandIO"
        },
        "stderr": {
          "$ref": "#/definitions/ExecCommandIO"
        },
        "exited": {
          "type": "boolean"
        },
        "exit_code": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ExecCommandRequest.Body": {
      "type": "object",
      "properties": {
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Command to exec. Mandatory in the first frame sent"
        },
        "tty_size": {
          "$ref": "#/definitions/ExecCommandRequest.TerminalSize"
        },
        "stdin": {
          "$ref": "#/definitions/ExecCommandIO"
        }
      }
    },
    "ExecCommandRequest.TerminalSize": {
      "type": "object",
      "properties": {
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GetMetricsReply": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetMetricsReply.Metric"
          }
        }
      }
    },
    "MetricName": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CPU_TOTAL_PERCENT",
        "MEM_RSS",
        "HTTP_THROUGHPUT",
        "HTTP_RESPONSE_TIME_50P",
        "HTTP_RESPONSE_TIME_90P",
        "HTTP_RESPONSE_TIME_99P",
        "HTTP_RESPONSE_TIME_MAX",
        "PUBLIC_DATA_TRANSFER_IN",
        "PUBLIC_DATA_TRANSFER_OUT"
      ],
      "default": "UNKNOWN"
    },
    "kgitproxy.Branch": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "repository_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "is_default": {
          "type": "boolean"
        },
        "is_protected": {
          "type": "boolean"
        },
        "provider": {
          "$ref": "#/definitions/kgitproxy.RepositoryProvider"
        }
      }
    },
    "kgitproxy.GitHubRepository": {
      "type": "object",
      "properties": {
        "github_id": {
          "type": "string"
        }
      }
    },
    "kgitproxy.ListBranchesReply": {
      "type": "object",
      "properties": {
        "branches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kgitproxy.Branch"
          },
          "description": "The collection of branches."
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "The limit in the request."
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "The offset in the request."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items."
        }
      }
    },
    "kgitproxy.ListRepositoriesReply": {
      "type": "object",
      "properties": {
        "repositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kgitproxy.Repository"
          },
          "description": "The collection of repositories."
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "The limit in the request."
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "The offset in the request."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items."
        }
      }
    },
    "kgitproxy.Repository": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "is_private": {
          "type": "boolean"
        },
        "is_disabled": {
          "type": "boolean"
        },
        "default_branch": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/kgitproxy.RepositoryProvider"
        },
        "last_push_date": {
          "type": "string",
          "format": "date-time"
        },
        "github": {
          "$ref": "#/definitions/kgitproxy.GitHubRepository"
        }
      }
    },
    "kgitproxy.RepositoryProvider": {
      "type": "string",
      "enum": [
        "INVALID_PROVIDER",
        "GITHUB"
      ],
      "default": "INVALID_PROVIDER"
    },
    "kgitproxy.ResyncOrganizationReply": {
      "type": "object"
    },
    "Notification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "is_read": {
          "type": "boolean"
        },
        "is_seen": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "NotificationList": {
      "type": "object",
      "properties": {
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "is_read": {
          "type": "boolean"
        },
        "is_seen": {
          "type": "boolean"
        },
        "unread": {
          "type": "integer",
          "format": "int64"
        },
        "unseen": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DeploymentHealthCheck": {
      "type": "object",
      "properties": {
        "grace_period": {
          "type": "integer",
          "format": "int64",
          "title": "An optional initial period in seconds to wait for the instance to become healthy, default is 5s"
        },
        "interval": {
          "type": "integer",
          "format": "int64",
          "title": "An optional period in seconds between two health checks, default is 60s"
        },
        "restart_limit": {
          "type": "integer",
          "format": "int64",
          "title": "An optional number of consecutive failures before attempting to restart the service, default is 3"
        },
        "timeout": {
          "type": "integer",
          "format": "int64",
          "title": "An optional maximum time to wait in seconds before considering the check as a failure, default is 5s"
        },
        "tcp": {
          "$ref": "#/definitions/TCPHealthCheck"
        },
        "http": {
          "$ref": "#/definitions/HTTPHealthCheck"
        }
      }
    },
    "DeploymentProvisioningInfo": {
      "type": "object",
      "properties": {
        "sha": {
          "type": "string",
          "description": "The git sha for this build (we resolve the reference at the start of the build)."
        },
        "image": {
          "type": "string",
          "description": "The docker image built as a result of this build."
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentProvisioningInfo.Stage"
          },
          "description": "Some info about the build."
        }
      }
    },
    "DeploymentProvisioningInfo.Stage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/DeploymentProvisioningInfo.Stage.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "finished_at": {
          "type": "string",
          "format": "date-time"
        },
        "build_attempts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentProvisioningInfo.Stage.BuildAttempt"
          }
        }
      }
    },
    "DeploymentProvisioningInfo.Stage.BuildAttempt": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "$ref": "#/definitions/DeploymentProvisioningInfo.Stage.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "finished_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DeploymentProvisioningInfo.Stage.Status": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "RUNNING",
        "FAILED",
        "COMPLETED"
      ],
      "default": "UNKNOWN"
    },
    "DockerSource": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        },
        "command": {
          "type": "string"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "image_registry_secret": {
          "type": "string"
        }
      }
    },
    "Env": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      }
    },
    "GetRegionalDeploymentReply": {
      "type": "object",
      "properties": {
        "regional_deployment": {
          "$ref": "#/definitions/RegionalDeployment"
        }
      }
    },
    "GitSource": {
      "type": "object",
      "properties": {
        "repository": {
          "type": "string",
          "description": "A url to a git repository (contains the provider as well) .e.g: github.com/koyeb/test."
        },
        "branch": {
          "type": "string",
          "title": "A git branch that will be tracked for new commits and deployments will be created"
        },
        "tag": {
          "type": "string",
          "title": "A git tag that should be built"
        },
        "sha": {
          "type": "string",
          "title": "A git commit that should be built (useful for pinning to a commit, this will always be set when a deployment is created by a code push)"
        },
        "build_command": {
          "type": "string",
          "title": "A command used to override the build command, run after all build steps"
        },
        "run_command": {
          "type": "string",
          "title": "A command used to override the default run command"
        },
        "no_deploy_on_push": {
          "type": "boolean",
          "title": "A flag to disable a new deployment when a push event is detected"
        },
        "workdir": {
          "type": "string",
          "title": "A subdirectory to use as the build directory"
        }
      }
    },
    "HTTPHeader": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "HTTPHealthCheck": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64",
          "title": "The port to use to perform the health check, must be declared in the ports section"
        },
        "path": {
          "type": "string",
          "title": "The path to use to perform the HTTP health check"
        },
        "method": {
          "type": "string",
          "title": "An optional HTTP method to use to perform the health check, default is GET"
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HTTPHeader"
          },
          "title": "An optional list of HTTP headers to provide when performing the request, default is empty"
        }
      }
    },
    "ListRegionalDeploymentsReply": {
      "type": "object",
      "properties": {
        "regional_deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegionalDeploymentListItem"
          },
          "title": "The collection of regional deployments"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "Port": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "RegionalDeployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "allocated_at": {
          "type": "string",
          "format": "date-time"
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "succeeded_at": {
          "type": "string",
          "format": "date-time"
        },
        "terminated_at": {
          "type": "string",
          "format": "date-time"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "child_id": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/RegionalDeployment.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "definition": {
          "$ref": "#/definitions/RegionalDeploymentDefinition"
        },
        "datacenters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "$ref": "#/definitions/RegionalDeploymentMetadata"
        },
        "provisioning_info": {
          "$ref": "#/definitions/DeploymentProvisioningInfo"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "deployment_group": {
          "type": "string",
          "title": "Legacy stuff"
        },
        "deployment_id": {
          "type": "string"
        }
      }
    },
    "RegionalDeployment.Status": {
      "type": "string",
      "enum": [
        "PENDING",
        "PROVISIONING",
        "SCHEDULED",
        "CANCELING",
        "CANCELED",
        "ALLOCATING",
        "STARTING",
        "HEALTHY",
        "DEGRADED",
        "UNHEALTHY",
        "STOPPING",
        "STOPPED",
        "ERRORING",
        "ERROR"
      ],
      "default": "PENDING"
    },
    "RegionalDeploymentDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/RegionalDeploymentDefinition.Type"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Route"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          }
        },
        "env": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Env"
          }
        },
        "region": {
          "type": "string"
        },
        "scaling": {
          "$ref": "#/definitions/Scaling"
        },
        "instance_type": {
          "type": "string"
        },
        "deployment_group": {
          "type": "string"
        },
        "health_checks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentHealthCheck"
          }
        },
        "skip_cache": {
          "type": "boolean"
        },
        "docker": {
          "$ref": "#/definitions/DockerSource"
        },
        "git": {
          "$ref": "#/definitions/GitSource"
        }
      }
    },
    "RegionalDeploymentDefinition.Type": {
      "type": "string",
      "enum": [
        "INVALID",
        "WEB",
        "WORKER"
      ],
      "default": "INVALID"
    },
    "RegionalDeploymentListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "region": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/RegionalDeployment.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "definition": {
          "$ref": "#/definitions/RegionalDeploymentDefinition"
        }
      }
    },
    "RegionalDeploymentMetadata": {
      "type": "object",
      "properties": {
        "runtime_job_id": {
          "type": "string"
        }
      }
    },
    "Route": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "Scaling": {
      "type": "object",
      "properties": {
        "min": {
          "type": "integer",
          "format": "int64"
        },
        "max": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TCPHealthCheck": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64",
          "title": "The port to use to perform the health check, must be declared in the ports section"
        }
      }
    },
    "App": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "succeeded_at": {
          "type": "string",
          "format": "date-time"
        },
        "paused_at": {
          "type": "string",
          "format": "date-time"
        },
        "resumed_at": {
          "type": "string",
          "format": "date-time"
        },
        "terminated_at": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/App.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        }
      }
    },
    "App.Status": {
      "type": "string",
      "enum": [
        "STARTING",
        "HEALTHY",
        "DEGRADED",
        "UNHEALTHY",
        "DELETING",
        "DELETED",
        "PAUSING",
        "PAUSED",
        "RESUMING"
      ],
      "default": "STARTING"
    },
    "AppListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        },
        "status": {
          "$ref": "#/definitions/App.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateApp": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "CreateAppReply": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App",
          "title": "The entity created"
        }
      }
    },
    "DeleteAppReply": {
      "type": "object"
    },
    "Domain": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/Domain.Status"
        },
        "type": {
          "$ref": "#/definitions/Domain.Type"
        },
        "app_id": {
          "type": "string"
        },
        "deployment_group": {
          "type": "string"
        },
        "verified_at": {
          "type": "string",
          "format": "date-time"
        },
        "intended_cname": {
          "type": "string"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "Domain.Status": {
      "type": "string",
      "enum": [
        "PENDING",
        "ACTIVE",
        "ERROR",
        "DELETING",
        "DELETED"
      ],
      "default": "PENDING"
    },
    "Domain.Type": {
      "type": "string",
      "enum": [
        "AUTOASSIGNED",
        "CUSTOM"
      ],
      "default": "AUTOASSIGNED",
      "title": "- AUTOASSIGNED: Domain like <appName>-<orgName>.koyeb.app"
    },
    "GetAppReply": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App",
          "title": "The App retrieved"
        }
      }
    },
    "ListAppsReply": {
      "type": "object",
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "PauseAppReply": {
      "type": "object"
    },
    "ResumeAppReply": {
      "type": "object"
    },
    "UpdateApp": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "UpdateAppReply": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App",
          "title": "The entity updated"
        }
      }
    },
    "AppUsage": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "app_name": {
          "type": "string"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceUsage"
          }
        }
      }
    },
    "GetOrganizationUsageDetailsReply": {
      "type": "object",
      "properties": {
        "usage_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsageDetails"
          },
          "title": "The collection of usage instances"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        },
        "order": {
          "type": "string",
          "title": "The order in the request"
        }
      }
    },
    "GetOrganizationUsageReply": {
      "type": "object",
      "properties": {
        "usage": {
          "$ref": "#/definitions/Usage",
          "title": "The computed usage of instances per month"
        }
      }
    },
    "InstanceUsage": {
      "type": "object",
      "properties": {
        "duration_seconds": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PeriodUsage": {
      "type": "object",
      "properties": {
        "starting_time": {
          "type": "string",
          "format": "date-time"
        },
        "ending_time": {
          "type": "string",
          "format": "date-time"
        },
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppUsage"
          }
        }
      }
    },
    "RegionUsage": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InstanceUsage"
          }
        }
      }
    },
    "ServiceUsage": {
      "type": "object",
      "properties": {
        "service_id": {
          "type": "string"
        },
        "service_name": {
          "type": "string"
        },
        "regions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RegionUsage"
          }
        }
      }
    },
    "Usage": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "periods": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PeriodUsage"
          }
        }
      }
    },
    "UsageDetails": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "instance_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "app_name": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "service_name": {
          "type": "string"
        },
        "regional_deployment_id": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "deployment_id": {
          "type": "string"
        },
        "instance_type": {
          "type": "string"
        },
        "duration_seconds": {
          "type": "integer",
          "format": "int64"
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "terminated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CreateDomain": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Domain.Type"
        },
        "app_id": {
          "type": "string",
          "title": "to auto-attach to an app. Optional"
        }
      }
    },
    "CreateDomainReply": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/Domain"
        }
      }
    },
    "DeleteDomainReply": {
      "type": "object"
    },
    "GetDomainReply": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/Domain"
        }
      }
    },
    "ListDomainsReply": {
      "type": "object",
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "RefreshDomainStatusReply": {
      "type": "object"
    },
    "UpdateDomain": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string",
          "title": "To attach or detach from an app"
        }
      }
    },
    "UpdateDomainReply": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/Domain"
        }
      }
    },
    "ReviewOrganizationCapacityReply": {
      "type": "object",
      "properties": {
        "has_capacity": {
          "type": "boolean"
        }
      }
    },
    "ReviewOrganizationCapacityRequest": {
      "type": "object",
      "properties": {
        "plan": {
          "type": "string"
        }
      }
    },
    "GetInstanceReply": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/Instance"
        }
      }
    },
    "Instance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "regional_deployment_id": {
          "type": "string"
        },
        "allocation_id": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "datacenter": {
          "type": "string"
        },
        "hypervisor": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Instance.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "terminated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Instance.Status": {
      "type": "string",
      "enum": [
        "ALLOCATING",
        "STARTING",
        "HEALTHY",
        "UNHEALTHY",
        "STOPPING",
        "STOPPED",
        "ERROR"
      ],
      "default": "ALLOCATING"
    },
    "InstanceListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "regional_deployment_id": {
          "type": "string"
        },
        "allocation_id": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "datacenter": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Instance.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListInstancesReply": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceListItem"
          },
          "title": "The collection of instances"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        },
        "order": {
          "type": "string",
          "title": "The order in the request"
        }
      }
    },
    "CancelDeploymentReply": {
      "type": "object"
    },
    "Deployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "allocated_at": {
          "type": "string",
          "format": "date-time"
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "succeeded_at": {
          "type": "string",
          "format": "date-time"
        },
        "terminated_at": {
          "type": "string",
          "format": "date-time"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "child_id": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Deployment.Status"
        },
        "metadata": {
          "$ref": "#/definitions/DeploymentMetadata"
        },
        "definition": {
          "$ref": "#/definitions/DeploymentDefinition"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "provisioning_info": {
          "$ref": "#/definitions/DeploymentProvisioningInfo"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "deployment_group": {
          "type": "string"
        }
      }
    },
    "Deployment.Status": {
      "type": "string",
      "enum": [
        "PENDING",
        "PROVISIONING",
        "SCHEDULED",
        "CANCELING",
        "CANCELED",
        "ALLOCATING",
        "STARTING",
        "HEALTHY",
        "DEGRADED",
        "UNHEALTHY",
        "STOPPING",
        "STOPPED",
        "ERRORING",
        "ERROR"
      ],
      "default": "PENDING"
    },
    "DeploymentDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/DeploymentDefinition.Type"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentRoute"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPort"
          }
        },
        "env": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentEnv"
          }
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scalings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentScaling"
          }
        },
        "instance_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentInstanceType"
          }
        },
        "health_checks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentHealthCheck"
          }
        },
        "skip_cache": {
          "type": "boolean"
        },
        "docker": {
          "$ref": "#/definitions/DockerSource"
        },
        "git": {
          "$ref": "#/definitions/GitSource"
        }
      }
    },
    "DeploymentDefinition.Type": {
      "type": "string",
      "enum": [
        "INVALID",
        "WEB",
        "WORKER"
      ],
      "default": "INVALID"
    },
    "DeploymentEnv": {
      "type": "object",
      "properties": {
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      }
    },
    "DeploymentInstanceType": {
      "type": "object",
      "properties": {
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "DeploymentListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "allocated_at": {
          "type": "string",
          "format": "date-time"
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "succeeded_at": {
          "type": "string",
          "format": "date-time"
        },
        "terminated_at": {
          "type": "string",
          "format": "date-time"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "service_id": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "child_id": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Deployment.Status"
        },
        "metadata": {
          "$ref": "#/definitions/DeploymentMetadata"
        },
        "definition": {
          "$ref": "#/definitions/DeploymentDefinition"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "provisioning_info": {
          "$ref": "#/definitions/DeploymentProvisioningInfo"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "deployment_group": {
          "type": "string"
        }
      }
    },
    "DeploymentMetadata": {
      "type": "object",
      "properties": {
        "trigger": {
          "$ref": "#/definitions/TriggerDeploymentMetadata"
        }
      }
    },
    "DeploymentPort": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "DeploymentRoute": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "DeploymentScaling": {
      "type": "object",
      "properties": {
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "min": {
          "type": "integer",
          "format": "int64"
        },
        "max": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GetDeploymentReply": {
      "type": "object",
      "properties": {
        "deployment": {
          "$ref": "#/definitions/Deployment"
        }
      }
    },
    "GitDeploymentMetadata": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/GitDeploymentMetadata.Provider"
        },
        "repository": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "sender_username": {
          "type": "string"
        },
        "sender_avatar_url": {
          "type": "string"
        },
        "sender_profile_url": {
          "type": "string"
        }
      }
    },
    "GitDeploymentMetadata.Provider": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "GITHUB"
      ],
      "default": "UNKNOWN"
    },
    "ListDeploymentsReply": {
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentListItem"
          },
          "title": "The collection of deployments"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "TriggerDeploymentMetadata": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/TriggerDeploymentMetadata.TriggerType"
        },
        "actor": {
          "$ref": "#/definitions/TriggerDeploymentMetadata.ActorType"
        },
        "git": {
          "$ref": "#/definitions/GitDeploymentMetadata"
        }
      }
    },
    "TriggerDeploymentMetadata.ActorType": {
      "type": "string",
      "enum": [
        "UNKNOWN_ACTOR",
        "USER",
        "SYSTEM"
      ],
      "default": "UNKNOWN_ACTOR"
    },
    "TriggerDeploymentMetadata.TriggerType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TYPE",
        "GIT",
        "RESUME"
      ],
      "default": "UNKNOWN_TYPE"
    },
    "AutoRelease": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutoRelease.Group"
          }
        }
      }
    },
    "AutoRelease.Group": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "git_ref": {
          "type": "string",
          "title": "A git ref to track (.e.g: refs/tags/<tag> or refs/heads/<branch>"
        },
        "latest_sha": {
          "type": "string",
          "title": "The last hash that was resolved (used to avoid triggering releases when things haven't changed)"
        }
      },
      "title": "Configuration extracted from the latest deployment in this deployment_group"
    },
    "CreateService": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "definition": {
          "$ref": "#/definitions/DeploymentDefinition"
        }
      }
    },
    "CreateServiceReply": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/Service",
          "title": "The entity created"
        }
      }
    },
    "DeleteServiceReply": {
      "type": "object"
    },
    "DesiredDeployment": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DesiredDeployment.Group"
          }
        }
      }
    },
    "DesiredDeployment.Group": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "deployment_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GetServiceReply": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/Service",
          "title": "The Service retrieved"
        }
      }
    },
    "ListServicesReply": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "PauseServiceReply": {
      "type": "object"
    },
    "RedeployReply": {
      "type": "object",
      "properties": {
        "deployment": {
          "$ref": "#/definitions/Deployment",
          "title": "The entity updated"
        }
      }
    },
    "RedeployRequest.Info": {
      "type": "object",
      "properties": {
        "deployment_group": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "use_cache": {
          "type": "boolean"
        }
      }
    },
    "ResumeServiceReply": {
      "type": "object"
    },
    "Service": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "succeeded_at": {
          "type": "string",
          "format": "date-time"
        },
        "paused_at": {
          "type": "string",
          "format": "date-time"
        },
        "resumed_at": {
          "type": "string",
          "format": "date-time"
        },
        "terminated_at": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Service.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "active_deployment_id": {
          "type": "string"
        },
        "latest_deployment_id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/ServiceState",
          "title": "Legacy stuff"
        }
      }
    },
    "Service.Status": {
      "type": "string",
      "enum": [
        "STARTING",
        "HEALTHY",
        "DEGRADED",
        "UNHEALTHY",
        "DELETING",
        "DELETED",
        "PAUSING",
        "PAUSED",
        "RESUMING"
      ],
      "default": "STARTING"
    },
    "ServiceListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/Service.Status"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "A version updated whenever this state changes (useful for caching)"
        },
        "state": {
          "$ref": "#/definitions/ServiceState"
        },
        "active_deployment_id": {
          "type": "string"
        },
        "latest_deployment_id": {
          "type": "string"
        }
      }
    },
    "ServiceState": {
      "type": "object",
      "properties": {
        "desired_deployment": {
          "$ref": "#/definitions/DesiredDeployment"
        },
        "auto_release": {
          "$ref": "#/definitions/AutoRelease"
        }
      }
    },
    "UpdateService": {
      "type": "object",
      "properties": {
        "definition": {
          "$ref": "#/definitions/DeploymentDefinition"
        }
      }
    },
    "UpdateServiceReply": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/Service",
          "title": "The entity updated"
        }
      }
    },
    "AzureContainerRegistryConfiguration": {
      "type": "object",
      "properties": {
        "registry_name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "CreateSecret": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/SecretType"
        },
        "value": {
          "type": "string"
        },
        "docker_hub_registry": {
          "$ref": "#/definitions/DockerHubRegistryConfiguration"
        },
        "private_registry": {
          "$ref": "#/definitions/PrivateRegistryConfiguration"
        },
        "digital_ocean_registry": {
          "$ref": "#/definitions/DigitalOceanRegistryConfiguration"
        },
        "github_registry": {
          "$ref": "#/definitions/GitHubRegistryConfiguration"
        },
        "gitlab_registry": {
          "$ref": "#/definitions/GitLabRegistryConfiguration"
        },
        "gcp_container_registry": {
          "$ref": "#/definitions/GCPContainerRegistryConfiguration"
        },
        "azure_container_registry": {
          "$ref": "#/definitions/AzureContainerRegistryConfiguration"
        }
      }
    },
    "CreateSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/Secret"
        }
      }
    },
    "DeleteSecretReply": {
      "type": "object"
    },
    "DigitalOceanRegistryConfiguration": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "DockerHubRegistryConfiguration": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "GCPContainerRegistryConfiguration": {
      "type": "object",
      "properties": {
        "keyfile_content": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "GetSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/Secret"
        }
      }
    },
    "GitHubRegistryConfiguration": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "GitLabRegistryConfiguration": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "ListSecretsReply": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Secret"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PrivateRegistryConfiguration": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Secret": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/SecretType"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "string"
        },
        "docker_hub_registry": {
          "$ref": "#/definitions/DockerHubRegistryConfiguration"
        },
        "private_registry": {
          "$ref": "#/definitions/PrivateRegistryConfiguration"
        },
        "digital_ocean_registry": {
          "$ref": "#/definitions/DigitalOceanRegistryConfiguration"
        },
        "github_registry": {
          "$ref": "#/definitions/GitHubRegistryConfiguration"
        },
        "gitlab_registry": {
          "$ref": "#/definitions/GitLabRegistryConfiguration"
        },
        "gcp_container_registry": {
          "$ref": "#/definitions/GCPContainerRegistryConfiguration"
        },
        "azure_container_registry": {
          "$ref": "#/definitions/AzureContainerRegistryConfiguration"
        }
      }
    },
    "SecretType": {
      "type": "string",
      "enum": [
        "SIMPLE",
        "REGISTRY"
      ],
      "default": "SIMPLE"
    },
    "UpdateSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/Secret"
        }
      }
    },
    "GetRegionReply": {
      "type": "object",
      "properties": {
        "region": {
          "$ref": "#/definitions/Region",
          "title": "The Region retrieved"
        }
      }
    },
    "ListRegionsReply": {
      "type": "object",
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegionListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "Region": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the region"
        },
        "name": {
          "type": "string",
          "title": "The name of the region"
        },
        "coordinates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The coordinates of the region (lat/long)"
        },
        "status": {
          "type": "string",
          "title": "The status of the region"
        },
        "instances": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of instances available in this region"
        },
        "datacenters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of datacenters available in this region"
        }
      }
    },
    "RegionListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the region"
        },
        "name": {
          "type": "string",
          "title": "The name of the region"
        },
        "coordinates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The coordinates of the region (lat/long)"
        },
        "status": {
          "type": "string",
          "title": "The status of the region"
        },
        "instances": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of instances available in this region"
        },
        "datacenters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of datacenters available in this region"
        }
      }
    },
    "CatalogInstance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The name of the instance"
        },
        "description": {
          "type": "string",
          "title": "A short description of the instance"
        },
        "vcpu": {
          "type": "integer",
          "format": "int64",
          "title": "The number of cpus"
        },
        "memory": {
          "type": "string",
          "title": "The memory in bytes in a format like 5MB"
        },
        "disk": {
          "type": "string",
          "title": "The size of the disk in bytes in a format like 5MB"
        },
        "price_hourly": {
          "type": "string",
          "title": "The price to pay per hour"
        },
        "price_monthly": {
          "type": "string",
          "title": "The price to pay per month"
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The regions where this instance type is available"
        },
        "status": {
          "type": "string",
          "title": "The status of the instance"
        },
        "require_plan": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The plan required to use instance"
        }
      }
    },
    "CatalogInstanceListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The name of the instance"
        },
        "description": {
          "type": "string",
          "title": "A short description of the instance"
        },
        "vcpu": {
          "type": "integer",
          "format": "int64",
          "title": "The number of cpus"
        },
        "memory": {
          "type": "string",
          "title": "The memory in bytes in a format like 5MB"
        },
        "disk": {
          "type": "string",
          "title": "The size of the disk in bytes in a format like 5MB"
        },
        "price_hourly": {
          "type": "string",
          "title": "The price to pay per hour"
        },
        "price_monthly": {
          "type": "string",
          "title": "The price to pay per month"
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The regions where this instance type is available"
        },
        "status": {
          "type": "string",
          "title": "The status of the instance"
        },
        "require_plan": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The plan required to use instance"
        }
      }
    },
    "GetCatalogInstanceReply": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/CatalogInstance",
          "title": "The instance retrieved"
        }
      }
    },
    "ListCatalogInstancesReply": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogInstanceListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "DatacenterListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "e.g. \"par1\""
        },
        "region_id": {
          "type": "string",
          "title": "e.g. \"par\""
        },
        "domain": {
          "type": "string",
          "title": "e.g. \"all-par1.infra.prod.koyeb.com\""
        },
        "coordinates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "e.g. \"8.856614\" ,\"2.352221\"?"
        }
      }
    },
    "ListDatacentersReply": {
      "type": "object",
      "properties": {
        "datacenters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatacenterListItem"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}