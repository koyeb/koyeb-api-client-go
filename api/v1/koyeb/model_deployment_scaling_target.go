/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// DeploymentScalingTarget struct for DeploymentScalingTarget
type DeploymentScalingTarget struct {
	AverageCpu *DeploymentScalingTargetAverageCPU `json:"average_cpu,omitempty"`
	AverageMem *DeploymentScalingTargetAverageMem `json:"average_mem,omitempty"`
	RequestsPerSecond *DeploymentScalingTargetRequestsPerSecond `json:"requests_per_second,omitempty"`
	ConcurrentRequests *DeploymentScalingTargetConcurrentRequests `json:"concurrent_requests,omitempty"`
	RequestsResponseTime *DeploymentScalingTargetRequestsResponseTime `json:"requests_response_time,omitempty"`
}

// NewDeploymentScalingTarget instantiates a new DeploymentScalingTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentScalingTarget() *DeploymentScalingTarget {
	this := DeploymentScalingTarget{}
	return &this
}

// NewDeploymentScalingTargetWithDefaults instantiates a new DeploymentScalingTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentScalingTargetWithDefaults() *DeploymentScalingTarget {
	this := DeploymentScalingTarget{}
	return &this
}

// GetAverageCpu returns the AverageCpu field value if set, zero value otherwise.
func (o *DeploymentScalingTarget) GetAverageCpu() DeploymentScalingTargetAverageCPU {
	if o == nil || isNil(o.AverageCpu) {
		var ret DeploymentScalingTargetAverageCPU
		return ret
	}
	return *o.AverageCpu
}

// GetAverageCpuOk returns a tuple with the AverageCpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentScalingTarget) GetAverageCpuOk() (*DeploymentScalingTargetAverageCPU, bool) {
	if o == nil || isNil(o.AverageCpu) {
    return nil, false
	}
	return o.AverageCpu, true
}

// HasAverageCpu returns a boolean if a field has been set.
func (o *DeploymentScalingTarget) HasAverageCpu() bool {
	if o != nil && !isNil(o.AverageCpu) {
		return true
	}

	return false
}

// SetAverageCpu gets a reference to the given DeploymentScalingTargetAverageCPU and assigns it to the AverageCpu field.
func (o *DeploymentScalingTarget) SetAverageCpu(v DeploymentScalingTargetAverageCPU) {
	o.AverageCpu = &v
}

// GetAverageMem returns the AverageMem field value if set, zero value otherwise.
func (o *DeploymentScalingTarget) GetAverageMem() DeploymentScalingTargetAverageMem {
	if o == nil || isNil(o.AverageMem) {
		var ret DeploymentScalingTargetAverageMem
		return ret
	}
	return *o.AverageMem
}

// GetAverageMemOk returns a tuple with the AverageMem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentScalingTarget) GetAverageMemOk() (*DeploymentScalingTargetAverageMem, bool) {
	if o == nil || isNil(o.AverageMem) {
    return nil, false
	}
	return o.AverageMem, true
}

// HasAverageMem returns a boolean if a field has been set.
func (o *DeploymentScalingTarget) HasAverageMem() bool {
	if o != nil && !isNil(o.AverageMem) {
		return true
	}

	return false
}

// SetAverageMem gets a reference to the given DeploymentScalingTargetAverageMem and assigns it to the AverageMem field.
func (o *DeploymentScalingTarget) SetAverageMem(v DeploymentScalingTargetAverageMem) {
	o.AverageMem = &v
}

// GetRequestsPerSecond returns the RequestsPerSecond field value if set, zero value otherwise.
func (o *DeploymentScalingTarget) GetRequestsPerSecond() DeploymentScalingTargetRequestsPerSecond {
	if o == nil || isNil(o.RequestsPerSecond) {
		var ret DeploymentScalingTargetRequestsPerSecond
		return ret
	}
	return *o.RequestsPerSecond
}

// GetRequestsPerSecondOk returns a tuple with the RequestsPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentScalingTarget) GetRequestsPerSecondOk() (*DeploymentScalingTargetRequestsPerSecond, bool) {
	if o == nil || isNil(o.RequestsPerSecond) {
    return nil, false
	}
	return o.RequestsPerSecond, true
}

// HasRequestsPerSecond returns a boolean if a field has been set.
func (o *DeploymentScalingTarget) HasRequestsPerSecond() bool {
	if o != nil && !isNil(o.RequestsPerSecond) {
		return true
	}

	return false
}

// SetRequestsPerSecond gets a reference to the given DeploymentScalingTargetRequestsPerSecond and assigns it to the RequestsPerSecond field.
func (o *DeploymentScalingTarget) SetRequestsPerSecond(v DeploymentScalingTargetRequestsPerSecond) {
	o.RequestsPerSecond = &v
}

// GetConcurrentRequests returns the ConcurrentRequests field value if set, zero value otherwise.
func (o *DeploymentScalingTarget) GetConcurrentRequests() DeploymentScalingTargetConcurrentRequests {
	if o == nil || isNil(o.ConcurrentRequests) {
		var ret DeploymentScalingTargetConcurrentRequests
		return ret
	}
	return *o.ConcurrentRequests
}

// GetConcurrentRequestsOk returns a tuple with the ConcurrentRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentScalingTarget) GetConcurrentRequestsOk() (*DeploymentScalingTargetConcurrentRequests, bool) {
	if o == nil || isNil(o.ConcurrentRequests) {
    return nil, false
	}
	return o.ConcurrentRequests, true
}

// HasConcurrentRequests returns a boolean if a field has been set.
func (o *DeploymentScalingTarget) HasConcurrentRequests() bool {
	if o != nil && !isNil(o.ConcurrentRequests) {
		return true
	}

	return false
}

// SetConcurrentRequests gets a reference to the given DeploymentScalingTargetConcurrentRequests and assigns it to the ConcurrentRequests field.
func (o *DeploymentScalingTarget) SetConcurrentRequests(v DeploymentScalingTargetConcurrentRequests) {
	o.ConcurrentRequests = &v
}

// GetRequestsResponseTime returns the RequestsResponseTime field value if set, zero value otherwise.
func (o *DeploymentScalingTarget) GetRequestsResponseTime() DeploymentScalingTargetRequestsResponseTime {
	if o == nil || isNil(o.RequestsResponseTime) {
		var ret DeploymentScalingTargetRequestsResponseTime
		return ret
	}
	return *o.RequestsResponseTime
}

// GetRequestsResponseTimeOk returns a tuple with the RequestsResponseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentScalingTarget) GetRequestsResponseTimeOk() (*DeploymentScalingTargetRequestsResponseTime, bool) {
	if o == nil || isNil(o.RequestsResponseTime) {
    return nil, false
	}
	return o.RequestsResponseTime, true
}

// HasRequestsResponseTime returns a boolean if a field has been set.
func (o *DeploymentScalingTarget) HasRequestsResponseTime() bool {
	if o != nil && !isNil(o.RequestsResponseTime) {
		return true
	}

	return false
}

// SetRequestsResponseTime gets a reference to the given DeploymentScalingTargetRequestsResponseTime and assigns it to the RequestsResponseTime field.
func (o *DeploymentScalingTarget) SetRequestsResponseTime(v DeploymentScalingTargetRequestsResponseTime) {
	o.RequestsResponseTime = &v
}

func (o DeploymentScalingTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AverageCpu) {
		toSerialize["average_cpu"] = o.AverageCpu
	}
	if !isNil(o.AverageMem) {
		toSerialize["average_mem"] = o.AverageMem
	}
	if !isNil(o.RequestsPerSecond) {
		toSerialize["requests_per_second"] = o.RequestsPerSecond
	}
	if !isNil(o.ConcurrentRequests) {
		toSerialize["concurrent_requests"] = o.ConcurrentRequests
	}
	if !isNil(o.RequestsResponseTime) {
		toSerialize["requests_response_time"] = o.RequestsResponseTime
	}
	return json.Marshal(toSerialize)
}

type NullableDeploymentScalingTarget struct {
	value *DeploymentScalingTarget
	isSet bool
}

func (v NullableDeploymentScalingTarget) Get() *DeploymentScalingTarget {
	return v.value
}

func (v *NullableDeploymentScalingTarget) Set(val *DeploymentScalingTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentScalingTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentScalingTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentScalingTarget(val *DeploymentScalingTarget) *NullableDeploymentScalingTarget {
	return &NullableDeploymentScalingTarget{value: val, isSet: true}
}

func (v NullableDeploymentScalingTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentScalingTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


