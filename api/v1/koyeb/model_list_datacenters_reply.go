/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the ListDatacentersReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListDatacentersReply{}

// ListDatacentersReply struct for ListDatacentersReply
type ListDatacentersReply struct {
	Datacenters []DatacenterListItem `json:"datacenters,omitempty"`
}

// NewListDatacentersReply instantiates a new ListDatacentersReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListDatacentersReply() *ListDatacentersReply {
	this := ListDatacentersReply{}
	return &this
}

// NewListDatacentersReplyWithDefaults instantiates a new ListDatacentersReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListDatacentersReplyWithDefaults() *ListDatacentersReply {
	this := ListDatacentersReply{}
	return &this
}

// GetDatacenters returns the Datacenters field value if set, zero value otherwise.
func (o *ListDatacentersReply) GetDatacenters() []DatacenterListItem {
	if o == nil || IsNil(o.Datacenters) {
		var ret []DatacenterListItem
		return ret
	}
	return o.Datacenters
}

// GetDatacentersOk returns a tuple with the Datacenters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDatacentersReply) GetDatacentersOk() ([]DatacenterListItem, bool) {
	if o == nil || IsNil(o.Datacenters) {
		return nil, false
	}
	return o.Datacenters, true
}

// HasDatacenters returns a boolean if a field has been set.
func (o *ListDatacentersReply) HasDatacenters() bool {
	if o != nil && !IsNil(o.Datacenters) {
		return true
	}

	return false
}

// SetDatacenters gets a reference to the given []DatacenterListItem and assigns it to the Datacenters field.
func (o *ListDatacentersReply) SetDatacenters(v []DatacenterListItem) {
	o.Datacenters = v
}

func (o ListDatacentersReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListDatacentersReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datacenters) {
		toSerialize["datacenters"] = o.Datacenters
	}
	return toSerialize, nil
}

type NullableListDatacentersReply struct {
	value *ListDatacentersReply
	isSet bool
}

func (v NullableListDatacentersReply) Get() *ListDatacentersReply {
	return v.value
}

func (v *NullableListDatacentersReply) Set(val *ListDatacentersReply) {
	v.value = val
	v.isSet = true
}

func (v NullableListDatacentersReply) IsSet() bool {
	return v.isSet
}

func (v *NullableListDatacentersReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDatacentersReply(val *ListDatacentersReply) *NullableListDatacentersReply {
	return &NullableListDatacentersReply{value: val, isSet: true}
}

func (v NullableListDatacentersReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDatacentersReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


