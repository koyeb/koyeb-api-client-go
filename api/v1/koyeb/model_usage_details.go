/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"time"
)

// checks if the UsageDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageDetails{}

// UsageDetails struct for UsageDetails
type UsageDetails struct {
	OrganizationId *string `json:"organization_id,omitempty"`
	InstanceId *string `json:"instance_id,omitempty"`
	AppId *string `json:"app_id,omitempty"`
	AppName *string `json:"app_name,omitempty"`
	ServiceId *string `json:"service_id,omitempty"`
	ServiceName *string `json:"service_name,omitempty"`
	RegionalDeploymentId *string `json:"regional_deployment_id,omitempty"`
	Region *string `json:"region,omitempty"`
	DeploymentId *string `json:"deployment_id,omitempty"`
	InstanceType *string `json:"instance_type,omitempty"`
	DurationSeconds *int64 `json:"duration_seconds,omitempty"`
	StartedAt *time.Time `json:"started_at,omitempty"`
	TerminatedAt *time.Time `json:"terminated_at,omitempty"`
}

// NewUsageDetails instantiates a new UsageDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageDetails() *UsageDetails {
	this := UsageDetails{}
	return &this
}

// NewUsageDetailsWithDefaults instantiates a new UsageDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageDetailsWithDefaults() *UsageDetails {
	this := UsageDetails{}
	return &this
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *UsageDetails) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *UsageDetails) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *UsageDetails) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *UsageDetails) GetInstanceId() string {
	if o == nil || IsNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *UsageDetails) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *UsageDetails) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *UsageDetails) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *UsageDetails) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *UsageDetails) SetAppId(v string) {
	o.AppId = &v
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *UsageDetails) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *UsageDetails) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *UsageDetails) SetAppName(v string) {
	o.AppName = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *UsageDetails) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *UsageDetails) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *UsageDetails) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *UsageDetails) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *UsageDetails) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *UsageDetails) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetRegionalDeploymentId returns the RegionalDeploymentId field value if set, zero value otherwise.
func (o *UsageDetails) GetRegionalDeploymentId() string {
	if o == nil || IsNil(o.RegionalDeploymentId) {
		var ret string
		return ret
	}
	return *o.RegionalDeploymentId
}

// GetRegionalDeploymentIdOk returns a tuple with the RegionalDeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetRegionalDeploymentIdOk() (*string, bool) {
	if o == nil || IsNil(o.RegionalDeploymentId) {
		return nil, false
	}
	return o.RegionalDeploymentId, true
}

// HasRegionalDeploymentId returns a boolean if a field has been set.
func (o *UsageDetails) HasRegionalDeploymentId() bool {
	if o != nil && !IsNil(o.RegionalDeploymentId) {
		return true
	}

	return false
}

// SetRegionalDeploymentId gets a reference to the given string and assigns it to the RegionalDeploymentId field.
func (o *UsageDetails) SetRegionalDeploymentId(v string) {
	o.RegionalDeploymentId = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *UsageDetails) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *UsageDetails) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *UsageDetails) SetRegion(v string) {
	o.Region = &v
}

// GetDeploymentId returns the DeploymentId field value if set, zero value otherwise.
func (o *UsageDetails) GetDeploymentId() string {
	if o == nil || IsNil(o.DeploymentId) {
		var ret string
		return ret
	}
	return *o.DeploymentId
}

// GetDeploymentIdOk returns a tuple with the DeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetDeploymentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentId) {
		return nil, false
	}
	return o.DeploymentId, true
}

// HasDeploymentId returns a boolean if a field has been set.
func (o *UsageDetails) HasDeploymentId() bool {
	if o != nil && !IsNil(o.DeploymentId) {
		return true
	}

	return false
}

// SetDeploymentId gets a reference to the given string and assigns it to the DeploymentId field.
func (o *UsageDetails) SetDeploymentId(v string) {
	o.DeploymentId = &v
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *UsageDetails) GetInstanceType() string {
	if o == nil || IsNil(o.InstanceType) {
		var ret string
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetInstanceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceType) {
		return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *UsageDetails) HasInstanceType() bool {
	if o != nil && !IsNil(o.InstanceType) {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given string and assigns it to the InstanceType field.
func (o *UsageDetails) SetInstanceType(v string) {
	o.InstanceType = &v
}

// GetDurationSeconds returns the DurationSeconds field value if set, zero value otherwise.
func (o *UsageDetails) GetDurationSeconds() int64 {
	if o == nil || IsNil(o.DurationSeconds) {
		var ret int64
		return ret
	}
	return *o.DurationSeconds
}

// GetDurationSecondsOk returns a tuple with the DurationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetDurationSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.DurationSeconds) {
		return nil, false
	}
	return o.DurationSeconds, true
}

// HasDurationSeconds returns a boolean if a field has been set.
func (o *UsageDetails) HasDurationSeconds() bool {
	if o != nil && !IsNil(o.DurationSeconds) {
		return true
	}

	return false
}

// SetDurationSeconds gets a reference to the given int64 and assigns it to the DurationSeconds field.
func (o *UsageDetails) SetDurationSeconds(v int64) {
	o.DurationSeconds = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *UsageDetails) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *UsageDetails) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *UsageDetails) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetTerminatedAt returns the TerminatedAt field value if set, zero value otherwise.
func (o *UsageDetails) GetTerminatedAt() time.Time {
	if o == nil || IsNil(o.TerminatedAt) {
		var ret time.Time
		return ret
	}
	return *o.TerminatedAt
}

// GetTerminatedAtOk returns a tuple with the TerminatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageDetails) GetTerminatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TerminatedAt) {
		return nil, false
	}
	return o.TerminatedAt, true
}

// HasTerminatedAt returns a boolean if a field has been set.
func (o *UsageDetails) HasTerminatedAt() bool {
	if o != nil && !IsNil(o.TerminatedAt) {
		return true
	}

	return false
}

// SetTerminatedAt gets a reference to the given time.Time and assigns it to the TerminatedAt field.
func (o *UsageDetails) SetTerminatedAt(v time.Time) {
	o.TerminatedAt = &v
}

func (o UsageDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.InstanceId) {
		toSerialize["instance_id"] = o.InstanceId
	}
	if !IsNil(o.AppId) {
		toSerialize["app_id"] = o.AppId
	}
	if !IsNil(o.AppName) {
		toSerialize["app_name"] = o.AppName
	}
	if !IsNil(o.ServiceId) {
		toSerialize["service_id"] = o.ServiceId
	}
	if !IsNil(o.ServiceName) {
		toSerialize["service_name"] = o.ServiceName
	}
	if !IsNil(o.RegionalDeploymentId) {
		toSerialize["regional_deployment_id"] = o.RegionalDeploymentId
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.DeploymentId) {
		toSerialize["deployment_id"] = o.DeploymentId
	}
	if !IsNil(o.InstanceType) {
		toSerialize["instance_type"] = o.InstanceType
	}
	if !IsNil(o.DurationSeconds) {
		toSerialize["duration_seconds"] = o.DurationSeconds
	}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.TerminatedAt) {
		toSerialize["terminated_at"] = o.TerminatedAt
	}
	return toSerialize, nil
}

type NullableUsageDetails struct {
	value *UsageDetails
	isSet bool
}

func (v NullableUsageDetails) Get() *UsageDetails {
	return v.value
}

func (v *NullableUsageDetails) Set(val *UsageDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageDetails(val *UsageDetails) *NullableUsageDetails {
	return &NullableUsageDetails{value: val, isSet: true}
}

func (v NullableUsageDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


