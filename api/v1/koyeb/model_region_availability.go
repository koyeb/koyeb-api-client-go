/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// RegionAvailability struct for RegionAvailability
type RegionAvailability struct {
	Availability *AvailabilityLevel `json:"availability,omitempty"`
}

// NewRegionAvailability instantiates a new RegionAvailability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionAvailability() *RegionAvailability {
	this := RegionAvailability{}
	var availability AvailabilityLevel = AVAILABILITYLEVEL_UNKNOWN
	this.Availability = &availability
	return &this
}

// NewRegionAvailabilityWithDefaults instantiates a new RegionAvailability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionAvailabilityWithDefaults() *RegionAvailability {
	this := RegionAvailability{}
	var availability AvailabilityLevel = AVAILABILITYLEVEL_UNKNOWN
	this.Availability = &availability
	return &this
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *RegionAvailability) GetAvailability() AvailabilityLevel {
	if o == nil || isNil(o.Availability) {
		var ret AvailabilityLevel
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionAvailability) GetAvailabilityOk() (*AvailabilityLevel, bool) {
	if o == nil || isNil(o.Availability) {
    return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *RegionAvailability) HasAvailability() bool {
	if o != nil && !isNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given AvailabilityLevel and assigns it to the Availability field.
func (o *RegionAvailability) SetAvailability(v AvailabilityLevel) {
	o.Availability = &v
}

func (o RegionAvailability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	return json.Marshal(toSerialize)
}

type NullableRegionAvailability struct {
	value *RegionAvailability
	isSet bool
}

func (v NullableRegionAvailability) Get() *RegionAvailability {
	return v.value
}

func (v *NullableRegionAvailability) Set(val *RegionAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionAvailability(val *RegionAvailability) *NullableRegionAvailability {
	return &NullableRegionAvailability{value: val, isSet: true}
}

func (v NullableRegionAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


