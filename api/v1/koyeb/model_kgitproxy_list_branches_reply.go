/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the KgitproxyListBranchesReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KgitproxyListBranchesReply{}

// KgitproxyListBranchesReply struct for KgitproxyListBranchesReply
type KgitproxyListBranchesReply struct {
	// The collection of branches.
	Branches []KgitproxyBranch `json:"branches,omitempty"`
	// The limit in the request.
	Limit *int64 `json:"limit,omitempty"`
	// The offset in the request.
	Offset *int64 `json:"offset,omitempty"`
	// The total number of items.
	Count *int64 `json:"count,omitempty"`
}

// NewKgitproxyListBranchesReply instantiates a new KgitproxyListBranchesReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKgitproxyListBranchesReply() *KgitproxyListBranchesReply {
	this := KgitproxyListBranchesReply{}
	return &this
}

// NewKgitproxyListBranchesReplyWithDefaults instantiates a new KgitproxyListBranchesReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKgitproxyListBranchesReplyWithDefaults() *KgitproxyListBranchesReply {
	this := KgitproxyListBranchesReply{}
	return &this
}

// GetBranches returns the Branches field value if set, zero value otherwise.
func (o *KgitproxyListBranchesReply) GetBranches() []KgitproxyBranch {
	if o == nil || IsNil(o.Branches) {
		var ret []KgitproxyBranch
		return ret
	}
	return o.Branches
}

// GetBranchesOk returns a tuple with the Branches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyListBranchesReply) GetBranchesOk() ([]KgitproxyBranch, bool) {
	if o == nil || IsNil(o.Branches) {
		return nil, false
	}
	return o.Branches, true
}

// HasBranches returns a boolean if a field has been set.
func (o *KgitproxyListBranchesReply) HasBranches() bool {
	if o != nil && !IsNil(o.Branches) {
		return true
	}

	return false
}

// SetBranches gets a reference to the given []KgitproxyBranch and assigns it to the Branches field.
func (o *KgitproxyListBranchesReply) SetBranches(v []KgitproxyBranch) {
	o.Branches = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *KgitproxyListBranchesReply) GetLimit() int64 {
	if o == nil || IsNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyListBranchesReply) GetLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *KgitproxyListBranchesReply) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *KgitproxyListBranchesReply) SetLimit(v int64) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *KgitproxyListBranchesReply) GetOffset() int64 {
	if o == nil || IsNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyListBranchesReply) GetOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *KgitproxyListBranchesReply) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *KgitproxyListBranchesReply) SetOffset(v int64) {
	o.Offset = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *KgitproxyListBranchesReply) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KgitproxyListBranchesReply) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *KgitproxyListBranchesReply) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *KgitproxyListBranchesReply) SetCount(v int64) {
	o.Count = &v
}

func (o KgitproxyListBranchesReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KgitproxyListBranchesReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Branches) {
		toSerialize["branches"] = o.Branches
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullableKgitproxyListBranchesReply struct {
	value *KgitproxyListBranchesReply
	isSet bool
}

func (v NullableKgitproxyListBranchesReply) Get() *KgitproxyListBranchesReply {
	return v.value
}

func (v *NullableKgitproxyListBranchesReply) Set(val *KgitproxyListBranchesReply) {
	v.value = val
	v.isSet = true
}

func (v NullableKgitproxyListBranchesReply) IsSet() bool {
	return v.isSet
}

func (v *NullableKgitproxyListBranchesReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKgitproxyListBranchesReply(val *KgitproxyListBranchesReply) *NullableKgitproxyListBranchesReply {
	return &NullableKgitproxyListBranchesReply{value: val, isSet: true}
}

func (v NullableKgitproxyListBranchesReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKgitproxyListBranchesReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


