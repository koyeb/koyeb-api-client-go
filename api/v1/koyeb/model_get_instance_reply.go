/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the GetInstanceReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetInstanceReply{}

// GetInstanceReply struct for GetInstanceReply
type GetInstanceReply struct {
	Instance *Instance `json:"instance,omitempty"`
}

// NewGetInstanceReply instantiates a new GetInstanceReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetInstanceReply() *GetInstanceReply {
	this := GetInstanceReply{}
	return &this
}

// NewGetInstanceReplyWithDefaults instantiates a new GetInstanceReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetInstanceReplyWithDefaults() *GetInstanceReply {
	this := GetInstanceReply{}
	return &this
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *GetInstanceReply) GetInstance() Instance {
	if o == nil || IsNil(o.Instance) {
		var ret Instance
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInstanceReply) GetInstanceOk() (*Instance, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *GetInstanceReply) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given Instance and assigns it to the Instance field.
func (o *GetInstanceReply) SetInstance(v Instance) {
	o.Instance = &v
}

func (o GetInstanceReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetInstanceReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	return toSerialize, nil
}

type NullableGetInstanceReply struct {
	value *GetInstanceReply
	isSet bool
}

func (v NullableGetInstanceReply) Get() *GetInstanceReply {
	return v.value
}

func (v *NullableGetInstanceReply) Set(val *GetInstanceReply) {
	v.value = val
	v.isSet = true
}

func (v NullableGetInstanceReply) IsSet() bool {
	return v.isSet
}

func (v *NullableGetInstanceReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetInstanceReply(val *GetInstanceReply) *NullableGetInstanceReply {
	return &NullableGetInstanceReply{value: val, isSet: true}
}

func (v NullableGetInstanceReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetInstanceReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


