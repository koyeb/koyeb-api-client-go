/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// SnapshotType the model 'SnapshotType'
type SnapshotType string

// List of SnapshotType
const (
	SNAPSHOTTYPE_INVALID SnapshotType = "SNAPSHOT_TYPE_INVALID"
	SNAPSHOTTYPE_LOCAL SnapshotType = "SNAPSHOT_TYPE_LOCAL"
	SNAPSHOTTYPE_REMOTE SnapshotType = "SNAPSHOT_TYPE_REMOTE"
)

// All allowed values of SnapshotType enum
var AllowedSnapshotTypeEnumValues = []SnapshotType{
	"SNAPSHOT_TYPE_INVALID",
	"SNAPSHOT_TYPE_LOCAL",
	"SNAPSHOT_TYPE_REMOTE",
}

func (v *SnapshotType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SnapshotType(value)
	for _, existing := range AllowedSnapshotTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SnapshotType", value)
}

// NewSnapshotTypeFromValue returns a pointer to a valid SnapshotType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSnapshotTypeFromValue(v string) (*SnapshotType, error) {
	ev := SnapshotType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SnapshotType: valid values are %v", v, AllowedSnapshotTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SnapshotType) IsValid() bool {
	for _, existing := range AllowedSnapshotTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SnapshotType value
func (v SnapshotType) Ptr() *SnapshotType {
	return &v
}

type NullableSnapshotType struct {
	value *SnapshotType
	isSet bool
}

func (v NullableSnapshotType) Get() *SnapshotType {
	return v.value
}

func (v *NullableSnapshotType) Set(val *SnapshotType) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotType) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotType(val *SnapshotType) *NullableSnapshotType {
	return &NullableSnapshotType{value: val, isSet: true}
}

func (v NullableSnapshotType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

