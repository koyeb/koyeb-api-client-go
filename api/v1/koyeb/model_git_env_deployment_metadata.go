/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// GitEnvDeploymentMetadata struct for GitEnvDeploymentMetadata
type GitEnvDeploymentMetadata struct {
	Sha *string `json:"sha,omitempty"`
	CommitAuthor *string `json:"commit_author,omitempty"`
	CommitMessage *string `json:"commit_message,omitempty"`
}

// NewGitEnvDeploymentMetadata instantiates a new GitEnvDeploymentMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitEnvDeploymentMetadata() *GitEnvDeploymentMetadata {
	this := GitEnvDeploymentMetadata{}
	return &this
}

// NewGitEnvDeploymentMetadataWithDefaults instantiates a new GitEnvDeploymentMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitEnvDeploymentMetadataWithDefaults() *GitEnvDeploymentMetadata {
	this := GitEnvDeploymentMetadata{}
	return &this
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *GitEnvDeploymentMetadata) GetSha() string {
	if o == nil || isNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitEnvDeploymentMetadata) GetShaOk() (*string, bool) {
	if o == nil || isNil(o.Sha) {
    return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *GitEnvDeploymentMetadata) HasSha() bool {
	if o != nil && !isNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *GitEnvDeploymentMetadata) SetSha(v string) {
	o.Sha = &v
}

// GetCommitAuthor returns the CommitAuthor field value if set, zero value otherwise.
func (o *GitEnvDeploymentMetadata) GetCommitAuthor() string {
	if o == nil || isNil(o.CommitAuthor) {
		var ret string
		return ret
	}
	return *o.CommitAuthor
}

// GetCommitAuthorOk returns a tuple with the CommitAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitEnvDeploymentMetadata) GetCommitAuthorOk() (*string, bool) {
	if o == nil || isNil(o.CommitAuthor) {
    return nil, false
	}
	return o.CommitAuthor, true
}

// HasCommitAuthor returns a boolean if a field has been set.
func (o *GitEnvDeploymentMetadata) HasCommitAuthor() bool {
	if o != nil && !isNil(o.CommitAuthor) {
		return true
	}

	return false
}

// SetCommitAuthor gets a reference to the given string and assigns it to the CommitAuthor field.
func (o *GitEnvDeploymentMetadata) SetCommitAuthor(v string) {
	o.CommitAuthor = &v
}

// GetCommitMessage returns the CommitMessage field value if set, zero value otherwise.
func (o *GitEnvDeploymentMetadata) GetCommitMessage() string {
	if o == nil || isNil(o.CommitMessage) {
		var ret string
		return ret
	}
	return *o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitEnvDeploymentMetadata) GetCommitMessageOk() (*string, bool) {
	if o == nil || isNil(o.CommitMessage) {
    return nil, false
	}
	return o.CommitMessage, true
}

// HasCommitMessage returns a boolean if a field has been set.
func (o *GitEnvDeploymentMetadata) HasCommitMessage() bool {
	if o != nil && !isNil(o.CommitMessage) {
		return true
	}

	return false
}

// SetCommitMessage gets a reference to the given string and assigns it to the CommitMessage field.
func (o *GitEnvDeploymentMetadata) SetCommitMessage(v string) {
	o.CommitMessage = &v
}

func (o GitEnvDeploymentMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Sha) {
		toSerialize["sha"] = o.Sha
	}
	if !isNil(o.CommitAuthor) {
		toSerialize["commit_author"] = o.CommitAuthor
	}
	if !isNil(o.CommitMessage) {
		toSerialize["commit_message"] = o.CommitMessage
	}
	return json.Marshal(toSerialize)
}

type NullableGitEnvDeploymentMetadata struct {
	value *GitEnvDeploymentMetadata
	isSet bool
}

func (v NullableGitEnvDeploymentMetadata) Get() *GitEnvDeploymentMetadata {
	return v.value
}

func (v *NullableGitEnvDeploymentMetadata) Set(val *GitEnvDeploymentMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableGitEnvDeploymentMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableGitEnvDeploymentMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitEnvDeploymentMetadata(val *GitEnvDeploymentMetadata) *NullableGitEnvDeploymentMetadata {
	return &NullableGitEnvDeploymentMetadata{value: val, isSet: true}
}

func (v NullableGitEnvDeploymentMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitEnvDeploymentMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


