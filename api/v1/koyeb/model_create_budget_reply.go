/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// CreateBudgetReply struct for CreateBudgetReply
type CreateBudgetReply struct {
	Budget *Budget `json:"budget,omitempty"`
}

// NewCreateBudgetReply instantiates a new CreateBudgetReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBudgetReply() *CreateBudgetReply {
	this := CreateBudgetReply{}
	return &this
}

// NewCreateBudgetReplyWithDefaults instantiates a new CreateBudgetReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBudgetReplyWithDefaults() *CreateBudgetReply {
	this := CreateBudgetReply{}
	return &this
}

// GetBudget returns the Budget field value if set, zero value otherwise.
func (o *CreateBudgetReply) GetBudget() Budget {
	if o == nil || isNil(o.Budget) {
		var ret Budget
		return ret
	}
	return *o.Budget
}

// GetBudgetOk returns a tuple with the Budget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBudgetReply) GetBudgetOk() (*Budget, bool) {
	if o == nil || isNil(o.Budget) {
    return nil, false
	}
	return o.Budget, true
}

// HasBudget returns a boolean if a field has been set.
func (o *CreateBudgetReply) HasBudget() bool {
	if o != nil && !isNil(o.Budget) {
		return true
	}

	return false
}

// SetBudget gets a reference to the given Budget and assigns it to the Budget field.
func (o *CreateBudgetReply) SetBudget(v Budget) {
	o.Budget = &v
}

func (o CreateBudgetReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Budget) {
		toSerialize["budget"] = o.Budget
	}
	return json.Marshal(toSerialize)
}

type NullableCreateBudgetReply struct {
	value *CreateBudgetReply
	isSet bool
}

func (v NullableCreateBudgetReply) Get() *CreateBudgetReply {
	return v.value
}

func (v *NullableCreateBudgetReply) Set(val *CreateBudgetReply) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBudgetReply) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBudgetReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBudgetReply(val *CreateBudgetReply) *NullableCreateBudgetReply {
	return &NullableCreateBudgetReply{value: val, isSet: true}
}

func (v NullableCreateBudgetReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBudgetReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


