/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the RedeployRequestInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedeployRequestInfo{}

// RedeployRequestInfo struct for RedeployRequestInfo
type RedeployRequestInfo struct {
	DeploymentGroup *string `json:"deployment_group,omitempty"`
	Sha *string `json:"sha,omitempty"`
	UseCache *bool `json:"use_cache,omitempty"`
}

// NewRedeployRequestInfo instantiates a new RedeployRequestInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedeployRequestInfo() *RedeployRequestInfo {
	this := RedeployRequestInfo{}
	return &this
}

// NewRedeployRequestInfoWithDefaults instantiates a new RedeployRequestInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedeployRequestInfoWithDefaults() *RedeployRequestInfo {
	this := RedeployRequestInfo{}
	return &this
}

// GetDeploymentGroup returns the DeploymentGroup field value if set, zero value otherwise.
func (o *RedeployRequestInfo) GetDeploymentGroup() string {
	if o == nil || IsNil(o.DeploymentGroup) {
		var ret string
		return ret
	}
	return *o.DeploymentGroup
}

// GetDeploymentGroupOk returns a tuple with the DeploymentGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedeployRequestInfo) GetDeploymentGroupOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentGroup) {
		return nil, false
	}
	return o.DeploymentGroup, true
}

// HasDeploymentGroup returns a boolean if a field has been set.
func (o *RedeployRequestInfo) HasDeploymentGroup() bool {
	if o != nil && !IsNil(o.DeploymentGroup) {
		return true
	}

	return false
}

// SetDeploymentGroup gets a reference to the given string and assigns it to the DeploymentGroup field.
func (o *RedeployRequestInfo) SetDeploymentGroup(v string) {
	o.DeploymentGroup = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *RedeployRequestInfo) GetSha() string {
	if o == nil || IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedeployRequestInfo) GetShaOk() (*string, bool) {
	if o == nil || IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *RedeployRequestInfo) HasSha() bool {
	if o != nil && !IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *RedeployRequestInfo) SetSha(v string) {
	o.Sha = &v
}

// GetUseCache returns the UseCache field value if set, zero value otherwise.
func (o *RedeployRequestInfo) GetUseCache() bool {
	if o == nil || IsNil(o.UseCache) {
		var ret bool
		return ret
	}
	return *o.UseCache
}

// GetUseCacheOk returns a tuple with the UseCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedeployRequestInfo) GetUseCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCache) {
		return nil, false
	}
	return o.UseCache, true
}

// HasUseCache returns a boolean if a field has been set.
func (o *RedeployRequestInfo) HasUseCache() bool {
	if o != nil && !IsNil(o.UseCache) {
		return true
	}

	return false
}

// SetUseCache gets a reference to the given bool and assigns it to the UseCache field.
func (o *RedeployRequestInfo) SetUseCache(v bool) {
	o.UseCache = &v
}

func (o RedeployRequestInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedeployRequestInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeploymentGroup) {
		toSerialize["deployment_group"] = o.DeploymentGroup
	}
	if !IsNil(o.Sha) {
		toSerialize["sha"] = o.Sha
	}
	if !IsNil(o.UseCache) {
		toSerialize["use_cache"] = o.UseCache
	}
	return toSerialize, nil
}

type NullableRedeployRequestInfo struct {
	value *RedeployRequestInfo
	isSet bool
}

func (v NullableRedeployRequestInfo) Get() *RedeployRequestInfo {
	return v.value
}

func (v *NullableRedeployRequestInfo) Set(val *RedeployRequestInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRedeployRequestInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRedeployRequestInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedeployRequestInfo(val *RedeployRequestInfo) *NullableRedeployRequestInfo {
	return &NullableRedeployRequestInfo{value: val, isSet: true}
}

func (v NullableRedeployRequestInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedeployRequestInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


