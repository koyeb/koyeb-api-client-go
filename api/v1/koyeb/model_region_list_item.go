/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// RegionListItem struct for RegionListItem
type RegionListItem struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Coordinates []string `json:"coordinates,omitempty"`
	Status *string `json:"status,omitempty"`
	Instances []string `json:"instances,omitempty"`
	Datacenters []string `json:"datacenters,omitempty"`
	VolumesEnabled *bool `json:"volumes_enabled,omitempty"`
	// The scope of the region, continent, metropolitan area, etc.
	Scope *string `json:"scope,omitempty"`
}

// NewRegionListItem instantiates a new RegionListItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionListItem() *RegionListItem {
	this := RegionListItem{}
	return &this
}

// NewRegionListItemWithDefaults instantiates a new RegionListItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionListItemWithDefaults() *RegionListItem {
	this := RegionListItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegionListItem) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionListItem) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegionListItem) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RegionListItem) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RegionListItem) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionListItem) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RegionListItem) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RegionListItem) SetName(v string) {
	o.Name = &v
}

// GetCoordinates returns the Coordinates field value if set, zero value otherwise.
func (o *RegionListItem) GetCoordinates() []string {
	if o == nil || isNil(o.Coordinates) {
		var ret []string
		return ret
	}
	return o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionListItem) GetCoordinatesOk() ([]string, bool) {
	if o == nil || isNil(o.Coordinates) {
    return nil, false
	}
	return o.Coordinates, true
}

// HasCoordinates returns a boolean if a field has been set.
func (o *RegionListItem) HasCoordinates() bool {
	if o != nil && !isNil(o.Coordinates) {
		return true
	}

	return false
}

// SetCoordinates gets a reference to the given []string and assigns it to the Coordinates field.
func (o *RegionListItem) SetCoordinates(v []string) {
	o.Coordinates = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RegionListItem) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionListItem) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RegionListItem) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RegionListItem) SetStatus(v string) {
	o.Status = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *RegionListItem) GetInstances() []string {
	if o == nil || isNil(o.Instances) {
		var ret []string
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionListItem) GetInstancesOk() ([]string, bool) {
	if o == nil || isNil(o.Instances) {
    return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *RegionListItem) HasInstances() bool {
	if o != nil && !isNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []string and assigns it to the Instances field.
func (o *RegionListItem) SetInstances(v []string) {
	o.Instances = v
}

// GetDatacenters returns the Datacenters field value if set, zero value otherwise.
func (o *RegionListItem) GetDatacenters() []string {
	if o == nil || isNil(o.Datacenters) {
		var ret []string
		return ret
	}
	return o.Datacenters
}

// GetDatacentersOk returns a tuple with the Datacenters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionListItem) GetDatacentersOk() ([]string, bool) {
	if o == nil || isNil(o.Datacenters) {
    return nil, false
	}
	return o.Datacenters, true
}

// HasDatacenters returns a boolean if a field has been set.
func (o *RegionListItem) HasDatacenters() bool {
	if o != nil && !isNil(o.Datacenters) {
		return true
	}

	return false
}

// SetDatacenters gets a reference to the given []string and assigns it to the Datacenters field.
func (o *RegionListItem) SetDatacenters(v []string) {
	o.Datacenters = v
}

// GetVolumesEnabled returns the VolumesEnabled field value if set, zero value otherwise.
func (o *RegionListItem) GetVolumesEnabled() bool {
	if o == nil || isNil(o.VolumesEnabled) {
		var ret bool
		return ret
	}
	return *o.VolumesEnabled
}

// GetVolumesEnabledOk returns a tuple with the VolumesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionListItem) GetVolumesEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.VolumesEnabled) {
    return nil, false
	}
	return o.VolumesEnabled, true
}

// HasVolumesEnabled returns a boolean if a field has been set.
func (o *RegionListItem) HasVolumesEnabled() bool {
	if o != nil && !isNil(o.VolumesEnabled) {
		return true
	}

	return false
}

// SetVolumesEnabled gets a reference to the given bool and assigns it to the VolumesEnabled field.
func (o *RegionListItem) SetVolumesEnabled(v bool) {
	o.VolumesEnabled = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *RegionListItem) GetScope() string {
	if o == nil || isNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionListItem) GetScopeOk() (*string, bool) {
	if o == nil || isNil(o.Scope) {
    return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *RegionListItem) HasScope() bool {
	if o != nil && !isNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *RegionListItem) SetScope(v string) {
	o.Scope = &v
}

func (o RegionListItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Coordinates) {
		toSerialize["coordinates"] = o.Coordinates
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !isNil(o.Datacenters) {
		toSerialize["datacenters"] = o.Datacenters
	}
	if !isNil(o.VolumesEnabled) {
		toSerialize["volumes_enabled"] = o.VolumesEnabled
	}
	if !isNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return json.Marshal(toSerialize)
}

type NullableRegionListItem struct {
	value *RegionListItem
	isSet bool
}

func (v NullableRegionListItem) Get() *RegionListItem {
	return v.value
}

func (v *NullableRegionListItem) Set(val *RegionListItem) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionListItem) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionListItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionListItem(val *RegionListItem) *NullableRegionListItem {
	return &NullableRegionListItem{value: val, isSet: true}
}

func (v NullableRegionListItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionListItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


