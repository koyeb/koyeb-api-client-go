/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// checks if the ErrorField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorField{}

// ErrorField struct for ErrorField
type ErrorField struct {
	Field *string `json:"field,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewErrorField instantiates a new ErrorField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorField() *ErrorField {
	this := ErrorField{}
	return &this
}

// NewErrorFieldWithDefaults instantiates a new ErrorField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorFieldWithDefaults() *ErrorField {
	this := ErrorField{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *ErrorField) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorField) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *ErrorField) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *ErrorField) SetField(v string) {
	o.Field = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ErrorField) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorField) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ErrorField) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ErrorField) SetDescription(v string) {
	o.Description = &v
}

func (o ErrorField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableErrorField struct {
	value *ErrorField
	isSet bool
}

func (v NullableErrorField) Get() *ErrorField {
	return v.value
}

func (v *NullableErrorField) Set(val *ErrorField) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorField) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorField(val *ErrorField) *NullableErrorField {
	return &NullableErrorField{value: val, isSet: true}
}

func (v NullableErrorField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


